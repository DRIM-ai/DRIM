import { OrderType } from '../types';
import { evaluateRowColumnValue, evaluateGroupColumnValue, getColumnIdentity } from './select';
export const order = ({ orderBy, source }) => {
    return tableData => {
        if (!(orderBy === null || orderBy === void 0 ? void 0 : orderBy.length))
            return tableData;
        const rows = [...tableData];
        const manualListMaps = getManualListMaps(orderBy);
        const compare = definedCompare({
            orderBy,
            manualListMaps,
            getValue: (row, order) => evaluateRowColumnValue({
                row,
                source: rows,
                column: order
            })
        });
        return rows.sort(compare);
    };
};
export const orderGroup = ({ orderBy, source }) => {
    return grouped => {
        if (!(orderBy === null || orderBy === void 0 ? void 0 : orderBy.length))
            return grouped;
        const manualListMaps = getManualListMaps(orderBy);
        const compare = definedCompare({
            orderBy,
            manualListMaps,
            getValue: (group, order) => {
                return evaluateGroupColumnValue({
                    group,
                    source,
                    column: order
                });
            }
        });
        return grouped.sort(compare);
    };
};
const getManualListMaps = (orderBy) => {
    const manualListMaps = new Map();
    orderBy.forEach(order => {
        if (order.type == OrderType.Manual) {
            manualListMaps.set(getColumnIdentity(order), new Map(order.manualList.map((value, index) => [value, index])));
        }
    });
    return manualListMaps;
};
const definedCompare = (params) => {
    const { orderBy, getValue, manualListMaps } = params;
    return (item1, item2) => {
        for (const order of orderBy) {
            let compareResult = 0;
            if (!order.type || order.type === OrderType.Asc) {
                compareResult = compareValue(getValue(item1, order), getValue(item2, order));
            }
            else if (order.type === OrderType.Desc) {
                compareResult = compareValue(getValue(item2, order), getValue(item1, order));
            }
            else {
                const manualMap = manualListMaps.get(getColumnIdentity(order));
                compareResult = compareInManualList(manualMap, getValue(item1, order), getValue(item2, order));
            }
            if (compareResult !== 0)
                return compareResult;
        }
        return 0;
    };
};
const compareValue = (value1, value2) => {
    if (value1 === null || value2 === null) {
        if (value1 === null && value2 !== null)
            return 1;
        if (value1 !== null && value2 === null)
            return -1;
        return 0;
    }
    if (value1 < value2)
        return -1;
    if (value1 > value2)
        return 1;
    return 0;
};
const compareInManualList = (manualMap, value1, value2) => {
    if (value1 === value2)
        return 0;
    if (manualMap.has(value1) && !manualMap.has(value2))
        return -1;
    if (!manualMap.has(value1) && manualMap.has(value2))
        return 1;
    if (!manualMap.has(value1) && !manualMap.has(value2))
        return 0;
    const diff = manualMap.get(value1) - manualMap.get(value2);
    return diff > 0 ? 1 : -1;
};
