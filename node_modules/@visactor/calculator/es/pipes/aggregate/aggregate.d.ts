import { type ColumnName, type Value, type GroupChunk, type GroupedData, type Aggregation, AggregateType, type AggregateMethod, type AggregationCache, type WhetherDistinctCache } from '../../types';
export declare const aggregateGroupColumn: (params: {
    group: GroupChunk;
    column: ColumnName;
    aggregate?: Aggregation;
}) => Value;
export declare const aggregateWithCache: (params: {
    group: GroupChunk;
    column: ColumnName;
    aggregate: Aggregation;
}) => Value;
export declare const getAggregateCacheMap: (params: {
    group: GroupChunk;
    column: ColumnName;
    aggregate: Aggregation;
}) => AggregationCache;
export declare const extractColumnValues: (params: {
    group: GroupChunk;
    column: ColumnName;
    distinct?: boolean;
}) => Value[];
export declare const whetherDistinct: (aggregate: Aggregation) => keyof WhetherDistinctCache;
export declare const getAggregationName: (aggregate: Aggregation) => AggregateType | AggregateMethod['name'];
export declare const aggregateTypeMap: Record<AggregateType, AggregateMethod>;
export declare const getAggregateMethod: (aggregate: Aggregation) => AggregateMethod;
export declare const removeAggregateCache: (grouped: GroupedData) => GroupedData;
