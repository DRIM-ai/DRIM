import { JoinType, } from './types';
import { buildGroupsMap } from './pipes';
export const join = ({ type, left, right, using }) => {
    const joinMethods = {
        [JoinType.Left]: leftJoin,
        [JoinType.Right]: rightJoin,
        [JoinType.Inner]: innerJoin,
        [JoinType.Cross]: crossJoin,
    };
    return joinMethods[type]({ left, right, using });
};
export const leftJoin = ({ left, right, using }) => {
    const result = [];
    const rightIndex = buildGroupsMap({
        tableData: right,
        groupBy: using,
    });
    left.forEach(leftRow => {
        const values = using.map(column => leftRow[column]);
        const rightRows = values.reduce((groupMapOrRows, value) => groupMapOrRows.get(value), rightIndex);
        if (!(rightRows === null || rightRows === void 0 ? void 0 : rightRows.length)) {
            result.push(leftRow);
            return;
        }
        rightRows.forEach(rightRow => {
            result.push({
                ...leftRow,
                ...rightRow,
            });
        });
    });
    return result;
};
export const rightJoin = ({ left, right, using }) => {
    return leftJoin({
        left: right,
        right: left,
        using,
    });
};
export const innerJoin = ({ left, right, using }) => {
    const result = [];
    left.forEach(leftRow => {
        right.forEach(rightRow => {
            if (!(using === null || using === void 0 ? void 0 : using.length)
                || using.every(column => leftRow[column] === rightRow[column])) {
                result.push({
                    ...leftRow,
                    ...rightRow,
                });
            }
        });
    });
    return result;
};
export const crossJoin = ({ left, right }) => {
    return innerJoin({
        left,
        right,
    });
};
