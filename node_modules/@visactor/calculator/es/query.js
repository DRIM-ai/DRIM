import { of } from './pipe';
import * as pipes from './pipes';
export const query = (query) => {
    const { from, select, where, groupBy, having, orderBy, limit } = query;
    if (!from.length)
        return [];
    const needGroup = Boolean((groupBy === null || groupBy === void 0 ? void 0 : groupBy.length) || select.columns.some(column => 'aggregate' in column && column.aggregate));
    if (needGroup) {
        return of(from).pipe(pipes.where({ filter: where, source: from }), pipes.group({ groupBy, source: from }), pipes.having({ filter: having, source: from }), pipes.orderGroup({ orderBy, source: from }), pipes.selectGroup({ select, source: from }), pipes.distinct({ select }), pipes.limit({ limit }));
    }
    return of(from).pipe(pipes.where({ filter: where, source: from }), pipes.order({ orderBy, source: from }), pipes.select({ select, source: from }), pipes.distinct({ select }), pipes.limit({ limit }));
};
