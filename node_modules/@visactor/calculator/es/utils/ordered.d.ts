export declare class OrderedMap<K = any, V = any> extends Map<K, V> {
    private _keys;
    private _indexMap;
    constructor(entries?: [K, V][]);
    clear(): void;
    delete(key: K): boolean;
    set(key: K, value: V): this;
    keys(): IterableIterator<K>;
    values(): IterableIterator<V>;
    entries(): IterableIterator<[K, V]>;
    forEach(callbackfn: (value: V, key: K, map: OrderedMap<K, V>) => void): void;
    [Symbol.iterator](): IterableIterator<[K, V]>;
}
export declare class OrderedSet<T = any> extends Set<T> {
    private _orderedMap;
    constructor(values?: T[]);
    get size(): number;
    clear(): void;
    delete(value: T): boolean;
    add(value: T): this;
    has(value: T): boolean;
    keys(): IterableIterator<T>;
    values(): IterableIterator<T>;
    entries(): IterableIterator<[T, T]>;
    forEach(callbackfn: (value: T, value2: T, set: OrderedSet<T>) => void, thisArg?: any): void;
    [Symbol.iterator](): IterableIterator<T>;
}
