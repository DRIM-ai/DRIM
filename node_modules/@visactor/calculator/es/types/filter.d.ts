import type { ColumnEvaluate, AggregateEvaluate } from './select';
import type { ColumnName } from './data';
import type { Aggregation } from './aggregate';
export type WhereFilterNode = FilterNode<WhereCondition>;
export type HavingFilterNode = FilterNode<HavingCondition>;
export interface FilterNode<Condition extends FilterCondition = WhereCondition> {
    type: FilterNodeType.And | FilterNodeType.Or;
    not?: boolean;
    conditions: (Condition | FilterNode<Condition>)[];
}
export type FilterCondition = {
    type: FilterNodeType.Condition;
    not?: boolean;
} & FilterOperation;
export type WhereCondition = FilterCondition & {
    column: ColumnName | ColumnEvaluate;
};
export type HavingCondition = FilterCondition & ({
    column: ColumnName;
    aggregate?: Aggregation;
} | {
    column: ColumnEvaluate;
} | {
    aggregate: AggregateEvaluate;
});
export declare enum FilterNodeType {
    Condition = "Condition",
    And = "And",
    Or = "Or"
}
export type FilterOperation = {
    operator: FilterOperator.GreaterThan | FilterOperator.GreaterOrEqual | FilterOperator.LessThan | FilterOperator.LessOrEqual | FilterOperator.Equal | FilterOperator.NotEqual;
    value: string | number;
} | {
    operator: FilterOperator.In | FilterOperator.NotIn;
    value: (string | number)[];
} | {
    operator: FilterOperator.IsNull | FilterOperator.IsNotNull;
} | {
    operator: FilterOperator.Between | FilterOperator.NotBetween;
    value: [string, string] | [number, number];
} | {
    operator: FilterOperator.Like | FilterOperator.NotLike;
    value: string;
};
export declare enum FilterOperator {
    GreaterThan = ">",
    GreaterOrEqual = ">=",
    LessThan = "<",
    LessOrEqual = "<=",
    Equal = "=",
    NotEqual = "!=",
    In = "in",
    NotIn = "not in",
    IsNull = "is null",
    IsNotNull = "is not null",
    Between = "between",
    NotBetween = "not between",
    Like = "like",
    NotLike = "not like"
}
