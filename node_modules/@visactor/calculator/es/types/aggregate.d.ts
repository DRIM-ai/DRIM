import type { ColumnName, Value } from './data';
export declare enum AggregateType {
    Count = "Count",
    Max = "Max",
    Min = "Min",
    Sum = "Sum",
    Avg = "Avg"
}
export type AggregateMethod = {
    (params: {
        column: ColumnName;
        values: Value[];
    }): Value;
    name: string;
};
export interface Aggregation {
    distinct?: boolean;
    method: AggregateType | AggregateMethod;
}
export type AggregationMap = Record<ColumnName, WhetherDistinctCache>;
export type WhetherDistinctCache = {
    distinct?: AggregationCache;
    all?: AggregationCache;
};
export type AggregationCache = Map<AggregateType | AggregateMethod['name'], Value>;
