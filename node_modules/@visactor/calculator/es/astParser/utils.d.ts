import { ASTParserContext, ASTParserPipe, DataType, ROLE, SimpleFieldInfo } from './type';
import { Query, TableData } from '../types';
export declare const execPipeline: (src: Partial<Query>, pipes: ASTParserPipe[], context: ASTParserContext) => Partial<Query>;
export declare const toFirstUpperCase: (name?: string) => string;
export declare const checkIsColumnNode: (node: any, columns: any, fieldInfo: SimpleFieldInfo[]) => boolean;
export declare const replaceString: (str: string | number, replaceMap: Map<string, string>) => string | number;
export declare const replaceAll: (originStr: string, replaceStr: string, newStr: string) => string;
export declare const replaceNonASCIICharacters: (str: string) => {
    validStr: string;
    replaceMap: Map<any, any>;
};
export declare const mergeMap: (map1: Map<string, string>, map2: Map<string, string>) => Map<string, string>;
export declare const preprocessSQL: (sql: string, fieldInfo: SimpleFieldInfo[]) => {
    validStr: string;
    replaceMap: Map<string, string>;
};
export declare const detectFieldType: (dataset: TableData, column: string) => SimpleFieldInfo;
export declare const getOriginalString: (str: string, replaceMap: Map<string, string>) => string;
export declare const parseRespondField: (responseFieldInfo: {
    fieldName: string;
    description?: string;
}[], dataset: TableData, replaceMap: Map<string, string>) => {
    fieldName: string;
    description?: string;
    type: DataType;
    role: ROLE;
}[];
