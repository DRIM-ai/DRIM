{"version":3,"sources":["../src/core/VMind.ts"],"names":[],"mappings":"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","file":"VMind.js","sourcesContent":["import { LLMManage } from './llm';\nimport type {\n  BasemapOption,\n  ChartGeneratorCtx,\n  ChartTheme,\n  ChartType,\n  ClusterDataView,\n  DataItem,\n  DataTable,\n  FieldInfo,\n  OuterPackages,\n  TimeType,\n  Usage,\n  VMindOptions\n} from '../types';\nimport { AtomName } from '../types';\nimport {\n  getData2ChartSchedule,\n  getDataQuerySchedule,\n  getText2DataSchedule,\n  getDataInsightSchedule,\n  getText2ChartSchedule,\n  getScheduleLLmOptions\n} from '../applications';\nimport type { Schedule } from '../schedule';\nimport { getFieldInfoFromDataset } from '../utils/field';\nimport { parseCSVData } from '../utils/dataTable';\nimport { fillSpecTemplateWithData } from '../utils/spec';\nimport { _chatToVideoWasm } from '../utils/video';\nimport { merge } from '@visactor/vutils';\nimport type { Insight } from '../atom/dataInsight/type';\nimport type { DataInsightOptions } from '../atom/dataInsight/type';\n\nclass VMind {\n  private options: VMindOptions;\n  private _FPS = 30;\n  private llm: LLMManage;\n  private dataQuerySchedule: Schedule<[AtomName.DATA_QUERY]>;\n  private text2DataTableSchedule: Schedule<[AtomName.DATA_EXTRACT, AtomName.DATA_CLEAN]>;\n  private text2ChartSchedule: Schedule<\n    [AtomName.DATA_EXTRACT, AtomName.DATA_CLEAN, AtomName.CHART_COMMAND, AtomName.CHART_GENERATE]\n  >;\n  private dataInsightSchedule: Schedule<[AtomName.DATA_INSIGHT, AtomName.SPEC_INSIGHT]>;\n  private data2ChartSchedule:\n    | Schedule<[AtomName.DATA_QUERY, AtomName.CHART_GENERATE]>\n    | Schedule<[AtomName.CHART_GENERATE]>;\n\n  constructor(options: VMindOptions) {\n    this.options = merge(\n      {\n        showThoughts: true\n      },\n      options\n    );\n    this.llm = new LLMManage(getScheduleLLmOptions(options));\n    this.data2ChartSchedule = getData2ChartSchedule(this.llm, options);\n    this.dataQuerySchedule = getDataQuerySchedule(this.llm, options);\n    this.text2DataTableSchedule = getText2DataSchedule(this.llm, options);\n    this.text2ChartSchedule = getText2ChartSchedule(this.llm, options);\n    this.dataInsightSchedule = getDataInsightSchedule(this.llm, options);\n  }\n\n  updateOptions(options?: VMindOptions) {\n    this.options = merge(\n      {\n        showThoughts: true\n      },\n      options\n    );\n    this.llm.updateOptions(getScheduleLLmOptions(this.options));\n  }\n\n  /**\n   * parse csv string and get the name, type of each field using rule-based method.\n   * @param csvString csv data user want to visualize\n   * @returns fieldInfo and raw dataset.\n   */\n  parseCSVData(csvString: string): { fieldInfo: FieldInfo[]; dataset: DataItem[] } {\n    //Parse CSV Data without LLM\n    //return dataset and fieldInfo\n    return parseCSVData(csvString);\n  }\n\n  /**\n   * get fieldInfo only by raw dataset\n   * @param dataset\n   * @returns fieldInfo\n   */\n  getFieldInfo(dataset: DataItem[]) {\n    return getFieldInfoFromDataset(dataset);\n  }\n\n  /**\n   *\n   * @param userPrompt user's query\n   * @param dataset current Data set\n   * @param fieldInfo field infomation of dataset\n   * @returns new FieldInfo && new DataSet after user's query\n   */\n  async dataQuery(\n    userPrompt: string, //user's intent of visualization, usually aspect in data that they want to visualize\n    dataset: DataTable,\n    fieldInfo?: FieldInfo[]\n  ) {\n    this.dataQuerySchedule.setNewTask({\n      command: userPrompt,\n      fieldInfo,\n      dataTable: dataset\n    });\n    this.dataQuerySchedule.updateOptions({\n      base: {\n        showThoughts: this.options.showThoughts\n      }\n    });\n    const { dataTable, fieldInfo: newFieldInfo, usage, error } = await this.dataQuerySchedule.run();\n    return {\n      dataTable,\n      fieldInfo: newFieldInfo,\n      usage,\n      error\n    };\n  }\n\n  /**\n   * Extract json format data from the text\n   */\n  async text2Data(\n    text: string,\n    userPrompt?: string,\n    options?: {\n      fieldInfo?: FieldInfo[];\n      hierarchicalClustering?: boolean;\n      clusterThreshold?: number;\n    }\n  ): Promise<{\n    extractDataTable: DataTable;\n    dataTable: DataTable;\n    fieldInfo: FieldInfo[];\n    extractFieldInfo: FieldInfo[];\n    usage: Usage;\n    clusterResult: ClusterDataView[];\n  }> {\n    const { fieldInfo, hierarchicalClustering, clusterThreshold } = options || {};\n    this.text2DataTableSchedule.setNewTask({\n      text,\n      fieldInfo: fieldInfo?.length ? fieldInfo : []\n    });\n    this.text2DataTableSchedule.updateOptions({\n      base: {\n        showThoughts: this.options.showThoughts\n      },\n      dataClean: {\n        hierarchicalClustering,\n        clusterThreshold\n      }\n    });\n    const {\n      dataTable,\n      fieldInfo: newFieldInfo,\n      usage,\n      clusterResult,\n      error\n    } = await this.text2DataTableSchedule.run(userPrompt);\n    const { fieldInfo: extractFieldInfo, dataTable: extractDataTable } = this.text2DataTableSchedule.getContext(\n      AtomName.DATA_EXTRACT\n    );\n    return {\n      extractDataTable,\n      extractFieldInfo,\n      dataTable,\n      fieldInfo: newFieldInfo,\n      usage,\n      clusterResult,\n      error\n    } as any;\n  }\n\n  async text2Chart(\n    text: string,\n    userPrompt?: string,\n    options?: {\n      fieldInfo?: FieldInfo[];\n      chartTypeList?: ChartType[];\n      colorPalette?: string[];\n      animationDuration?: number;\n      enableDataQuery?: boolean;\n      theme?: ChartTheme | string;\n      basemapOption?: BasemapOption;\n    }\n  ) {\n    const { fieldInfo, enableDataQuery = false, ...chartOptions } = options || {};\n    this.text2ChartSchedule.setNewTask({\n      text,\n      fieldInfo: fieldInfo?.length ? fieldInfo : [],\n      command: userPrompt\n    });\n    const shouldRunList: Record<string, boolean> = {\n      [AtomName.CHART_COMMAND]: !userPrompt,\n      [AtomName.DATA_QUERY]: enableDataQuery\n    };\n    this.text2ChartSchedule.updateOptions({\n      base: {\n        showThoughts: this.options.showThoughts\n      },\n      chartGenerate: {\n        ...chartOptions\n      }\n    });\n    const {\n      chartAdvistorRes,\n      spec,\n      command,\n      cell,\n      vizSchema,\n      dataTable,\n      time,\n      fieldInfo: newFieldInfo,\n      usage,\n      error\n    } = await this.text2ChartSchedule.run(userPrompt, shouldRunList);\n    return {\n      spec,\n      command,\n      chartAdvistorRes,\n      cell,\n      vizSchema,\n      time,\n      dataTable,\n      fieldInfo: newFieldInfo,\n      usage,\n      error\n    };\n  }\n\n  /**\n   * @param userPrompt user's visualization intention (what aspect they want to show in the data)\n   * @param fieldInfo information about fields in the dataset. field name, type, etc. You can get fieldInfo using parseCSVData or parseCSVDataWithLLM\n   * @param dataset raw dataset used in the chart. It can be empty and will return a spec template in this case. User can call fillSpecTemplateWithData to fill data into spec template.\n   * @param colorPalette color palette of the chart\n   * @param animationDuration duration of chart animation.\n   * @param chartTypeList supported chart list. VMind will generate a chart among this list.\n   * @param basemapOption map chart's base map. Only use in map chart.\n   * @returns spec and time duration of the chart.\n   */\n  async generateChart(\n    userPrompt?: string, //user's intent of visualization, usually aspect in data that they want to visualize\n    fieldInfo?: FieldInfo[],\n    dataset?: DataTable,\n    options?: {\n      image?: string;\n      chartTypeList?: ChartType[];\n      colorPalette?: string[];\n      animationDuration?: number;\n      enableDataQuery?: boolean;\n      theme?: ChartTheme | string;\n      basemapOption?: BasemapOption;\n    }\n  ): Promise<ChartGeneratorCtx> {\n    const { enableDataQuery = false, image } = options || {};\n    this.data2ChartSchedule.updateOptions({\n      base: {\n        showThoughts: this.options.showThoughts\n      },\n      chartGenerate: {\n        ...options\n      }\n    });\n    const userCommand = image ? '' : userPrompt || '';\n    this.data2ChartSchedule.setNewTask({\n      fieldInfo,\n      dataTable: dataset,\n      command: userCommand,\n      image\n    });\n    const shouldRunList: Record<string, boolean> = {\n      [AtomName.DATA_QUERY]: enableDataQuery && !image,\n      [AtomName.CHART_COMMAND]: !userCommand && !image,\n      [AtomName.IMAGE_READER]: !!image\n    };\n    const { chartType, chartAdvistorRes, spec, command, cell, vizSchema, dataTable, time, usage, error } =\n      await this.data2ChartSchedule.run(undefined, shouldRunList);\n    return {\n      chartType,\n      spec,\n      command,\n      chartAdvistorRes,\n      cell,\n      vizSchema,\n      dataTable,\n      time,\n      usage,\n      error\n    };\n  }\n\n  async getInsights(spec: any, options?: DataInsightOptions) {\n    this.dataInsightSchedule.setNewTask({\n      spec\n    });\n    this.dataInsightSchedule.updateOptions({\n      base: {\n        showThoughts: this.options.showThoughts\n      },\n      dataInsight: options || {}\n    });\n    const shouldRunList: Record<string, boolean> = {\n      [AtomName.DATA_INSIGHT]: true,\n      [AtomName.SPEC_INSIGHT]: !!options?.enableInsightAnnotation\n    };\n    const { insights, usage, error, newSpec } = await this.dataInsightSchedule.run(undefined, shouldRunList);\n    return { insights, usage, error, newSpec };\n  }\n\n  /**\n   * Update spec by insights fetched by vmind (support markpoint and markLine)\n   * @param spec chart spec\n   * @param insights vmind insights\n   * @returns newSpec of chart\n   */\n  async updateSpecByInsights(spec: any, insights: Insight[], options?: { chartType?: ChartType }) {\n    const { chartType } = options || {};\n    const shouldRunList: Record<string, boolean> = {\n      [AtomName.DATA_INSIGHT]: false,\n      [AtomName.SPEC_INSIGHT]: true\n    };\n    this.dataInsightSchedule.setNewTask({\n      spec,\n      insights,\n      chartType\n    });\n    const { error, newSpec } = await this.dataInsightSchedule.run(undefined, shouldRunList);\n    return { error, newSpec };\n  }\n\n  /**\n   * user can generate a spec template without dataset in generateChart\n   * fill the spec template with dataset.\n   * @param spec\n   * @param dataset\n   * @returns\n   */\n  fillSpecWithData(spec: any, dataset: DataTable, cell?: any) {\n    return fillSpecTemplateWithData(spec, dataset, cell);\n  }\n\n  async exportVideo(spec: any, time: TimeType, outerPackages: OuterPackages, mode?: 'node' | 'desktop-browser') {\n    const { VChart, FFmpeg, fetchFile, ManualTicker } = outerPackages;\n    const outName = `out`;\n    await _chatToVideoWasm(this._FPS, spec, time, outName, outerPackages, mode);\n    const data = FFmpeg.FS('readFile', `${outName}.mp4`);\n    return data.buffer;\n  }\n\n  async exportGIF(spec: any, time: TimeType, outerPackages: OuterPackages, mode?: 'node' | 'desktop-browser') {\n    const { VChart, FFmpeg, fetchFile } = outerPackages;\n    const outName = `out`;\n    await _chatToVideoWasm(this._FPS, spec, time, outName, outerPackages, mode);\n    // 调色板\n    await FFmpeg.run('-i', `${outName}.mp4`, '-filter_complex', '[0:v] palettegen', 'palette.png');\n    await FFmpeg.run(\n      '-i',\n      `${outName}.mp4`,\n      '-i',\n      'palette.png',\n      '-filter_complex',\n      '[0:v][1:v] paletteuse',\n      'out.gif'\n    );\n    const data = FFmpeg.FS('readFile', 'out.gif');\n    return data.buffer;\n  }\n}\n\nexport default VMind;\n"]}