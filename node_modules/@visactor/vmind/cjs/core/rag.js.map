{"version":3,"sources":["../src/core/rag.ts"],"names":[],"mappings":"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","file":"rag.js","sourcesContent":["import { merge } from '@visactor/vutils';\nimport axios from 'axios';\nimport type { IRAGOptions, RecallOptions, RawEmbeddingOptions, RawRecallOptions, RecallResult } from '../types/rag';\n\n/** RAG Manager Class */\nexport class RAGManage {\n  options: IRAGOptions;\n\n  constructor(options: IRAGOptions) {\n    this.options = merge({}, this.getDefaultOptions(), options);\n  }\n\n  getDefaultOptions(): IRAGOptions {\n    return {\n      url: '',\n      headers: { 'Content-Type': 'application/json' },\n      method: 'POST',\n      vikingdbName: ''\n    };\n  }\n\n  updateOptions(options: IRAGOptions) {\n    this.options = merge({}, this.options, options);\n  }\n\n  async recall(options: RecallOptions): Promise<{ error?: string; result?: RecallResult[] }> {\n    const { url, headers, vikingdbName, method } = this.options;\n    const {\n      indexName,\n      subIndex = 'default',\n      topK,\n      dslQuery,\n      isRandomRecall,\n      vector,\n      missAsEmpty,\n      sparseVector,\n      sparseLogitAlpha\n    } = options;\n    try {\n      const res = await axios(url + 'recall', {\n        method,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        headers: headers as any,\n        data: {\n          vikingdb_name: vikingdbName,\n          index_name: indexName,\n          sub_index: subIndex,\n          topk: topK,\n          dsl_query: JSON.stringify(dslQuery),\n          is_random_recall: isRandomRecall,\n          vector,\n          sparse_vector: (sparseVector ?? [])\n            .map(item => {\n              // 使用正则表达式解析字符串\n              const match = item.match(/\\(\"(.+?)\", ([\\d.]+)\\)/);\n              if (match) {\n                return [match[1], parseFloat(match[2])];\n              }\n              const oldMatch = item.match(/\\('(.+)', ([\\d.]+)\\)/);\n              if (oldMatch) {\n                return [oldMatch[1], parseFloat(oldMatch[2])];\n              }\n\n              return null;\n            })\n            .filter(item => item !== null),\n          sparse_logit_alpha: sparseLogitAlpha,\n          miss_as_empty: missAsEmpty\n        }\n      }).then(response => response.data);\n\n      if (res.error) {\n        console.error(res.error);\n        return {\n          error: res.error\n        };\n      }\n      return res;\n    } catch (err: any) {\n      console.error(err);\n      return {\n        error: err\n      };\n    }\n  }\n\n  async rawEmbedding(options: RawEmbeddingOptions) {\n    const { url, headers, method, vikingdbName } = this.options;\n    const { rawDatas } = options;\n    try {\n      const res = await axios(url + 'raw_embedding', {\n        method,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        headers: headers as any,\n        data: {\n          vikingdb_prefix: vikingdbName,\n          raw_datas: rawDatas\n        }\n      }).then(response => response.data);\n\n      if (res.error) {\n        console.error(res.error);\n        return {\n          error: res.error\n        };\n      }\n      return {\n        vector: res?.embeddings,\n        sparseVector: res?.sparse_embeddings\n      };\n    } catch (err: any) {\n      console.error(err);\n      return {\n        error: err\n      };\n    }\n  }\n\n  async rawRecall(options: RawRecallOptions) {\n    const result = await this.rawEmbedding({\n      ...options,\n      rawDatas: [{ text: options.text }]\n    });\n    if (!result?.error) {\n      const { vector = [], sparseVector = [] } = result;\n      return await this.recall({\n        ...options,\n        vector: vector[0],\n        sparseVector: sparseVector[0]\n      });\n    }\n    return {\n      error: result.error,\n      result: [] as RecallResult[]\n    };\n  }\n}\n"]}