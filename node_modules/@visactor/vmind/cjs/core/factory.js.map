{"version":3,"sources":["../src/core/factory.ts"],"names":[],"mappings":";;;AACA,uCAAwC;AAExC,MAAa,OAAO;IAGlB,MAAM,CAAC,YAAY,CAAC,IAAY,EAAE,GAAkC;QAClE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,IAAY;QACzB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,IAAY,EAAE,OAA6B,EAAE,OAA6B;QAC1F,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE/B,IAAI,GAAG,EAAE;YACP,OAAO,IAAI,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SAClC;QAED,OAAO,IAAI,eAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;;AAnBH,0BAoBC;AAnBgB,aAAK,GAAwB,EAAE,CAAC","file":"factory.js","sourcesContent":["import type { BaseAtomConstructor, BaseContext, BaseOptions } from '../types/atom';\nimport { BaseAtom } from '../atom/base';\n\nexport class Factory {\n  private static atoms: Record<string, any> = {};\n\n  static registerAtom(name: string, Ctr: BaseAtomConstructor<any, any>) {\n    this.atoms[name] = Ctr;\n  }\n\n  static getAtom(name: string) {\n    return this.atoms[name];\n  }\n\n  static createAtom(name: string, context: Partial<BaseContext>, options: Partial<BaseOptions>) {\n    const Ctr = this.getAtom(name);\n\n    if (Ctr) {\n      return new Ctr(context, options);\n    }\n\n    return new BaseAtom(context, options);\n  }\n}\n"]}