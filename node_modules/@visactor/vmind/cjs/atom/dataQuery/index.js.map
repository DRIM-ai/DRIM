{"version":3,"sources":["../src/atom/dataQuery/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import type { DataQueryCtx, DataQueryOptions, BaseOptions } from '../../types';\nimport { AtomName } from '../../types/atom';\nimport { BaseAtom } from '../base';\nimport { merge, pick } from '@visactor/vutils';\nimport type { LLMMessage, LLMResponse } from '../../types/llm';\nimport { getQueryDatasetPrompt } from './prompt';\nimport { parseSQLResponse } from './utils';\nimport type { ExecuteQueryCtx } from './executeQuery';\nimport { executeDataQuery, getFinalQueryResult, patchSQLBeforeQuery, restoreDatasetAfterQuery } from './executeQuery';\nimport { getFieldInfoFromDataset } from '../../utils/field';\nimport { Factory } from '../../core/factory';\nimport type { BaseAtomConstructor } from '../../types';\n\nexport class DataQueryAtom extends BaseAtom<DataQueryCtx, DataQueryOptions> {\n  name = AtomName.DATA_QUERY;\n\n  isLLMAtom = true;\n\n  constructor(context: DataQueryCtx, option: BaseOptions) {\n    super(context, option);\n  }\n\n  buildDefaultContext(context: DataQueryCtx): DataQueryCtx {\n    return merge(\n      {},\n      {\n        dataTable: [],\n        fieldInfo: [],\n        llmFieldInfo: [],\n        command: '',\n        dataTableSummary: ''\n      },\n      context\n    );\n  }\n\n  buildDefaultOptions(): DataQueryOptions {\n    return {\n      ...super.buildDefaultOptions(),\n      useSQL: true\n    };\n  }\n\n  getLLMMessages(query?: string): LLMMessage[] {\n    const { fieldInfo, command } = this.context;\n    const { showThoughts } = this.options;\n    const addtionContent = this.getHistoryLLMMessages(query);\n    if (this.options.useSQL) {\n      const fieldInfoContent = fieldInfo.map(info => pick(info, ['fieldName', 'type', 'role']));\n      return [\n        {\n          role: 'system',\n          content: getQueryDatasetPrompt(showThoughts)\n        },\n        {\n          role: 'user',\n          content: `User's Command: ${command}\\nColumn Information: ${JSON.stringify(fieldInfoContent)}`\n        },\n        ...addtionContent\n      ];\n    }\n    /** @todo */\n    return [];\n  }\n\n  parseLLMContent(resJson: any, toolJson: any, llmRes: LLMResponse) {\n    const { sql, fieldInfo: responseFiledInfo, thoughts = '' } = resJson;\n    if ((!sql || !responseFiledInfo) && llmRes?.choices?.[0]) {\n      //try to parse the response with another format\n      const content = llmRes.choices[0].message.content;\n      return {\n        ...this.context,\n        ...parseSQLResponse(content)\n      };\n    }\n    return { ...this.context, sql, llmFieldInfo: responseFiledInfo, thoughts };\n  }\n\n  protected runBeforeLLM(): DataQueryCtx {\n    const { fieldInfo = [], dataTable } = this.context;\n    if (!fieldInfo.length && dataTable.length) {\n      this.context.fieldInfo = getFieldInfoFromDataset(dataTable);\n    }\n    return this.context;\n  }\n\n  protected _runWithOutLLM(): DataQueryCtx {\n    // get dataset and fieldInfo after query\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let newContext: ExecuteQueryCtx = { ...this.context } as any;\n    [patchSQLBeforeQuery, executeDataQuery, restoreDatasetAfterQuery, getFinalQueryResult].forEach(func => {\n      newContext = {\n        ...newContext,\n        ...func(newContext)\n      };\n    });\n    this.setNewContext({ ...this.context, dataTable: newContext.dataTable, fieldInfo: newContext.fieldInfo });\n    return this.context;\n  }\n}\n\nexport const registerDataQueryAtom = () => {\n  Factory.registerAtom(\n    AtomName.DATA_QUERY,\n    DataQueryAtom as unknown as BaseAtomConstructor<DataQueryCtx, DataQueryOptions>\n  );\n};\n"]}