{"version":3,"sources":["../src/atom/chartGenerator/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import { isArray } from '@visactor/vutils';\nimport type { DataTypeName } from '@visactor/chart-advisor';\nimport { ChartType } from '@visactor/chart-advisor';\nimport type { Cell, FieldInfo } from '../../types';\nimport { ChartType as VMindChartType } from '../../types';\nimport type { ChartGeneratorCtx } from '../../types';\nimport { DEFAULT_VIDEO_LENGTH, VIDEO_LENGTH_BY_CHART_TYPE } from './spec/constants';\n\nexport { getVChartTypeByVmind } from './spec/chartTypeUtils';\n\n/**\n * Generate a vizSchema from fieldInfo\n * @param fieldInfo SimpleFieldInfo[] - An array of field information, each element contains the field name, description, type, and role, etc.\n * @returns Partial<VizSchema> - Returns a partial VizSchema object, containing the transformed field information.\n */\nexport const getVizSchema = (context: ChartGeneratorCtx) => {\n  const { fieldInfo } = context;\n  return {\n    fields:\n      fieldInfo &&\n      fieldInfo.map(d => ({\n        id: d.fieldName,\n        alias: d.fieldName,\n        description: d.description,\n        visible: true,\n        type: d.type,\n        role: d.role,\n        location: d.role\n      }))\n  };\n};\n\nexport const typeMap = (type: string): DataTypeName => {\n  if (['string'].includes(type)) {\n    return 'string';\n  } else if (['date', 'datetime', 'time'].includes(type)) {\n    return 'date';\n  } else if (['int', 'float'].includes(type)) {\n    return 'number';\n  }\n  return 'string';\n};\n\nexport const VMindChartTypeMap: Record<string, ChartType[]> = {\n  [VMindChartType.BarChart]: [\n    ChartType.COLUMN,\n    ChartType.COLUMN_PERCENT,\n    ChartType.COLUMN_PARALLEL,\n    ChartType.BAR,\n    ChartType.BAR_PERCENT,\n    ChartType.BAR_PARALLEL\n  ],\n  [VMindChartType.LineChart]: [ChartType.LINE, ChartType.AREA, ChartType.AREA_PERCENT],\n  [VMindChartType.AreaChart]: [ChartType.AREA, ChartType.AREA_PERCENT],\n  [VMindChartType.PieChart]: [ChartType.PIE, ChartType.ANNULAR],\n  [VMindChartType.RoseChart]: [ChartType.ROSE],\n  [VMindChartType.ScatterPlot]: [ChartType.SCATTER],\n  [VMindChartType.DualAxisChart]: [ChartType.DUAL_AXIS],\n  [VMindChartType.WordCloud]: [ChartType.WORD_CLOUD],\n  [VMindChartType.FunnelChart]: [ChartType.FUNNEL],\n  [VMindChartType.SankeyChart]: [ChartType.SANKEY],\n  [VMindChartType.RadarChart]: [ChartType.RADAR]\n};\n\nexport const chartTypeMap = (advisorChartType: ChartType) => {\n  if (\n    [\n      ChartType.COLUMN,\n      ChartType.COLUMN_PERCENT,\n      ChartType.COLUMN_PARALLEL,\n      ChartType.BAR,\n      ChartType.BAR_PERCENT,\n      ChartType.BAR_PARALLEL\n    ].includes(advisorChartType)\n  ) {\n    return 'Bar Chart';\n  } else if ([ChartType.LINE, ChartType.AREA, ChartType.AREA_PERCENT].includes(advisorChartType)) {\n    return 'Line Chart';\n  } else if ([ChartType.PIE, ChartType.ANNULAR].includes(advisorChartType)) {\n    return 'Pie Chart';\n  } else if (ChartType.ROSE === advisorChartType) {\n    return 'Rose Chart';\n  } else if (ChartType.SCATTER === advisorChartType) {\n    return 'Scatter Plot';\n  } else if (ChartType.DUAL_AXIS === advisorChartType) {\n    return 'Dual Axis Chart';\n  } else if (ChartType.WORD_CLOUD === advisorChartType) {\n    return 'Word Cloud';\n  } else if (ChartType.FUNNEL === advisorChartType) {\n    return 'Funnel Chart';\n  } else if (ChartType.SANKEY === advisorChartType) {\n    return 'Sankey Chart';\n  } else if (ChartType.RADAR === advisorChartType) {\n    return 'Radar Chart';\n  }\n  throw 'no matched chart type ' + advisorChartType;\n};\n\nexport const getCell = (cell: any): Cell => {\n  const keys = Object.keys(cell);\n  const result: any = {};\n  keys.forEach(key => {\n    const channel = cell[key];\n    if (Array.isArray(channel) && channel.length === 1) {\n      result[key] = String(channel[0]);\n    } else {\n      result[key] = Array.isArray(channel) ? channel.map(c => String(c)) : channel;\n    }\n  });\n  return result;\n};\n\nconst checkChannel = (cell: any, channel: string, count = 1) => {\n  if (count === 1 && typeof cell[channel] === 'string') {\n    // channel exist and is a string\n    return true;\n  }\n  if (Array.isArray(cell[channel]) && cell[channel].length >= count) {\n    // channel is a array\n    return true;\n  }\n  console.error(`cell mismatch channel '${channel}'`);\n  return false;\n};\n\nexport const checkChartTypeAndCell = (chartType: string, cell: any, fieldInfo: FieldInfo[]): boolean => {\n  const fieldList = fieldInfo.map(f => f.fieldName);\n  const cellFields: (string | string[])[] = Object.values(cell);\n  cellFields.forEach((cellField: string | string[]) => {\n    if (!cellField) {\n      return;\n    }\n    if (isArray(cellField)) {\n      if (!cellField.every(f => f && fieldList.includes(f))) {\n        console.warn(`missing field ${cellField}`);\n        //throw `missing field ${cellField}`;\n      }\n    } else {\n      if (cellField && !fieldList.includes(cellField)) {\n        console.warn(`missing field ${cellField}`);\n        //throw `missing field ${cellField}`;\n      }\n    }\n  });\n  let checkChannelResult = true;\n  switch (chartType) {\n    case 'BAR CHART':\n    case 'LINE CHART':\n      checkChannelResult = checkChannel(cell, 'x') && checkChannel(cell, 'y');\n      break;\n    case 'DUAL AXIS CHART':\n      checkChannelResult = checkChannel(cell, 'x') && checkChannel(cell, 'y', 2);\n      break;\n    default:\n      //console.warn('Unchecked Chart Type', chartType);\n      break;\n  }\n  return checkChannelResult;\n};\n\nexport const estimateVideoTime = (chartType: string, spec: any, parsedTime?: number) => {\n  //估算视频长度\n  if (chartType === 'DYNAMIC BAR CHART') {\n    const frameNumber = spec.player.specs.length;\n    const duration = spec.player.interval;\n    return {\n      totalTime: parsedTime ?? frameNumber * duration,\n      frameArr: parsedTime\n        ? Array.from(new Array(frameNumber).keys()).map(n => Number(parsedTime / frameNumber))\n        : Array.from(new Array(frameNumber).keys()).map(n => duration)\n    };\n  }\n\n  // chartType不是真实的图表类型，转一次\n  const map: Record<string, string> = {\n    'PIE CHART': 'pie',\n    'WORD CLOUD': 'wordCloud'\n  };\n  return {\n    totalTime: parsedTime ?? VIDEO_LENGTH_BY_CHART_TYPE[map[chartType]] ?? DEFAULT_VIDEO_LENGTH,\n    frameArr: []\n  };\n};\n"]}