import type { FieldInfo } from '../../types';
import { ChartType } from '../../types';
import type { GenerateChartCellContext } from './type';
export declare const getContextAfterRevised: (context: GenerateChartCellContext) => {
    colors?: string[];
    chartTheme?: string | import("@visactor/vchart/esm/theme/interface").ITheme;
    chartTypeList: ChartType[];
    basemapOption?: import("../../types").BasemapOption;
    totalTime?: number;
    stackOrPercent?: "stack" | "percent";
    transpose?: boolean;
    fieldInfo?: FieldInfo[];
    dataTable: import("../../types").DataTable;
    command: string;
    chartType?: ChartType;
    cell: import("../../types").Cell;
    vizSchema?: import("../../types").VizSchema;
    spec: any;
    chartAdvistorRes?: {
        chartType: ChartType;
        spec: any;
        score: number;
    }[];
    simpleVChartSpec?: import("../imageReader/interface").SimpleVChartSpec;
    time?: {
        totalTime: number;
        frameArr: any[];
    };
    logId?: string;
    id?: string;
    query?: string;
    response?: string;
    error?: string;
    usage?: import("../../types").Usage;
    thoughts?: string;
    toolRes?: any;
};
export declare const patchChartType: (context: GenerateChartCellContext) => {
    error: string;
    chartType?: undefined;
} | {
    chartType: ChartType;
    error?: undefined;
};
export declare const patchTransposeField: (context: GenerateChartCellContext) => GenerateChartCellContext;
export declare const patchAxisField: (context: GenerateChartCellContext) => {
    cell: any;
};
export declare const patchColorField: (context: GenerateChartCellContext) => {
    cell: {
        color: string | string[];
        x?: string | string[];
        y?: string | string[];
        size?: string;
        angle?: string;
        radius?: string;
        time?: string;
        source?: string;
        target?: string;
        value?: string;
        category?: string;
        isTransposed?: boolean;
    };
};
export declare const patchLabelField: (context: GenerateChartCellContext) => {
    cell: any;
};
export declare const patchYField: (context: GenerateChartCellContext) => {
    colors?: string[];
    chartTheme?: string | import("@visactor/vchart/esm/theme/interface").ITheme;
    chartTypeList: ChartType[];
    basemapOption?: import("../../types").BasemapOption;
    totalTime?: number;
    stackOrPercent?: "stack" | "percent";
    transpose?: boolean;
    fieldInfo?: FieldInfo[];
    dataTable: import("../../types").DataTable;
    command: string;
    chartType?: ChartType;
    cell: import("../../types").Cell;
    vizSchema?: import("../../types").VizSchema;
    spec: any;
    chartAdvistorRes?: {
        chartType: ChartType;
        spec: any;
        score: number;
    }[];
    simpleVChartSpec?: import("../imageReader/interface").SimpleVChartSpec;
    time?: {
        totalTime: number;
        frameArr: any[];
    };
    logId?: string;
    id?: string;
    query?: string;
    response?: string;
    error?: string;
    usage?: import("../../types").Usage;
    thoughts?: string;
    toolRes?: any;
} | {
    chartType: string;
    colors?: string[];
    chartTheme?: string | import("@visactor/vchart/esm/theme/interface").ITheme;
    chartTypeList: ChartType[];
    basemapOption?: import("../../types").BasemapOption;
    totalTime?: number;
    stackOrPercent?: "stack" | "percent";
    transpose?: boolean;
    fieldInfo?: FieldInfo[];
    dataTable: import("../../types").DataTable;
    command: string;
    cell: import("../../types").Cell;
    vizSchema?: import("../../types").VizSchema;
    spec: any;
    chartAdvistorRes?: {
        chartType: ChartType;
        spec: any;
        score: number;
    }[];
    simpleVChartSpec?: import("../imageReader/interface").SimpleVChartSpec;
    time?: {
        totalTime: number;
        frameArr: any[];
    };
    logId?: string;
    id?: string;
    query?: string;
    response?: string;
    error?: string;
    usage?: import("../../types").Usage;
    thoughts?: string;
    toolRes?: any;
} | {
    chartType: ChartType;
    cell: {
        x?: string | string[];
        y?: string | string[];
        color?: string | string[];
        size?: string;
        angle?: string;
        radius?: string;
        time?: string;
        source?: string;
        target?: string;
        value?: string;
        category?: string;
        isTransposed?: boolean;
    };
    dataTable: import("../../types").DataTable;
};
export declare const patchBoxPlot: (context: GenerateChartCellContext) => {
    cell: {
        x?: string | string[];
        y?: string | string[];
        color?: string | string[];
        size?: string;
        angle?: string;
        radius?: string;
        time?: string;
        source?: string;
        target?: string;
        value?: string;
        category?: string;
        isTransposed?: boolean;
    };
};
export declare const patchDualAxis: (context: GenerateChartCellContext) => {
    cell: any;
};
export declare const patchPieChart: (context: GenerateChartCellContext) => {
    chartType: string;
    cell: {
        x: string;
        y: any;
    };
} | {
    cell: {
        x?: string | string[];
        y?: string | string[];
        color?: string | string[];
        size?: string;
        angle?: string;
        radius?: string;
        time?: string;
        source?: string;
        target?: string;
        value?: string;
        category?: string;
        isTransposed?: boolean;
    };
    chartType?: undefined;
};
export declare const patchWordCloud: (context: GenerateChartCellContext) => {
    cell: {
        x?: string | string[];
        y?: string | string[];
        color?: string | string[];
        size?: string;
        angle?: string;
        radius?: string;
        time?: string;
        source?: string;
        target?: string;
        value?: string;
        category?: string;
        isTransposed?: boolean;
    };
};
export declare const patchDynamicBarChart: (context: GenerateChartCellContext) => {
    cell: {
        x?: string | string[];
        y?: string | string[];
        color?: string | string[];
        size?: string;
        angle?: string;
        radius?: string;
        time?: string;
        source?: string;
        target?: string;
        value?: string;
        category?: string;
        isTransposed?: boolean;
    };
    chartType: ChartType;
};
export declare const patchCartesianXField: (context: GenerateChartCellContext) => {
    cell: {
        x?: string | string[];
        y?: string | string[];
        color?: string | string[];
        size?: string;
        angle?: string;
        radius?: string;
        time?: string;
        source?: string;
        target?: string;
        value?: string;
        category?: string;
        isTransposed?: boolean;
    };
};
export declare const patchNeedColor: (context: GenerateChartCellContext) => {
    cell: any;
};
export declare const patchNeedSize: (context: GenerateChartCellContext) => {
    cell: {
        x?: string | string[];
        y?: string | string[];
        color?: string | string[];
        size?: string;
        angle?: string;
        radius?: string;
        time?: string;
        source?: string;
        target?: string;
        value?: string;
        category?: string;
        isTransposed?: boolean;
    };
};
export declare const patchRangeColumnChart: (context: GenerateChartCellContext) => {
    cell: {
        x?: string | string[];
        y?: string | string[];
        color?: string | string[];
        size?: string;
        angle?: string;
        radius?: string;
        time?: string;
        source?: string;
        target?: string;
        value?: string;
        category?: string;
        isTransposed?: boolean;
    };
    error?: undefined;
} | {
    error: string;
    cell?: undefined;
};
export declare const patchLinearProgressChart: (context: GenerateChartCellContext) => {
    cell: {
        x?: string | string[];
        y?: string | string[];
        color?: string | string[];
        size?: string;
        angle?: string;
        radius?: string;
        time?: string;
        source?: string;
        target?: string;
        value?: string;
        category?: string;
        isTransposed?: boolean;
    };
};
export declare const patchBasicHeatMapChart: (context: GenerateChartCellContext) => {
    cell: any;
};
