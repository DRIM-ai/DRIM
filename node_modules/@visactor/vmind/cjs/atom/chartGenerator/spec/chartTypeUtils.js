"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.llmChartTypeMap = exports.formatTypeToVMind = exports.getVChartTypeByVmind = void 0;

const types_1 = require("../../../types"), chartTypeMap = {
    [types_1.ChartType.BarChart.toUpperCase()]: "bar",
    [types_1.ChartType.LineChart.toUpperCase()]: "line",
    [types_1.ChartType.AreaChart.toUpperCase()]: "area",
    [types_1.ChartType.PieChart.toUpperCase()]: "pie",
    [types_1.ChartType.WordCloud.toUpperCase()]: "wordCloud",
    [types_1.ChartType.ScatterPlot.toUpperCase()]: "scatter",
    [types_1.ChartType.DynamicBarChart.toUpperCase()]: "bar",
    [types_1.ChartType.FunnelChart.toUpperCase()]: "funnel",
    [types_1.ChartType.DualAxisChart.toUpperCase()]: "common",
    [types_1.ChartType.RoseChart.toUpperCase()]: "rose",
    [types_1.ChartType.RadarChart.toUpperCase()]: "radar",
    [types_1.ChartType.SankeyChart.toUpperCase()]: "sankey",
    [types_1.ChartType.WaterFallChart.toUpperCase()]: "waterfall",
    [types_1.ChartType.BoxPlot.toUpperCase()]: "boxPlot",
    [types_1.ChartType.LiquidChart.toUpperCase()]: "liquid",
    [types_1.ChartType.LinearProgress.toUpperCase()]: "linearProgress",
    [types_1.ChartType.CircularProgress.toUpperCase()]: "circularProgress",
    [types_1.ChartType.BubbleCirclePacking.toUpperCase()]: "circlePacking",
    [types_1.ChartType.MapChart.toUpperCase()]: "map",
    [types_1.ChartType.RangeColumnChart.toUpperCase()]: "rangeColumn",
    [types_1.ChartType.SunburstChart.toUpperCase()]: "sunburst",
    [types_1.ChartType.TreemapChart.toUpperCase()]: "treemap",
    [types_1.ChartType.Gauge.toUpperCase()]: "gauge",
    [types_1.ChartType.BasicHeatMap.toUpperCase()]: "common",
    [types_1.ChartType.VennChart.toUpperCase()]: "venn"
}, getVChartTypeByVmind = type => chartTypeMap[type] ? chartTypeMap[type] : null;

exports.getVChartTypeByVmind = getVChartTypeByVmind;

const formatTypeToVMind = type => {
    var _a;
    return null !== (_a = Object.values(types_1.ChartType).find((vmindType => chartTypeMap[vmindType.toUpperCase()] === type))) && void 0 !== _a ? _a : type;
};

exports.formatTypeToVMind = formatTypeToVMind, exports.llmChartTypeMap = Object.keys(types_1.ChartType).reduce(((prev, cur) => {
    const value = types_1.ChartType[cur];
    return prev[value.toUpperCase()] = value, prev;
}), {});
//# sourceMappingURL=chartTypeUtils.js.map
