{"version":3,"sources":["../src/atom/chartGenerator/spec/transformers/sankey.ts"],"names":[],"mappings":";;;AAAA,2DAA+D;AAE/D,qCAA2E;AAEpE,MAAM,UAAU,GAAG,CAAC,OAAiC,EAAE,EAAE;IAC9D,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAC1C,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;IAChC,MAAM,QAAQ,GAAG,IAAA,4BAAgB,EAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC;IAC9D,MAAM,KAAK,GAAG;QACZ,GAAG,IAAI,GAAG,CAAC;YACT,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,MAAgB,CAAC,CAAC;YACtD,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,MAAgB,CAAC,CAAC;SACvD,CAAC;KACH,CAAC;IACF,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAErD,IAAI,CAAC,IAAI,GAAG;QACV,EAAE,EAAE,MAAM;QACV,MAAM,EAAE;YACN;gBACE,KAAK,EAAE,QAAQ;gBACf,KAAK,EAAE,QAAQ;aAChB;SACF;KACF,CAAC;IAEF,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAvBW,QAAA,UAAU,cAuBrB;AAEK,MAAM,WAAW,GAAG,CAAC,OAAiC,EAAE,EAAE;IAC/D,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;IAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;IAC/B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC;IAC7B,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;IAC5B,IAAI,CAAC,OAAO,GAAG,CAAC,KAAU,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;IAE1C,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AATW,QAAA,WAAW,eAStB;AAEK,MAAM,UAAU,GAAG,CAAC,OAAiC,EAAE,EAAE;IAC9D,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAEzB,IAAI,CAAC,IAAI,GAAG;QACV,KAAK,EAAE,EAEN;QACD,KAAK,EAAE;YACL,KAAK,EAAE,EAEN;YACD,IAAI,EAAE,EAEL;SACF;KACF,CAAC;IACF,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAjBW,QAAA,UAAU,cAiBrB;AAEK,MAAM,WAAW,GAAG,CAAC,OAAiC,EAAE,EAAE;IAC/D,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAEzB,IAAI,CAAC,KAAK,GAAG;QACX,OAAO,EAAE,IAAI;QACb,KAAK,EAAE,EAGN;KACF,CAAC;IACF,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAXW,QAAA,WAAW,eAWtB;AAEW,QAAA,cAAc,GAAG,CAAC,kBAAU,EAAE,cAAK,EAAE,mBAAW,EAAE,kBAAU,EAAE,mBAAW,EAAE,uBAAc,CAAC,CAAC","file":"sankey.js","sourcesContent":["import { isValidDataTable } from '../../../../utils/dataTable';\nimport type { GenerateChartCellContext } from '../../type';\nimport { color, discreteLegend, revisedVChartType, theme } from './common';\n\nexport const sankeyData = (context: GenerateChartCellContext) => {\n  const { dataTable, cell, spec } = context;\n  const { source, target } = cell;\n  const linkData = isValidDataTable(dataTable) ? dataTable : [];\n  const nodes = [\n    ...new Set([\n      ...linkData.map((item: any) => item[source as string]),\n      ...linkData.map((item: any) => item[target as string])\n    ])\n  ];\n  const nodeData = nodes.map(node => ({ name: node }));\n\n  spec.data = {\n    id: 'data',\n    values: [\n      {\n        nodes: nodeData,\n        links: linkData\n      }\n    ]\n  };\n\n  return { spec };\n};\n\nexport const sankeyField = (context: GenerateChartCellContext) => {\n  const { cell, spec } = context;\n  spec.sourceField = cell.source;\n  spec.targetField = cell.target;\n  spec.valueField = cell.value;\n  spec.categoryField = 'name';\n  spec.nodeKey = (datum: any) => datum.name;\n\n  return { spec };\n};\n\nexport const sankeyLink = (context: GenerateChartCellContext) => {\n  const { spec } = context;\n\n  spec.link = {\n    style: {\n      //fillOpacity: 0.1\n    },\n    state: {\n      hover: {\n        //fillOpacity: 0.4\n      },\n      blur: {\n        //fill: '#e8e8e8'\n      }\n    }\n  };\n  return { spec };\n};\n\nexport const sankeyLabel = (context: GenerateChartCellContext) => {\n  const { spec } = context;\n\n  spec.label = {\n    visible: true,\n    style: {\n      //fontSize: 12\n      //fill: '#000000'\n    }\n  };\n  return { spec };\n};\n\nexport const pipelineSankey = [sankeyData, color, sankeyField, sankeyLink, sankeyLabel, discreteLegend];\n"]}