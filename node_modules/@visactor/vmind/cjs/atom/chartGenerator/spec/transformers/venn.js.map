{"version":3,"sources":["../src/atom/chartGenerator/spec/transformers/venn.ts"],"names":[],"mappings":";;;AAAA,6CAAqD;AACrD,qCAA2E;AAIpE,MAAM,QAAQ,GAAG,CAAC,OAAiC,EAAE,EAAE;IAC5D,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAC1C,MAAM,UAAU,GAMZ,EAAE,CAAC;IACP,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAChC,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAChC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACvB,IAAI,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE;YAC/B,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;SACxD;aAAM;YACL,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;SACnF;IACH,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,IAAI,GAAG;QACV,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC;KAClC,CAAC;IAEF,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAvBW,QAAA,QAAQ,YAuBnB;AAEK,MAAM,SAAS,GAAG,CAAC,OAAiC,EAAE,EAAE;IAC7D,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IACzB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;IAC1B,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;IAC5B,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;IAC1B,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AANW,QAAA,SAAS,aAMpB;AAEK,MAAM,aAAa,GAAG,CAAC,OAAiC,EAAE,EAAE;IACjE,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IACzB,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE;QACxB,IAAA,0BAAiB,GAAE,CAAC;KACrB;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AANW,QAAA,aAAa,iBAMxB;AAEW,QAAA,YAAY,GAAG,CAAC,qBAAa,EAAE,gBAAQ,EAAE,cAAK,EAAE,iBAAS,EAAE,uBAAc,CAAC,CAAC","file":"venn.js","sourcesContent":["import { registerVennChart } from '@visactor/vchart';\nimport { color, discreteLegend, revisedVChartType, theme } from './common';\nimport type { GenerateChartCellContext } from '../../type';\nimport type { DataCell } from '../../../../types/base';\n\nexport const vennData = (context: GenerateChartCellContext) => {\n  const { dataTable, spec, cell } = context;\n  const id2dataMap: Record<\n    DataCell,\n    {\n      sets: DataCell[];\n      value: DataCell;\n    }\n  > = {};\n  const setsField = cell.color[0];\n  const nameField = cell.color[1];\n  dataTable.forEach(data => {\n    if (id2dataMap[data[setsField]]) {\n      id2dataMap[data[setsField]].sets.push(data[nameField]);\n    } else {\n      id2dataMap[data[setsField]] = { sets: [data[nameField]], value: data[cell.size] };\n    }\n  });\n  spec.data = {\n    values: Object.values(id2dataMap)\n  };\n\n  return { spec };\n};\n\nexport const vennField = (context: GenerateChartCellContext) => {\n  const { spec } = context;\n  spec.valueField = 'value';\n  spec.categoryField = 'sets';\n  spec.seriesField = 'sets';\n  return { spec };\n};\n\nexport const registerChart = (context: GenerateChartCellContext) => {\n  const { spec } = context;\n  if (spec.type === 'venn') {\n    registerVennChart();\n  }\n  return { spec };\n};\n\nexport const pipelineVenn = [registerChart, vennData, color, vennField, discreteLegend];\n"]}