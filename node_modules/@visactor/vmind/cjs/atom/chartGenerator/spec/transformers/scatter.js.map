{"version":3,"sources":["../src/atom/chartGenerator/spec/transformers/scatter.ts"],"names":[],"mappings":"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","file":"scatter.js","sourcesContent":["import { DataType } from '../../../../types/base';\nimport type { GenerateChartCellContext } from '../../type';\nimport { animationDuration, DEFAULT_VIDEO_LENGTH, oneByOneGroupSize } from '../constants';\nimport { color, data, discreteLegend, oneByOneDelayFunc, revisedVChartType, theme } from './common';\n\nexport const scatterField = (context: GenerateChartCellContext) => {\n  //assign field in spec according to cell\n  const { cell, spec } = context;\n  spec.xField = cell.x;\n  spec.yField = cell.y;\n  if (cell.color) {\n    spec.seriesField = cell.color;\n  }\n  if (cell.size) {\n    spec.sizeField = cell.size;\n    spec.size = {\n      type: 'linear'\n    };\n  }\n\n  return { spec };\n};\n\nexport const scatterAxis = (context: GenerateChartCellContext) => {\n  const { spec, fieldInfo } = context;\n\n  const xField = spec.xField;\n  const yField = spec.yField;\n  const xFieldInfo = fieldInfo.find(field => xField === field.fieldName);\n  const yFieldInfo = fieldInfo.find(field => yField === field.fieldName);\n  spec.axes = [\n    {\n      orient: 'bottom',\n      type: [DataType.DATE, DataType.STRING].includes(xFieldInfo?.type) ? 'band' : 'linear',\n      label: {\n        style: {\n          //fill: '#FFFFFF'\n        }\n      },\n      title: {\n        visible: false,\n        style: {\n          //fill: '#FFFFFF'\n        }\n      }\n    },\n    {\n      orient: 'left',\n      type: [DataType.DATE, DataType.STRING].includes(yFieldInfo?.type) ? 'band' : 'linear',\n      label: {\n        style: {\n          //fill: '#FFFFFF'\n        }\n      },\n      title: {\n        visible: false,\n        style: {\n          //fill: '#FFFFFF'\n        }\n      }\n    }\n  ];\n  return { spec };\n};\n\nexport const animationScatter = (context: GenerateChartCellContext) => {\n  const { spec } = context;\n\n  const totalTime = context.totalTime ?? DEFAULT_VIDEO_LENGTH;\n  const dataLength = spec.data.values.length;\n  const groupNum = Math.ceil(dataLength / oneByOneGroupSize);\n  const delay = totalTime / groupNum;\n  spec.animationAppear = {\n    duration: animationDuration,\n    delay: oneByOneDelayFunc(delay)\n  };\n  return { spec };\n};\n\nexport const pipelineScatterPlot = [\n  data,\n  color,\n  scatterField,\n  scatterAxis,\n  discreteLegend\n  //animationOneByOne,\n];\n"]}