{"version":3,"sources":["../src/atom/chartGenerator/spec/transformers/pie.ts"],"names":[],"mappings":";;;AACA,qCAA8F;AAEvF,MAAM,QAAQ,GAAG,CAAC,OAAiC,EAAE,EAAE;IAE5D,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAC/B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC;IAC3C,IAAI,IAAI,CAAC,KAAK,IAAK,IAAY,CAAC,QAAQ,EAAE;QACxC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,IAAK,IAAY,CAAC,QAAQ,CAAC;KAC3D;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AARW,QAAA,QAAQ,YAQnB;AAEW,QAAA,WAAW,GAAG;IACzB,aAAI;IACJ,cAAK;IACL,gBAAQ;IACR,uBAAc;IACd,oBAAW;CAEZ,CAAC","file":"pie.js","sourcesContent":["import type { GenerateChartCellContext } from '../../type';\nimport { color, commonLabel, data, discreteLegend, revisedVChartType, theme } from './common';\n\nexport const pieField = (context: GenerateChartCellContext) => {\n  //assign field in spec according to cell\n  const { cell, spec } = context;\n  spec.valueField = cell.angle || cell.value;\n  if (cell.color || (cell as any).category) {\n    spec.categoryField = cell.color || (cell as any).category;\n  }\n  return { spec };\n};\n\nexport const pipelinePie = [\n  data,\n  color,\n  pieField,\n  discreteLegend,\n  commonLabel\n  // animationCartesianPie,\n];\n"]}