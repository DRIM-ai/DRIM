{"version":3,"sources":["../src/atom/chartGenerator/spec/transformers/radar.ts"],"names":[],"mappings":";;;AACA,qCAAiF;AAE1E,MAAM,UAAU,GAAG,CAAC,OAAiC,EAAE,EAAE;;IAC9D,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAC/B,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;QACxB,IAAI,CAAC,aAAa,GAAG,MAAA,IAAI,CAAC,CAAC,mCAAI,IAAI,CAAC,KAAK,CAAC;KAC3C;IACD,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;QACxB,IAAI,CAAC,UAAU,GAAG,MAAA,IAAI,CAAC,CAAC,mCAAI,IAAI,CAAC,KAAK,CAAC;KACxC;IACD,IAAI,IAAI,CAAC,KAAK,EAAE;QACd,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC;KAC/B;IACD,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,WAAW,EAAE;QAC3C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC;QACtC,OAAO,IAAI,CAAC,WAAW,CAAC;KACzB;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAhBW,QAAA,UAAU,cAgBrB;AAEK,MAAM,gBAAgB,GAAG,CAAC,OAAiC,EAAE,EAAE;IACpE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;IACrC,IAAI,UAAU,EAAE;QACd,OAAO,EAAE,IAAI,EAAE,CAAC;KACjB;IACD,IAAI,CAAC,IAAI,GAAG;QACV,OAAO,EAAE,IAAI;KACd,CAAC;IACF,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AATW,QAAA,gBAAgB,oBAS3B;AAEK,MAAM,SAAS,GAAG,CAAC,OAAiC,EAAE,EAAE;IAC7D,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAEzB,IAAI,CAAC,IAAI,GAAG;QACV;YACE,MAAM,EAAE,QAAQ;YAChB,MAAM,EAAE,GAAG;YAEX,UAAU,EAAE;gBACV,OAAO,EAAE,KAAK;aACf;YACD,KAAK,EAAE;gBACL,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE,CAAC;gBACR,KAAK,EAAE,EAIN;aACF;YACD,IAAI,EAAE;gBACJ,MAAM,EAAE,KAAK;gBACb,KAAK,EAAE,EAEN;aACF;SACF;QACD;YACE,MAAM,EAAE,OAAO;YACf,MAAM,EAAE,EAAE;YACV,IAAI,EAAE;gBACJ,OAAO,EAAE,KAAK;aACf;YACD,UAAU,EAAE;gBACV,OAAO,EAAE,KAAK;aACf;YACD,KAAK,EAAE;gBACL,KAAK,EAAE,EAAE;aACV;YACD,IAAI,EAAE;gBACJ,KAAK,EAAE,EAEN;aACF;SACF;KACF,CAAC;IAEF,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAhDW,QAAA,SAAS,aAgDpB;AAEW,QAAA,aAAa,GAAG;IAC3B,aAAI;IACJ,cAAK;IACL,kBAAU;IACV,wBAAgB;IAChB,iBAAS;IACT,uBAAc;CAGf,CAAC","file":"radar.js","sourcesContent":["import type { GenerateChartCellContext } from '../../type';\nimport { color, data, discreteLegend, revisedVChartType, theme } from './common';\n\nexport const radarField = (context: GenerateChartCellContext) => {\n  const { cell, spec } = context;\n  if (cell.x || cell.angle) {\n    spec.categoryField = cell.x ?? cell.angle;\n  }\n  if (cell.y || cell.value) {\n    spec.valueField = cell.y ?? cell.value;\n  }\n  if (cell.color) {\n    spec.seriesField = cell.color;\n  }\n  if (!spec.categoryField && spec.seriesField) {\n    spec.categoryField = spec.seriesField;\n    delete spec.seriesField;\n  }\n  return { spec };\n};\n\nexport const radarDisplayConf = (context: GenerateChartCellContext) => {\n  const { spec, chartTheme } = context;\n  if (chartTheme) {\n    return { spec };\n  }\n  spec.area = {\n    visible: true // show area\n  };\n  return { spec };\n};\n\nexport const radarAxis = (context: GenerateChartCellContext) => {\n  const { spec } = context;\n\n  spec.axes = [\n    {\n      orient: 'radius', // radius axis\n      zIndex: 100,\n\n      domainLine: {\n        visible: false\n      },\n      label: {\n        visible: true,\n        space: 0,\n        style: {\n          //textAlign: 'center',\n          //stroke: '#fff',\n          //lineWidth: 4\n        }\n      },\n      grid: {\n        smooth: false,\n        style: {\n          //lineDash: [0]\n        }\n      }\n    },\n    {\n      orient: 'angle', // angle axis\n      zIndex: 50,\n      tick: {\n        visible: false\n      },\n      domainLine: {\n        visible: false\n      },\n      label: {\n        space: 20\n      },\n      grid: {\n        style: {\n          //lineDash: [0]\n        }\n      }\n    }\n  ];\n\n  return { spec };\n};\n\nexport const pipelineRadar = [\n  data,\n  color,\n  radarField,\n  radarDisplayConf,\n  radarAxis,\n  discreteLegend\n  // commonLabel,\n  //animationCartisianLine,\n];\n"]}