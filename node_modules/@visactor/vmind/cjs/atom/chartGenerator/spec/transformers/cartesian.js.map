{"version":3,"sources":["../src/atom/chartGenerator/spec/transformers/cartesian.ts"],"names":[],"mappings":"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","file":"cartesian.js","sourcesContent":["import { isArray, uniqArray } from '@visactor/vutils';\nimport type { GenerateChartCellContext } from '../../type';\nimport type { DataCell } from '../../../../types/base';\nimport { ROLE } from '../../../../types/base';\n\nexport const seriesField = (context: GenerateChartCellContext) => {\n  const { spec, fieldInfo, dataTable, cell } = context;\n  const cellNew: any = { ...cell };\n  const { seriesField, xField: propsXField } = spec;\n  const colorField = isArray(seriesField) ? seriesField[0] : seriesField;\n  const colorFieldInfo = fieldInfo.find(v => v.fieldName === colorField);\n  const xField = isArray(propsXField) ? propsXField : [propsXField];\n  if (colorField && colorFieldInfo?.role === ROLE.DIMENSION && xField) {\n    const xMap = new Map<DataCell, DataCell[]>();\n    dataTable.forEach(row => {\n      const xValue = row[xField[0]];\n      if (xMap.has(xValue)) {\n        xMap.get(xValue).push(row[colorField]);\n      } else {\n        xMap.set(xValue, [row[colorField]]);\n      }\n    });\n    const xValues = Array.from(xMap.keys());\n    let isValidColor = false;\n    for (let i = 0; i < xValues.length; i++) {\n      const xValue = xValues[i];\n      const colorValues = uniqArray(xMap.get(xValue));\n      if (isArray(colorValues) && colorValues.length > 1) {\n        isValidColor = true;\n        break;\n      }\n    }\n    if (!isValidColor) {\n      if (xField.includes(colorField) && xField.length > 1) {\n        // 对于分组柱图的情况，因为没有有效的分组，这种设置没有意义，所以删掉分组字段\n        spec.seriesField = undefined;\n        cellNew.color = undefined;\n        spec.xField = xField.filter((field: string) => field !== colorField);\n      }\n    }\n  }\n  return { spec, cell: cellNew };\n};\n\nexport const axis = (context: GenerateChartCellContext) => {\n  const { spec, cell, fieldInfo } = context;\n  // if (spec.axes) {\n  //   // 如果已经有轴配置，直接返回\n  //   return { spec };\n  // }\n\n  const { y: celly } = cell;\n  const yFields = isArray(celly) ? celly : [celly];\n  const yFieldsInfo = yFields.map(field => fieldInfo.find(v => v.fieldName === field));\n  const isAllRatio = yFieldsInfo.every(v => !!v?.ratioGranularity);\n  const isSameUnit = uniqArray(yFieldsInfo.map(v => v?.unit).filter(v => !!v)).length === 1;\n\n  spec.axes = [\n    {\n      orient: 'bottom',\n      type: 'band',\n      label: {\n        style: {\n          //fill: '#FFFFFF'\n        }\n      },\n      title: {\n        visible: false,\n        style: {\n          //fill: '#FFFFFF'\n        }\n      }\n    },\n    {\n      orient: 'left',\n      type: 'linear',\n      label: {\n        style: {\n          //fill: '#FFFFFF'\n        },\n        formatter: isAllRatio ? `{label:~%}` : undefined\n      },\n      unit:\n        isSameUnit && !['%', '‰'].includes(yFieldsInfo[0]?.unit)\n          ? {\n              visible: true,\n              text: yFieldsInfo[0]?.unit\n            }\n          : undefined,\n      title: {\n        visible: false,\n        style: {\n          //fill: '#FFFFFF'\n        }\n      }\n    }\n  ];\n  return { spec };\n};\n"]}