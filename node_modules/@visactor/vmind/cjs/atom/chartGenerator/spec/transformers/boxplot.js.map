{"version":3,"sources":["../src/atom/chartGenerator/spec/transformers/boxplot.ts"],"names":[],"mappings":";;;AAAA,6CAAyC;AACzC,2DAA+D;AAE/D,qCAAiF;AAE1E,MAAM,YAAY,GAAG,CAAC,OAAiC,EAAE,EAAE;IAChE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAC1C,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC;IACtB,MAAM,IAAI,GAAG,IAAA,4BAAgB,EAAC,SAAS,CAAC,CAAC,CAAC,CAAE,SAAyC,CAAC,CAAC,CAAC,EAAE,CAAC;IAE3F,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IAGhB,IAAA,cAAK,EAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,uBAAC,OAAA,MAAA,MAAA,MAAA,IAAI,CAAC,CAAC,CAAC,0CAAG,CAAC,CAAC,mCAAI,CAAC,IAAG,MAAA,IAAI,CAAC,CAAC,CAAC,0CAAG,CAAC,CAAC,CAAA,mCAAI,CAAC,CAAA,EAAA,CAAC,CAAC;IAC/D,MAAM,UAAU,GAAG,CAAC,CAAC,MAAM,CAAC;IAE5B,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACrB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACvD,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;IAClC,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAjBW,QAAA,YAAY,gBAiBvB;AAEK,MAAM,YAAY,GAAG,CAAC,OAAiC,EAAE,EAAE;IAChE,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IACzB,IAAI,CAAC,OAAO,mCACP,IAAI,CAAC,OAAO,KACf,KAAK,EAAE,EAMN,GACF,CAAC;IACF,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAbW,QAAA,YAAY,gBAavB;AAEW,QAAA,eAAe,GAAG,CAAC,aAAI,EAAE,cAAK,EAAE,oBAAY,EAAE,oBAAY,EAAE,uBAAc,CAAC,CAAC","file":"boxplot.js","sourcesContent":["import { array } from '@visactor/vutils';\nimport { isValidDataTable } from '../../../../utils/dataTable';\nimport type { GenerateChartCellContext } from '../../type';\nimport { color, data, discreteLegend, revisedVChartType, theme } from './common';\n\nexport const boxPlotField = (context: GenerateChartCellContext) => {\n  const { cell, dataTable, spec } = context;\n  const { x, y } = cell;\n  const data = isValidDataTable(dataTable) ? (dataTable as { [key: string]: number }[]) : [];\n  // assign x field\n  spec.xField = x;\n  // assign y field\n  // 1. sort y field according to its value\n  array(y).sort((a, b) => data[0]?.[a] ?? 0 - data[0]?.[b] ?? 0);\n  const yFieldsLen = y.length;\n  // 2. Map the maximum, minimum, median, and upper and lower quartiles respectively according to numerical value.\n  spec.minField = y[0]; // Minimum value field: the field with the smallest value.\n  spec.q1Field = y[Math.min(1, yFieldsLen - 1)]; // Lower quartile field: the field with the second smallest value.\n  spec.medianField = y[Math.floor((yFieldsLen - 1) / 2)]; // Median: the field with a value in the middle.\n  spec.q3Field = y[Math.max(0, yFieldsLen - 2)]; // Upper quartile field: the field with the second highest value.\n  spec.maxField = y[yFieldsLen - 1]; // Maximum value field: the field with the highest value.\n  return { spec };\n};\n\nexport const boxPlotStyle = (context: GenerateChartCellContext) => {\n  const { spec } = context;\n  spec.boxPlot = {\n    ...spec.boxPlot,\n    style: {\n      //boxWidth: 50,\n      //shaftWidth: 30,\n      //shaftShape: 'bar',\n      //lineWidth: 2,\n      //shaftOpacity: 0.3\n    }\n  };\n  return { spec };\n};\n\nexport const pipelineBoxPlot = [data, color, boxPlotField, boxPlotStyle, discreteLegend];\n"]}