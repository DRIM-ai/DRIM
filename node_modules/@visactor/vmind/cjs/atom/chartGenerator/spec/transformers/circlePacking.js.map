{"version":3,"sources":["../src/atom/chartGenerator/spec/transformers/circlePacking.ts"],"names":[],"mappings":";;;AACA,qCAAiE;AAE1D,MAAM,uBAAuB,GAAG,CAAC,OAAiC,EAAE,EAAE;IAC3E,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAC1C,IAAI,IAAI,CAAC,IAAI,EAAE;QACb,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE7B,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;gBACzB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACxB;QACH,CAAC,CAAC,CAAC;KACJ;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAZW,QAAA,uBAAuB,2BAYlC;AAEK,MAAM,wBAAwB,GAAG,CAAC,OAAiC,EAAE,EAAE;IAE5E,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAC/B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;IAE1C,IAAI,IAAI,CAAC,IAAI,EAAE;QACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC;KAC7B;IAED,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAVW,QAAA,wBAAwB,4BAUnC;AAEK,MAAM,8BAA8B,GAAG,CAAC,OAAiC,EAAE,EAAE;IAClF,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IACzB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IAClB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;IACvB,IAAI,CAAC,cAAc,GAAG;QACpB,MAAM,EAAE,YAAY;KACrB,CAAC;IACF,IAAI,CAAC,aAAa,GAAG;QACnB,MAAM,EAAE,YAAY;KACrB,CAAC;IACF,IAAI,CAAC,eAAe,GAAG;QACrB,MAAM,EAAE,YAAY;KACrB,CAAC;IACF,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAdW,QAAA,8BAA8B,kCAczC;AAEW,QAAA,2BAA2B,GAAG;IACzC,+BAAuB;IACvB,aAAI;IACJ,cAAK;IACL,gCAAwB;IACxB,sCAA8B;CAC/B,CAAC","file":"circlePacking.js","sourcesContent":["import type { GenerateChartCellContext } from '../../type';\nimport { color, data, revisedVChartType, theme } from './common';\n\nexport const bubbleCirclePackingData = (context: GenerateChartCellContext) => {\n  const { dataTable, spec, cell } = context;\n  if (cell.size) {\n    dataTable.forEach(data => {\n      data.value = data[cell.size];\n\n      if (cell.size !== 'value') {\n        delete data[cell.size];\n      }\n    });\n  }\n  return { spec };\n};\n\nexport const bubbleCirclePackingField = (context: GenerateChartCellContext) => {\n  //assign field in spec according to cell\n  const { cell, spec } = context;\n  spec.categoryField = cell.color || cell.x;\n\n  if (cell.size) {\n    spec.valueField = cell.size;\n  }\n\n  return { spec };\n};\n\nexport const bubbleCirclePackingDisplayConf = (context: GenerateChartCellContext) => {\n  const { spec } = context;\n  spec.drill = true;\n  spec.layoutPadding = 5;\n  spec.animationEnter = {\n    easing: 'cubicInOut'\n  };\n  spec.animationExit = {\n    easing: 'cubicInOut'\n  };\n  spec.animationUpdate = {\n    easing: 'cubicInOut'\n  };\n  return { spec };\n};\n\nexport const pipelineBubbleCirclePacking = [\n  bubbleCirclePackingData,\n  data,\n  color,\n  bubbleCirclePackingField,\n  bubbleCirclePackingDisplayConf\n];\n"]}