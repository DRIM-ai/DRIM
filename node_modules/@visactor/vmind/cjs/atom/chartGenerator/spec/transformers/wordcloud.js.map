{"version":3,"sources":["../src/atom/chartGenerator/spec/transformers/wordcloud.ts"],"names":[],"mappings":";;;AAAA,2DAA+D;AAE/D,4CAAmD;AACnD,qCAA2D;AAEpD,MAAM,aAAa,GAAG,CAAC,OAAiC,EAAE,EAAE;IACjE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IACpC,IAAI,CAAC,IAAI,GAAG;QACV,EAAE,EAAE,MAAM;QACV,MAAM,EAAE,IAAA,4BAAgB,EAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,+BAAmB,CAAC,CAAC,CAAC,CAAC,EAAE;KACnF,CAAC;IAEF,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AARW,QAAA,aAAa,iBAQxB;AAEK,MAAM,cAAc,GAAG,CAAC,OAAiC,EAAE,EAAE;IAElE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAC/B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;IAE5B,IAAI,IAAI,CAAC,IAAI,EAAE;QACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC;KAC7B;IAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC;IAElC,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAZW,QAAA,cAAc,kBAYzB;AAEK,MAAM,oBAAoB,GAAG,CAAC,OAAiC,EAAE,EAAE;IACxE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;IAErC,IAAI,UAAU,EAAE;QACd,OAAO,EAAE,IAAI,EAAE,CAAC;KACjB;IACD,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC9B,IAAI,CAAC,eAAe,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAMlC,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAdW,QAAA,oBAAoB,wBAc/B;AACW,QAAA,iBAAiB,GAAG;IAC/B,qBAAa;IACb,cAAK;IACL,sBAAc;IACd,4BAAoB;CAErB,CAAC","file":"wordcloud.js","sourcesContent":["import { isValidDataTable } from '../../../../utils/dataTable';\nimport type { GenerateChartCellContext } from '../../type';\nimport { WORDCLOUD_NUM_LIMIT } from '../constants';\nimport { color, revisedVChartType, theme } from './common';\n\nexport const wordCloudData = (context: GenerateChartCellContext) => {\n  const { dataTable, spec } = context;\n  spec.data = {\n    id: 'data',\n    values: isValidDataTable(dataTable) ? dataTable.slice(0, WORDCLOUD_NUM_LIMIT) : []\n  };\n\n  return { spec };\n};\n\nexport const wordCloudField = (context: GenerateChartCellContext) => {\n  //assign field in spec according to cell\n  const { cell, spec } = context;\n  spec.nameField = cell.color;\n\n  if (cell.size) {\n    spec.valueField = cell.size;\n  }\n\n  spec.seriesField = spec.nameField;\n\n  return { spec };\n};\n\nexport const wordCloudDisplayConf = (context: GenerateChartCellContext) => {\n  const { spec, chartTheme } = context;\n\n  if (chartTheme) {\n    return { spec };\n  }\n  spec.fontSizeRange = [20, 50];\n  spec.fontWeightRange = [800, 800];\n  //spec.wordCloudConfig = {\n  //  zoomToFit: {\n  //    enlarge: true\n  //  }\n  //}\n  return { spec };\n};\nexport const pipelineWordCloud = [\n  wordCloudData,\n  color,\n  wordCloudField,\n  wordCloudDisplayConf\n  //animationOneByOne,\n];\n"]}