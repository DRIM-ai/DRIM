"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.getChartSpecWithContext = void 0;

const types_1 = require("../../../types"), utils_1 = require("../utils"), chartTypeUtils_1 = require("./chartTypeUtils"), bar_1 = require("./transformers/bar"), boxplot_1 = require("./transformers/boxplot"), circlePacking_1 = require("./transformers/circlePacking"), circularProgress_1 = require("./transformers/circularProgress"), common_1 = require("./transformers/common"), dualAxis_1 = require("./transformers/dualAxis"), funnel_1 = require("./transformers/funnel"), gauge_1 = require("./transformers/gauge"), heatmap_1 = require("./transformers/heatmap"), line_1 = require("./transformers/line"), linearProgress_1 = require("./transformers/linearProgress"), liquid_1 = require("./transformers/liquid"), map_1 = require("./transformers/map"), pie_1 = require("./transformers/pie"), radar_1 = require("./transformers/radar"), rangeColumn_1 = require("./transformers/rangeColumn"), rankingBar_1 = require("./transformers/rankingBar"), rose_1 = require("./transformers/rose"), sankey_1 = require("./transformers/sankey"), scatter_1 = require("./transformers/scatter"), simpleSpec_1 = require("./transformers/simpleSpec"), sunburst_1 = require("./transformers/sunburst"), treemap_1 = require("./transformers/treemap"), venn_1 = require("./transformers/venn"), waterfall_1 = require("./transformers/waterfall"), wordcloud_1 = require("./transformers/wordcloud"), pipelineMap = {
    [types_1.ChartType.BarChart.toUpperCase()]: bar_1.pipelineBar,
    [types_1.ChartType.LineChart.toUpperCase()]: line_1.pipelineLine,
    [types_1.ChartType.AreaChart.toUpperCase()]: line_1.pipelineLine,
    [types_1.ChartType.PieChart.toUpperCase()]: pie_1.pipelinePie,
    [types_1.ChartType.WordCloud.toUpperCase()]: wordcloud_1.pipelineWordCloud,
    [types_1.ChartType.ScatterPlot.toUpperCase()]: scatter_1.pipelineScatterPlot,
    [types_1.ChartType.DynamicBarChart.toUpperCase()]: rankingBar_1.pipelineRankingBar,
    [types_1.ChartType.FunnelChart.toUpperCase()]: funnel_1.pipelineFunnel,
    [types_1.ChartType.DualAxisChart.toUpperCase()]: dualAxis_1.pipelineDualAxis,
    [types_1.ChartType.RoseChart.toUpperCase()]: rose_1.pipelineRose,
    [types_1.ChartType.RadarChart.toUpperCase()]: radar_1.pipelineRadar,
    [types_1.ChartType.SankeyChart.toUpperCase()]: sankey_1.pipelineSankey,
    [types_1.ChartType.WaterFallChart.toUpperCase()]: waterfall_1.pipelineWaterfall,
    [types_1.ChartType.BoxPlot.toUpperCase()]: boxplot_1.pipelineBoxPlot,
    [types_1.ChartType.LiquidChart.toUpperCase()]: liquid_1.pipelineLiquid,
    [types_1.ChartType.LinearProgress.toUpperCase()]: linearProgress_1.pipelineLinearProgress,
    [types_1.ChartType.CircularProgress.toUpperCase()]: circularProgress_1.pipelineCircularProgress,
    [types_1.ChartType.BubbleCirclePacking.toUpperCase()]: circlePacking_1.pipelineBubbleCirclePacking,
    [types_1.ChartType.MapChart.toUpperCase()]: map_1.pipelineMapChart,
    [types_1.ChartType.RangeColumnChart.toUpperCase()]: rangeColumn_1.pipelineRangeColumn,
    [types_1.ChartType.SunburstChart.toUpperCase()]: sunburst_1.pipelineSunburst,
    [types_1.ChartType.TreemapChart.toUpperCase()]: treemap_1.pipelineTreemap,
    [types_1.ChartType.Gauge.toUpperCase()]: gauge_1.pipelineGauge,
    [types_1.ChartType.BasicHeatMap.toUpperCase()]: heatmap_1.pipelineBasicHeatMap,
    [types_1.ChartType.VennChart.toUpperCase()]: venn_1.pipelineVenn
}, beforePipe = context => ({
    spec: {}
}), afterPipe = context => {
    const {spec: spec, chartType: chartType, totalTime: totalTime} = context;
    return {
        spec: spec,
        chartType: chartTypeUtils_1.llmChartTypeMap[chartType],
        time: (0, utils_1.estimateVideoTime)(chartType, spec, totalTime ? 1e3 * totalTime : void 0)
    };
}, getChartSpecWithContext = context => {
    const {chartType: chartType} = context, pipline = pipelineMap[chartType.toUpperCase()] ? pipelineMap[chartType.toUpperCase()] : [], chartSpecPipelines = [ beforePipe, common_1.revisedVChartType, ...pipline, common_1.theme, simpleSpec_1.fomartSimpleSpec, afterPipe ];
    let newContext = Object.assign({}, context);
    return chartSpecPipelines.forEach((func => {
        newContext = Object.assign(Object.assign({}, newContext), func(newContext));
    })), newContext;
};

exports.getChartSpecWithContext = getChartSpecWithContext;
//# sourceMappingURL=index.js.map
