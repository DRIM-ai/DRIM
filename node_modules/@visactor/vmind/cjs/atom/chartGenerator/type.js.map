{"version":3,"sources":["../src/atom/chartGenerator/type.ts"],"names":[],"mappings":"","file":"type.js","sourcesContent":["import type { ITheme as ChartTheme } from '@visactor/vchart';\nimport type { BasemapOption, Cell, ChartGeneratorCtx, ChartType, DataTable, VizSchema } from '../../types';\nimport type { BaseOptions } from '../../types/atom';\n\nexport type VisualChannel = 'x' | 'y' | 'color' | 'angle' | 'radius' | 'size' | 'value' | 'source' | 'target' | 'time';\n\nexport type ChartKnowledge = {\n  [chartType: string]: {\n    index: number;\n    visualChannels: VisualChannel[]; //Visual channel available in this chart type\n    examples: ((showThoughts: boolean) => string)[]; //examples of the response\n    knowledge?: string[]; //extra knowledge of this chart\n  };\n};\n\nexport interface GenerateChartCellContext extends ChartGeneratorCtx {\n  colors?: string[];\n  chartTheme?: ChartTheme | string;\n  chartTypeList: ChartType[];\n  /** only use in map chart */\n  basemapOption?: BasemapOption;\n  totalTime?: number;\n  stackOrPercent?: 'stack' | 'percent';\n  transpose?: boolean;\n}\n\nexport interface ChartAdvistorResult {\n  chartType: ChartType;\n  cell?: Cell[];\n  dataset?: DataTable[];\n  spec: any;\n  chartSource: string;\n  usage: any; //token usage of the LLM\n  time?: { totalTime: number; frameArr: any[] };\n}\n\nexport interface ChartGeneratorOptions extends BaseOptions {\n  useChartAdvisor?: boolean;\n  useChartRule?: boolean;\n  /** supported chart list */\n  chartTypeList?: ChartType[];\n  /** un-supported chart list */\n  unsupportChartTypeList?: ChartType[];\n  animationDuration?: number;\n  basemapOption?: BasemapOption;\n  colorPalette?: string[];\n  theme?: ChartTheme | string;\n}\n\nexport interface SimpleVChartSpecMockContext {\n  ctx: Partial<GenerateChartCellContext>;\n  mockLLMContent: {\n    CHART_TYPE: ChartType;\n    FIELD_MAP: Cell;\n    stackOrPercent?: 'stack' | 'percent';\n    transpose?: boolean;\n  };\n}\n"]}