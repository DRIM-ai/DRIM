{"version":3,"sources":["../src/atom/chartGenerator/advisor/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import type { ChartType } from '@visactor/chart-advisor';\nimport { chartAdvisor } from '@visactor/chart-advisor';\n\nimport type { GenerateChartCellContext } from '../type';\nimport { isValidDataTable } from '../../../utils/dataTable';\nimport { chartTypeMap, getCell, typeMap, VMindChartTypeMap } from '../utils';\nimport type { VizSchema } from '../../../types/';\nimport { ChartType as VMindChartType } from '../../../types';\nimport type { Cell, DataTable } from '../../../types';\nimport { uniqBy } from '../../../utils/common';\n\n/**\n * call @visactor/chart-advisor to get the list of advised charts\n * sorted by scores of each chart type\n * @param schema\n * @param dataset\n * @returns\n */\nconst getAdvisedChartList = (schema: Partial<VizSchema>, dataset: DataTable) => {\n  const dimensionList: any = schema.fields\n    .filter(d => d.role === 'dimension')\n    .map(d => ({\n      uniqueId: d.id,\n      type: typeMap(d.type)\n    }));\n  const measureList: any = schema.fields\n    .filter(d => d.role === 'measure')\n    .map(d => ({\n      uniqueId: d.id,\n      type: typeMap(d.type)\n    }));\n  const aliasMap = Object.fromEntries(schema.fields.map(d => [d.id, d.alias]));\n  const advisorResult = chartAdvisor({ originDataset: dataset as any, dimensionList, measureList, aliasMap });\n  return advisorResult;\n};\n\nconst getAdvisedListTransformer = (context: GenerateChartCellContext) => {\n  const { vizSchema, dataTable, chartTypeList } = context;\n  const chartSource = 'chartAdvisor';\n\n  if (!isValidDataTable(dataTable)) {\n    return {\n      advisedList: [],\n      chartSource,\n      usage: {\n        prompt_tokens: 0,\n        completion_tokens: 0,\n        total_tokens: 0\n      }\n    };\n  }\n  // call rule-based method to get recommended chart type and fieldMap(cell)\n  const { scores } = getAdvisedChartList(vizSchema, dataTable);\n  const availableChartTypeList = chartTypeList.reduce(\n    (res, chartType) => [...res, ...(VMindChartTypeMap?.[chartType] ?? [])],\n    []\n  );\n  const advisedList: {\n    chartType: string;\n    cell: Cell;\n    dataset: DataTable;\n    score: number;\n  }[] = uniqBy(\n    scores\n      .filter((d: any) => availableChartTypeList.includes(d.chartType) && d.score - 0 >= 0.00000001)\n      .map((result: any) => ({\n        chartType: chartTypeMap(result.chartType as unknown as ChartType).toUpperCase(),\n        cell: getCell(result.cell),\n        dataset: result.dataset,\n        score: result.score\n      })),\n    'chartType'\n  );\n  return {\n    advisedList,\n    chartSource,\n    usage: {\n      prompt_tokens: 0,\n      completion_tokens: 0,\n      total_tokens: 0\n    }\n  };\n};\n\nexport const getCellContextByAdvisor = (context: GenerateChartCellContext) => {\n  const advisorResult = getAdvisedListTransformer(context);\n  const { advisedList, chartSource, usage } = advisorResult;\n  // call rule-based method to get recommended chart type and fieldMap(cell)\n  if (advisedList.length === 0) {\n    return {\n      chartType: VMindChartType.BarChart.toUpperCase() as VMindChartType,\n      cell: {},\n      dataset: [] as DataTable,\n      chartSource,\n      usage,\n      advisedList\n    };\n  }\n  const result = advisedList[0];\n  return {\n    chartType: result.chartType as VMindChartType,\n    cell: getCell(result.cell),\n    dataset: result.dataset,\n    chartSource,\n    usage,\n    advisedList\n  };\n};\n"]}