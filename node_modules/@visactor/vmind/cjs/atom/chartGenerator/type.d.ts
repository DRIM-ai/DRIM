import type { ITheme as ChartTheme } from '@visactor/vchart';
import type { BasemapOption, Cell, ChartGeneratorCtx, ChartType, DataTable } from '../../types';
import type { BaseOptions } from '../../types/atom';
export type VisualChannel = 'x' | 'y' | 'color' | 'angle' | 'radius' | 'size' | 'value' | 'source' | 'target' | 'time';
export type ChartKnowledge = {
    [chartType: string]: {
        index: number;
        visualChannels: VisualChannel[];
        examples: ((showThoughts: boolean) => string)[];
        knowledge?: string[];
    };
};
export interface GenerateChartCellContext extends ChartGeneratorCtx {
    colors?: string[];
    chartTheme?: ChartTheme | string;
    chartTypeList: ChartType[];
    basemapOption?: BasemapOption;
    totalTime?: number;
    stackOrPercent?: 'stack' | 'percent';
    transpose?: boolean;
}
export interface ChartAdvistorResult {
    chartType: ChartType;
    cell?: Cell[];
    dataset?: DataTable[];
    spec: any;
    chartSource: string;
    usage: any;
    time?: {
        totalTime: number;
        frameArr: any[];
    };
}
export interface ChartGeneratorOptions extends BaseOptions {
    useChartAdvisor?: boolean;
    useChartRule?: boolean;
    chartTypeList?: ChartType[];
    unsupportChartTypeList?: ChartType[];
    animationDuration?: number;
    basemapOption?: BasemapOption;
    colorPalette?: string[];
    theme?: ChartTheme | string;
}
export interface SimpleVChartSpecMockContext {
    ctx: Partial<GenerateChartCellContext>;
    mockLLMContent: {
        CHART_TYPE: ChartType;
        FIELD_MAP: Cell;
        stackOrPercent?: 'stack' | 'percent';
        transpose?: boolean;
    };
}
