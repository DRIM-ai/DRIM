{"version":3,"sources":["../src/atom/chartGenerator/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @todo @666haiwen optimize and expand with old develop branch feat/v1_develop\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { ChartGeneratorCtx, LLMMessage, BaseAtomConstructor } from '../../types';\nimport { AtomName } from '../../types/atom';\nimport { BaseAtom } from '../base';\nimport { merge } from '@visactor/vutils';\nimport { DEFAULT_MAP_OPTION, SUPPORTED_CHART_LIST } from './const';\nimport { getPrompt, revisedUserInput } from './prompt';\nimport { getContextAfterRevised } from './llmResultRevise';\nimport { checkChartTypeAndCell, getVizSchema } from './utils';\nimport { getChartSpecWithContext } from './spec';\nimport { getCellContextBySimpleVChartSpec, getRuleLLMContent } from './rule';\nimport { getCellContextByAdvisor } from './advisor';\nimport type { ChartType } from '../../types';\nimport type { GenerateChartCellContext, ChartGeneratorOptions } from './type';\nimport { getFieldInfoFromDataset } from '../../utils/field';\nimport { Factory } from '../../core/factory';\n\nexport class ChartGeneratorAtom extends BaseAtom<ChartGeneratorCtx, ChartGeneratorOptions> {\n  name = AtomName.CHART_GENERATE;\n\n  isLLMAtom = true;\n\n  private _generateType: 'rule' | 'llm' | 'simpleSpec' | 'chartAdvistor' = 'llm';\n\n  finalChartTypeList: ChartType[];\n\n  constructor(context: ChartGeneratorCtx, option: ChartGeneratorOptions) {\n    super(context, option);\n    this.setFinalChartTypeList();\n  }\n\n  setFinalChartTypeList() {\n    const { chartTypeList, unsupportChartTypeList } = this.options;\n    this.finalChartTypeList = chartTypeList.filter(v => !unsupportChartTypeList.includes(v));\n  }\n\n  buildDefaultContext(context: ChartGeneratorCtx): ChartGeneratorCtx {\n    return merge(\n      {},\n      {\n        dataTable: [],\n        fieldInfo: []\n      },\n      context\n    );\n  }\n\n  buildDefaultOptions(): ChartGeneratorOptions {\n    return {\n      ...super.buildDefaultOptions(),\n      useChartAdvisor: false,\n      chartTypeList: SUPPORTED_CHART_LIST,\n      basemapOption: DEFAULT_MAP_OPTION,\n      unsupportChartTypeList: [],\n      useChartRule: false\n    };\n  }\n\n  updateContext(context: Partial<ChartGeneratorCtx>) {\n    this.context = super.updateContext(context);\n    this.context.vizSchema = getVizSchema(this.context);\n    return this.context;\n  }\n\n  updateOptions(options: ChartGeneratorOptions): void {\n    super.updateOptions(options);\n    this.setFinalChartTypeList();\n  }\n\n  getLLMMessages(query?: string): LLMMessage[] {\n    const { command } = this.context;\n    const { showThoughts } = this.options;\n    const addtionContent = this.getHistoryLLMMessages(query);\n    return [\n      {\n        role: 'system',\n        content: getPrompt(this.finalChartTypeList, showThoughts)\n      },\n      {\n        role: 'user',\n        content: revisedUserInput(command, this.context.vizSchema)\n      },\n      ...addtionContent\n    ];\n  }\n\n  parseLLMContent(resJson: any) {\n    const { CHART_TYPE, FIELD_MAP, thoughts, stackOrPercent, transpose } = resJson;\n    let newContext: GenerateChartCellContext = {\n      ...this.context,\n      thoughts,\n      chartType: CHART_TYPE,\n      cell: FIELD_MAP,\n      chartTypeList: this.finalChartTypeList,\n      stackOrPercent,\n      transpose\n    };\n    newContext = getContextAfterRevised(newContext);\n    const { error, chartType, fieldInfo, cell } = newContext as any;\n\n    if (error || !checkChartTypeAndCell(chartType, cell, fieldInfo)) {\n      console.warn('LLM generation error, use rule generation.');\n      delete (newContext as any).error;\n      delete (newContext as any).message;\n    }\n    return newContext;\n  }\n\n  protected runBeforeLLM(): ChartGeneratorCtx {\n    const { dataTable, fieldInfo, simpleVChartSpec } = this.context;\n\n    if (simpleVChartSpec) {\n      this.isLLMAtom = false;\n      this._generateType = 'simpleSpec';\n      const { ctx, mockLLMContent } = getCellContextBySimpleVChartSpec(simpleVChartSpec);\n      this.updateContext(ctx);\n      this.updateContext(this.parseLLMContent(mockLLMContent));\n    } else {\n      if (!fieldInfo || fieldInfo.length === 0) {\n        this.updateContext({\n          fieldInfo: getFieldInfoFromDataset(dataTable)\n        });\n      }\n      if ((dataTable.length > 1 || !this.options.useChartRule) && !simpleVChartSpec) {\n        this._generateType = this.options.useChartAdvisor ? 'chartAdvistor' : 'llm';\n        this.isLLMAtom = this._generateType === 'llm';\n\n        return this.context;\n      }\n\n      this.isLLMAtom = false;\n      this._generateType = 'rule';\n      const ruleResJson = getRuleLLMContent(this.context);\n      if (ruleResJson) {\n        this.updateContext(this.parseLLMContent(ruleResJson));\n      } else {\n        this.updateContext({\n          cell: null\n        } as any);\n      }\n    }\n\n    return this.context;\n  }\n\n  protected runWithLLMError(error: string): ChartGeneratorCtx {\n    super._runWithOutLLM();\n    this._generateType = 'chartAdvistor';\n    return this._runWithOutLLM();\n  }\n\n  protected _runWithOutLLM(): ChartGeneratorCtx {\n    this.isLLMAtom = true;\n\n    if (this._generateType === 'rule' && !this.context.cell) {\n      /** use table */\n      this.context.spec = null;\n      return this.context;\n    }\n    const additionalCtx = {\n      chartTypeList: this.finalChartTypeList,\n      basemapOption: this.options?.basemapOption,\n      totalTime: this.options?.animationDuration,\n      colors: this.options?.colorPalette,\n      chartTheme: this.options?.theme\n    };\n    if (this._generateType === 'chartAdvistor' || this.options.useChartAdvisor) {\n      // @todo\n      const { cell, dataset, chartType, advisedList, usage } = getCellContextByAdvisor({\n        ...this.context,\n        ...additionalCtx\n      });\n      this.context = {\n        ...this.context,\n        usage,\n        cell,\n        dataTable: dataset,\n        chartType,\n        chartAdvistorRes: advisedList.map(item => {\n          const tmpContext = merge({}, this.context, {\n            cell: item.cell,\n            dataTable: item.dataset,\n            chartType: item.chartType\n          });\n          return {\n            chartType: item.chartType as ChartType,\n            score: item.score,\n            spec: getChartSpecWithContext({ ...tmpContext, ...additionalCtx }).spec\n          };\n        })\n      };\n    } else {\n      this.context.chartAdvistorRes = [];\n    }\n    const newContext = {\n      ...this.context,\n      ...getChartSpecWithContext({ ...this.context, ...additionalCtx })\n    };\n    this.updateContext(newContext);\n    return newContext;\n  }\n}\n\nexport const registerChartGeneratorAtom = () => {\n  Factory.registerAtom(\n    AtomName.CHART_GENERATE,\n    ChartGeneratorAtom as unknown as BaseAtomConstructor<ChartGeneratorCtx, ChartGeneratorOptions>\n  );\n};\n"]}