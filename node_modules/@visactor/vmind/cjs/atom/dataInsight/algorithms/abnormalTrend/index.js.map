{"version":3,"sources":["../src/atom/dataInsight/algorithms/abnormalTrend/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { isArray } from '@visactor/vutils';\n\nimport { originalMKTest, TrendType } from '../statistics';\nimport type { DataInsightExtractContext } from '../../type';\nimport { InsightType, type Insight, type InsightAlgorithm } from '../../type';\nimport type { DataCell } from '../../../../types';\nimport { ChartType } from '../../../../types';\nimport { overallTrendingAlgo } from '../overallTrending';\nimport { isValidData } from '../.../../../../../utils/common';\nimport { isPercenSeries, isStackSeries } from '../../utils';\n\ntype TrendInfo = {\n  trend: string;\n  pValue: number;\n  zScore: number;\n  measureId: number | string;\n  series: string;\n  info?: any;\n};\n\nexport interface AbnormalTrendOptions {\n  threshold?: number;\n}\n\nconst abnormalTrendAlgo = (context: DataInsightExtractContext, options: AbnormalTrendOptions) => {\n  const result: Insight[] = [];\n  const { threshold = 0.2 } = options || {};\n  const { insights, seriesDataMap, cell, spec } = context;\n  const { y: celly, color } = cell;\n  const yField: string[] = isArray(celly) ? celly.flat() : [celly];\n  const seriesField: string = isArray(color) ? color[0] : color;\n  if (!seriesField) {\n    return [];\n  }\n  const seriesTrendInfo: TrendInfo[] = [];\n  Object.keys(seriesDataMap).forEach(series => {\n    yField.forEach(measureId => {\n      if (isStackSeries(spec, measureId) || isPercenSeries(spec, measureId)) {\n        return;\n      }\n      const seriesDataset: number[] = seriesDataMap[series]\n        .map(d => Number(d.dataItem[measureId]))\n        .filter(v => isValidData(v) && !isNaN(v));\n      const { trend, pValue, zScore } = originalMKTest(seriesDataset, 0.05, false);\n      if (trend !== TrendType.NO_TREND) {\n        const startValue = seriesDataset[0];\n        const endValue = seriesDataset[seriesDataset.length - 1];\n        seriesTrendInfo.push({\n          trend,\n          pValue,\n          zScore,\n          measureId,\n          series,\n          info: {\n            startValue,\n            endValue,\n            change: endValue / startValue - 1\n          }\n        });\n      }\n    });\n  });\n\n  let overallTrendInsights = insights.filter(v => v.type === InsightType.OverallTrend);\n  if (overallTrendInsights.length === 0) {\n    overallTrendInsights = overallTrendingAlgo(context, {});\n  }\n  yField.forEach(measureId => {\n    const measureOverallTrend = insights.find(\n      (i: { type: InsightType; fieldId?: DataCell }) => i.type === InsightType.OverallTrend && i?.fieldId === measureId\n    );\n    if (measureOverallTrend) {\n      const measureSeriesTrend = seriesTrendInfo.filter(\n        t => t.measureId === measureId && t.trend !== measureOverallTrend.value\n      );\n      const seriesInsights = measureSeriesTrend.map(\n        seriesTrend =>\n          ({\n            type: InsightType.AbnormalTrend,\n            data: [],\n            fieldId: measureId,\n            value: seriesTrend.trend,\n            significant: 1 - seriesTrend.pValue,\n            seriesName: seriesTrend.series,\n            info: seriesTrend.info\n          } as unknown as Insight)\n      );\n      result.push(...seriesInsights);\n    } else {\n      const increaseTrends = seriesTrendInfo.filter(t => t.trend === TrendType.INCREASING && t.measureId === measureId);\n      const decreasedTrends = seriesTrendInfo.filter(\n        t => t.trend === TrendType.DECREASING && t.measureId === measureId\n      );\n      if (increaseTrends.length > 0 && decreasedTrends.length > 0) {\n        if (\n          increaseTrends.length > decreasedTrends.length &&\n          (decreasedTrends.length / (increaseTrends.length + decreasedTrends.length) <= threshold ||\n            decreasedTrends.length === 1)\n        ) {\n          const decreaseInsights = decreasedTrends.map(\n            dt =>\n              ({\n                type: InsightType.AbnormalTrend,\n                data: [],\n                fieldId: measureId,\n                value: dt.trend,\n                significant: 1 - dt.pValue,\n                seriesName: dt.series,\n                info: dt.info\n              } as unknown as Insight)\n          );\n          result.push(...decreaseInsights);\n        } else if (\n          increaseTrends.length < decreasedTrends.length &&\n          (increaseTrends.length / (increaseTrends.length + decreasedTrends.length) <= threshold ||\n            increaseTrends.length === 1)\n        ) {\n          const increaseInsights = increaseTrends.map(\n            it =>\n              ({\n                type: InsightType.AbnormalTrend,\n                fieldId: measureId,\n                value: it.trend,\n                significant: 1 - it.pValue,\n                seriesName: it.series,\n                info: it.info\n              } as unknown as Insight)\n          );\n          result.push(...increaseInsights);\n        }\n      }\n    }\n  });\n  return result;\n};\n\nexport const AbnormalTrend: InsightAlgorithm = {\n  name: 'abnormalTrend',\n  chartType: [ChartType.DualAxisChart, ChartType.LineChart, ChartType.BarChart, ChartType.AreaChart],\n  insightType: InsightType.AbnormalTrend,\n  algorithmFunction: abnormalTrendAlgo,\n  supportPercent: false,\n  supportStack: false\n};\n"]}