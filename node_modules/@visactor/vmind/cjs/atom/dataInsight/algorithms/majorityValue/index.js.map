{"version":3,"sources":["../src/atom/dataInsight/algorithms/majorityValue/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { isArray, isNumber } from '@visactor/vutils';\nimport type { InsightAlgorithm } from '../../type';\nimport { InsightType, type DataInsightExtractContext, type Insight } from '../../type';\nimport { ChartType, type DataItem } from '../../../../types';\n\nconst getMajorityInGroup = (\n  dataset: { index: number; dataItem: DataItem }[],\n  measureId: string | number,\n  seriesId: string | number,\n  dimensionId: string | number,\n  threshold = 0.85\n) => {\n  const result: Insight[] = [];\n  const sum = dataset.reduce((prev, cur) => {\n    const dataValue = parseFloat(cur.dataItem[measureId] as string);\n    const value = isNumber(dataValue) ? Math.abs(dataValue) : 0;\n    return prev + value;\n  }, 0);\n  if (sum - Number.EPSILON < 0) {\n    return [];\n  }\n  dataset.forEach(d => {\n    const seriesName = d.dataItem[seriesId];\n    const dimensionName = d.dataItem[dimensionId];\n    const dataValue = parseFloat(d.dataItem[measureId] as string);\n    const seriesValue: number = isNumber(dataValue) ? Math.abs(dataValue) : 0;\n    const ratio = seriesValue / sum;\n    if (ratio > threshold) {\n      result.push({\n        type: InsightType.MajorityValue,\n        data: [d],\n        fieldId: measureId,\n        value: d.dataItem[measureId] as unknown as number,\n        significant: ratio,\n        seriesName,\n        info: {\n          ratio,\n          dimensionName\n        }\n      } as unknown as Insight);\n    }\n  });\n  return result;\n};\n\nexport interface MajorityValueOptions {\n  threshold?: number;\n}\n\n/** The rules are too simple */\nconst calcMajorityValue = (context: DataInsightExtractContext, options: MajorityValueOptions): Insight[] => {\n  const result: Insight[] = [];\n  const { cell, dimensionDataMap, seriesDataMap } = context;\n  const { threshold } = options || {};\n  const { y: celly, x: cellx, color } = cell;\n  const yField: string[] = isArray(celly) ? celly.flat() : [celly];\n  const xField: string = isArray(cellx) ? cellx[0] : cellx;\n  let groupField: string | undefined;\n  if (isArray(cellx) && cellx.length > 1) {\n    groupField = cellx[1];\n  } else {\n    groupField = isArray(color) ? color[0] : color;\n  }\n  if (!groupField || !xField) {\n    return [];\n  }\n  if (Object.keys(seriesDataMap).length <= 1) {\n    return [];\n  }\n\n  Object.keys(dimensionDataMap).forEach(dimension => {\n    const dimensionDataset = dimensionDataMap[dimension];\n    const dimensionInsights = getMajorityInGroup(dimensionDataset, yField[0], groupField, xField, threshold);\n    result.push(...dimensionInsights);\n  });\n  // return [];\n  return result;\n};\n\nexport const LineChartMajorityValue: InsightAlgorithm = {\n  name: 'majorityValue',\n  forceChartType: [ChartType.BarChart, ChartType.AreaChart, ChartType.WaterFallChart],\n  insightType: InsightType.MajorityValue,\n  algorithmFunction: calcMajorityValue\n};\n"]}