{"version":3,"sources":["../src/atom/dataInsight/algorithms/correlation/spearman.ts"],"names":[],"mappings":";;;AAAA,6CAA2C;AAE3C,8CAAoD;AAEpD,qCAAuF;AAEvF,6CAA8C;AAM9C,MAAM,YAAY,GAAG,CAAC,OAAkC,EAAE,OAAwB,EAAE,EAAE;IACpF,MAAM,EAAE,aAAa,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IACxC,MAAM,EAAE,SAAS,GAAG,IAAI,EAAE,GAAG,OAAO,IAAI,EAAE,CAAC;IAC3C,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;IAC1B,MAAM,MAAM,GAAa,IAAA,gBAAO,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IAEjE,MAAM,MAAM,GAAc,EAAE,CAAC;IAE7B,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC/C,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;QACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC3C,MAAM,QAAQ,GAAc,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;YACtF,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAa,CAAC;YAChE,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC/C,MAAM,QAAQ,GAAc,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;gBACtF,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAa,CAAC;gBAEhE,IAAI,WAAW,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE;oBAC7C,SAAS;iBACV;gBACD,MAAM,YAAY,GAAG,IAAA,gCAAmB,EAAC,WAAW,EAAE,WAAW,CAAC,CAAC;gBACnE,IAAI,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,SAAS,EAAE;oBACtC,MAAM,CAAC,IAAI,CAAC;wBACV,IAAI,EAAE,kBAAW,CAAC,WAAW;wBAC7B,OAAO,EAAE,SAAS;wBAClB,UAAU,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;wBAC5C,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC;wBACnC,IAAI,EAAE;4BACJ,eAAe,EAAE,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU;yBAC5D;qBACoB,CAAC,CAAC;iBAC1B;aACF;SACF;IACH,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEW,QAAA,oBAAoB,GAAqB;IACpD,IAAI,EAAE,UAAU;IAChB,SAAS,EAAE,CAAC,iBAAS,CAAC,SAAS,EAAE,iBAAS,CAAC,aAAa,CAAC;IACzD,WAAW,EAAE,kBAAW,CAAC,WAAW;IACpC,iBAAiB,EAAE,YAAY;CAChC,CAAC","file":"spearman.js","sourcesContent":["import { isArray } from '@visactor/vutils';\n\nimport { spearmanCoefficient } from '../statistics';\nimport type { InsightAlgorithm } from '../../type';\nimport { InsightType, type DataInsightExtractContext, type Insight } from '../../type';\nimport type { DataTable } from '../../../../types';\nimport { ChartType } from '../../../../types';\n\nexport interface SpearmanOptions {\n  threshold?: number;\n}\n\nconst spearmanAlgo = (context: DataInsightExtractContext, options: SpearmanOptions) => {\n  const { seriesDataMap, cell } = context;\n  const { threshold = 0.95 } = options || {};\n  const { y: celly } = cell;\n  const yField: string[] = isArray(celly) ? celly.flat() : [celly];\n\n  const result: Insight[] = [];\n\n  const seriesNames = Object.keys(seriesDataMap);\n  yField.forEach(measureId => {\n    for (let i = 0; i < seriesNames.length; i++) {\n      const iDataset: DataTable = seriesDataMap[seriesNames[i]].map((d: any) => d.dataItem);\n      const iMeasureset = iDataset.map(d => d[measureId]) as number[];\n      for (let j = i + 1; j < seriesNames.length; j++) {\n        const jDataset: DataTable = seriesDataMap[seriesNames[j]].map((d: any) => d.dataItem);\n        const jMeasureset = jDataset.map(d => d[measureId]) as number[];\n\n        if (iMeasureset.length !== jMeasureset.length) {\n          continue;\n        }\n        const spearmanCoff = spearmanCoefficient(iMeasureset, jMeasureset);\n        if (Math.abs(spearmanCoff) > threshold) {\n          result.push({\n            type: InsightType.Correlation,\n            fieldId: measureId,\n            seriesName: [seriesNames[i], seriesNames[j]],\n            significant: Math.abs(spearmanCoff),\n            info: {\n              correlationType: spearmanCoff > 0 ? 'positive' : 'negative'\n            }\n          } as unknown as Insight);\n        }\n      }\n    }\n  });\n  return result;\n};\n\nexport const LineChartCorrelation: InsightAlgorithm = {\n  name: 'spearman',\n  chartType: [ChartType.LineChart, ChartType.DualAxisChart],\n  insightType: InsightType.Correlation,\n  algorithmFunction: spearmanAlgo\n};\n"]}