{"version":3,"sources":["../src/atom/dataInsight/algorithms/extremeValue/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { isArray, isNumber } from '@visactor/vutils';\nimport type { InsightAlgorithm } from '../../type';\nimport { InsightType, type DataInsightExtractContext, type Insight } from '../../type';\nimport { type DataItem } from '../../../../types';\nimport { isPercenSeries } from '../../utils';\n\nconst getExtremeValue = (\n  dataset: { index: number; dataItem: DataItem }[],\n  measureId: string | number,\n  seriesName: string,\n  propsLowerThreshold?: number,\n  propsUpperThreshold?: number\n): Insight[] => {\n  if (!dataset || dataset.length === 0) {\n    return [];\n  }\n\n  const lowerThreshold = propsLowerThreshold ?? 0.2;\n  const upperThreshold = propsUpperThreshold ?? 5;\n\n  const result: Insight[] = [];\n  const sum = dataset\n    .map(d => d.dataItem)\n    .reduce((prev, cur) => {\n      const numValue = parseFloat(cur[measureId] as string);\n      const value = isNumber(numValue as number) ? Math.abs(numValue) : 0;\n      return prev + value;\n    }, 0);\n  const avg = sum / dataset.length;\n  if (avg - 0 <= Number.EPSILON) {\n    return [];\n  }\n  dataset.forEach(d => {\n    const numValue = parseFloat(d.dataItem[measureId] as string);\n\n    const value = isNumber(numValue as number) ? Math.abs(numValue as number) : 0;\n\n    const percent = value / avg;\n    if (percent > upperThreshold) {\n      result.push({\n        type: InsightType.ExtremeValue,\n        data: [d] as any,\n        value: d.dataItem[measureId] as unknown as number,\n        significant: percent / upperThreshold,\n        fieldId: measureId,\n        seriesName,\n        info: {\n          type: 'extreme_high',\n          averageValue: avg,\n          percent\n        }\n      } as unknown as Insight);\n    }\n    if (percent - 0 > Number.EPSILON && percent < lowerThreshold) {\n      result.push({\n        type: InsightType.ExtremeValue,\n        data: [d] as any,\n        value: d.dataItem[measureId] as unknown as number,\n        significant: lowerThreshold / percent,\n        fieldId: measureId,\n        seriesName,\n        info: {\n          type: 'extreme_low',\n          averageValue: avg,\n          percent\n        }\n      } as unknown as Insight);\n    }\n  });\n  return result;\n};\n\nexport interface ExtremeValueOptions {\n  upperThreshold?: number;\n  lowerThreshold?: number;\n}\n\n/** The rules are too simple, they are useless in cases with large variance. */\nconst calcExtremeValue = (context: DataInsightExtractContext, options: ExtremeValueOptions): Insight[] => {\n  const { seriesDataMap, cell, spec } = context;\n  const { y: celly } = cell;\n  const { upperThreshold, lowerThreshold } = options || {};\n  const yField: string[] = isArray(celly) ? celly.flat() : [celly];\n\n  //calculate mean value\n  const result: Insight[] = [];\n  Object.keys(seriesDataMap).forEach(series => {\n    const dataset = seriesDataMap[series];\n    yField.forEach(measure => {\n      if (isPercenSeries(spec, measure)) {\n        return;\n      }\n      const insights = getExtremeValue(dataset, measure, series, lowerThreshold, upperThreshold);\n      result.push(...insights);\n    });\n  });\n  return [];\n};\n\nexport const ExtremeValue: InsightAlgorithm = {\n  name: 'extremeValue',\n  insightType: InsightType.ExtremeValue,\n  algorithmFunction: calcExtremeValue,\n  supportStack: true,\n  supportPercent: false\n};\n"]}