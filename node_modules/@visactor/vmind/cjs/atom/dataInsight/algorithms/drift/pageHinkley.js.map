{"version":3,"sources":["../src/atom/dataInsight/algorithms/drift/pageHinkley.ts"],"names":[],"mappings":";;;AACA,MAAa,WAAW;IAYtB,YAAY,KAAK,GAAG,KAAK,EAAE,MAAM,GAAG,IAAI,EAAE,KAAK,GAAG,IAAI,EAAE,SAAS,GAAG,IAAI,EAAE,MAAM,GAAG,KAAK;QACtF,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IAC9B,CAAC;IAED,YAAY;QACV,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IAClB,CAAC;IAED,QAAQ,CAAC,CAAS;QAChB,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACrB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED,YAAY,CAAC,CAAS;QACpB,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;YACZ,OAAO;SACR;QACD,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QACd,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;QAC1D,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QACpD,IAAI,IAAI,CAAC,GAAG,GAAG,CAAC,EAAE;YAChB,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC;SACxB;aAAM;YACL,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC;SACxB;QACD,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE;YAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC;SACxB;QAED,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QAChG,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC;SAClE;IACH,CAAC;CACF;AA3DD,kCA2DC","file":"pageHinkley.js","sourcesContent":["/** Page Hinkely algorithm, @todo remove trend influence */\nexport class PageHinkley {\n  delta: number;\n  lambda: number;\n  alpha: number;\n  threshold: number;\n  sum: number;\n  minSum: number;\n  useMin: boolean;\n  xMean: number;\n  num: number;\n  changeDetected: boolean;\n\n  constructor(delta = 0.005, lambda = 0.55, alpha = 0.92, threshold = 0.25, useMin = false) {\n    this.delta = delta;\n    this.lambda = lambda;\n    this.alpha = alpha;\n    this.threshold = threshold;\n    this.sum = 0;\n    this.xMean = 0;\n    this.num = 0;\n    this.minSum = 0;\n    this.useMin = useMin;\n    this.changeDetected = false;\n  }\n\n  _resetParams() {\n    this.num = 0;\n    this.xMean = 0;\n    this.sum = 0;\n    this.minSum = 0;\n  }\n\n  setInput(x: number) {\n    this._detectDrift(x);\n    return this.changeDetected;\n  }\n\n  _detectDrift(x: number) {\n    if (isNaN(x)) {\n      return;\n    }\n    this.num += 1;\n    this.xMean = (x + this.xMean * (this.num - 1)) / this.num;\n    this.sum = this.sum * this.alpha + (x - this.xMean);\n    if (this.sum > 0) {\n      this.sum -= this.delta;\n    } else {\n      this.sum += this.delta;\n    }\n    if (this.sum < this.minSum) {\n      this.minSum = this.sum;\n    }\n\n    this.changeDetected = (this.useMin ? this.sum - this.minSum : Math.abs(this.sum)) > this.lambda;\n    if (this.changeDetected) {\n      this._resetParams();\n      this.changeDetected = Math.abs(x - this.xMean) >= this.threshold;\n    }\n  }\n}\n"]}