{"version":3,"sources":["../src/atom/dataInsight/algorithms/drift/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * adwin and pageHinkley all based on super parmaeters, so it's difficult to use without data information\n */\nimport { isArray } from '@visactor/vutils';\nimport normalize from 'array-normalize';\nimport type { InsightAlgorithm } from '../../type';\nimport { InsightType, type DataInsightExtractContext, type Insight } from '../../type';\nimport { ChartType, type DataItem } from '../../../../types';\nimport { PageHinkley } from './pageHinkley';\nimport { getMeanAndstdDev } from '../statistics';\nimport { isPercenSeries } from '../../utils';\n\nexport interface PageHinkleyOptions {\n  delta?: number;\n  lambda?: number;\n  threshold?: number;\n}\nfunction difference(data: number[]) {\n  const diff = [];\n  for (let i = 1; i < data.length; i++) {\n    diff.push(data[i] - data[i - 1]);\n  }\n  return diff;\n}\n\nexport const pageHinkleyFunc = (context: DataInsightExtractContext, options: PageHinkleyOptions) => {\n  const result: Insight[] = [];\n  const { seriesDataMap, cell, spec } = context;\n  const { delta, lambda, threshold } = options || {};\n  const { y: celly } = cell;\n  const yField: string[] = isArray(celly) ? celly.flat() : [celly];\n\n  Object.keys(seriesDataMap).forEach(group => {\n    const dataset: { index: number; dataItem: DataItem }[] = seriesDataMap[group];\n    yField.forEach(field => {\n      if (isPercenSeries(spec, field)) {\n        return;\n      }\n      const pageHinkley = new PageHinkley(delta, lambda, threshold);\n      /** normalize will amplify differences in small stdDev */\n      const dataList = dataset.map(v => Number(v.dataItem[field]));\n      const { mean, stdDev } = getMeanAndstdDev(dataList);\n\n      const normalizedDataset = normalize([...dataList, mean + 2 * stdDev, mean - 2 * stdDev]);\n      normalizedDataset.pop();\n      normalizedDataset.pop();\n      const diffDataset = difference(normalizedDataset);\n      diffDataset.forEach((d, index) => {\n        const isDrift = pageHinkley.setInput(d);\n        if (isDrift) {\n          result.push({\n            type: InsightType.Outlier,\n            data: [dataset[index + 1]],\n            fieldId: field,\n            value: dataset[index + 1].dataItem[field],\n            significant: 1,\n            seriesName: group\n          } as unknown as Insight);\n        }\n      });\n    });\n  });\n  return result;\n};\n\nexport const PageHinkleyAlg: InsightAlgorithm = {\n  name: 'pageHinkley',\n  forceChartType: [ChartType.DualAxisChart, ChartType.LineChart, ChartType.BarChart, ChartType.AreaChart],\n  insightType: InsightType.Outlier,\n  algorithmFunction: pageHinkleyFunc,\n  supportPercent: false\n};\n"]}