{"version":3,"sources":["../src/atom/dataInsight/algorithms/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { AlgorithmType, InsightType, type DataInsightExtractContext, type Insight } from '../type';\nimport { AbnormalTrend } from './abnormalTrend';\nimport { ScatterPlotCorrelation } from './correlation/pearson';\nimport { LineChartCorrelation } from './correlation/spearman';\nimport { ExtremeValue } from './extremeValue';\nimport { LineChartMajorityValue } from './majorityValue';\nimport { DBSCANOutlier } from './outlier/dbscan';\nimport { LOFOutlier } from './outlier/lof';\nimport { OverallTrending } from './overallTrending';\nimport { TurningPoint } from './turningPoint';\nimport { Volatility } from './volatility';\nimport type { DataInsightOptions } from '../type';\nimport { StatisticsAlo } from './outlier/statistics';\nimport type { RevisedInsightParams } from './revised';\nimport { filterCorrelationInsight, filterInsightByType, mergePointInsight } from './revised';\nimport { DifferenceAlg } from './outlier/difference';\nimport { PageHinkleyAlg } from './drift';\nimport { generateInsightTemplate } from './template';\nimport { isPercentChart, isStackChart } from '../utils';\nimport { BaseStatistics } from './base/baseStatistics';\n\nconst algorithmMapping = {\n  [AlgorithmType.OverallTrending]: {\n    info: OverallTrending,\n    priority: 1\n  },\n  [AlgorithmType.AbnormalTrend]: {\n    info: AbnormalTrend,\n    priority: 2\n  },\n  [AlgorithmType.PearsonCorrelation]: {\n    info: ScatterPlotCorrelation,\n    priority: 3\n  },\n  [AlgorithmType.SpearmanCorrelation]: {\n    info: LineChartCorrelation,\n    priority: 4\n  },\n  [AlgorithmType.ExtremeValue]: {\n    info: ExtremeValue,\n    priority: 5\n  },\n  [AlgorithmType.MajorityValue]: {\n    info: LineChartMajorityValue,\n    priority: 6\n  },\n  [AlgorithmType.StatisticsAbnormal]: {\n    info: StatisticsAlo,\n    priority: 7\n  },\n  [AlgorithmType.LOFOutlier]: {\n    info: LOFOutlier,\n    priority: 8\n  },\n  [AlgorithmType.DifferenceOutlier]: {\n    info: DifferenceAlg,\n    priority: 9\n  },\n  [AlgorithmType.TurningPoint]: {\n    info: TurningPoint,\n    priority: 10\n  },\n  [AlgorithmType.PageHinkley]: {\n    info: PageHinkleyAlg,\n    priority: 10\n  },\n  [AlgorithmType.DbscanOutlier]: {\n    info: DBSCANOutlier,\n    priority: 11\n  },\n  [AlgorithmType.Volatility]: {\n    info: Volatility,\n    priority: 12\n  },\n  [AlgorithmType.StatisticsBase]: {\n    info: BaseStatistics,\n    priority: 13\n  }\n};\n\nconst InsightSortMapping = {\n  [InsightType.Min]: 0,\n  [InsightType.Max]: 0,\n  [InsightType.Avg]: 0,\n  [InsightType.Outlier]: 1,\n  [InsightType.PairOutlier]: 2,\n  [InsightType.AbnormalBand]: 10,\n  [InsightType.ExtremeValue]: 1,\n  [InsightType.TurningPoint]: 1,\n  [InsightType.MajorityValue]: 1,\n  [InsightType.AbnormalTrend]: 2,\n  [InsightType.OverallTrend]: 2,\n  [InsightType.Correlation]: 2,\n  [InsightType.Volatility]: 2\n};\n\nconst revisedInsightByTypeMapping: Record<\n  InsightType,\n  (revisedInsights: RevisedInsightParams, type: InsightType, ctx: DataInsightExtractContext) => RevisedInsightParams\n> = {\n  [InsightType.Outlier]: mergePointInsight,\n  [InsightType.PairOutlier]: null,\n  [InsightType.AbnormalBand]: null,\n  [InsightType.ExtremeValue]: filterInsightByType,\n  [InsightType.TurningPoint]: null,\n  [InsightType.MajorityValue]: filterInsightByType,\n  [InsightType.AbnormalTrend]: filterInsightByType,\n  [InsightType.OverallTrend]: filterInsightByType,\n  [InsightType.Correlation]: filterCorrelationInsight,\n  [InsightType.Volatility]: filterInsightByType,\n  [InsightType.Min]: filterInsightByType,\n  [InsightType.Max]: filterInsightByType,\n  [InsightType.Avg]: filterInsightByType\n};\n\nexport const getInsights = (context: DataInsightExtractContext, options: DataInsightOptions) => {\n  const { algorithms, maxNum, isLimitedbyChartType, detailMaxNum = [], language } = options;\n  const { chartType, cell, spec, originDataset } = context;\n  const insights: Insight[] = [];\n  const insightAlgorithmContext = { ...context, insights };\n  const isStack = isStackChart(spec, chartType, cell);\n  const isPercent = isPercentChart(spec, chartType, cell);\n\n  algorithms.sort(\n    (a: string, b: string) => (algorithmMapping as any)[a].priority - (algorithmMapping as any)[b].priority\n  );\n  algorithms.forEach(key => {\n    const algoInfo = algorithmMapping[key].info;\n    const {\n      chartType: algoSupportedChartType,\n      algorithmFunction,\n      forceChartType,\n      name,\n      canRun,\n      supportPercent,\n      supportStack\n    } = algoInfo;\n    if (\n      (!forceChartType || forceChartType.includes(chartType)) &&\n      (!isLimitedbyChartType || !algoSupportedChartType || algoSupportedChartType.includes(chartType)) &&\n      (!canRun || canRun(insightAlgorithmContext)) &&\n      ((isStack && supportStack !== false) || !isStack) &&\n      (!isPercent || (isPercent && supportPercent !== false))\n    ) {\n      const res = algorithmFunction(insightAlgorithmContext, options?.algorithmOptions?.[key]);\n      insights.push(\n        ...res.map(v => ({\n          ...v,\n          // transfer to origin dataset since dataset may number measurefields but string value in origin dataset\n          data: v.info?.isAxesArea\n            ? v.data\n            : (v.data || []).map(vv => ({\n                index: vv.index,\n                dataItem: originDataset[vv.index]\n              })),\n          name\n        }))\n      );\n    }\n  });\n\n  let res: RevisedInsightParams = {\n    insights\n  };\n  (Object.keys(revisedInsightByTypeMapping) as InsightType[]).forEach(type => {\n    const revisedFunc = revisedInsightByTypeMapping[type];\n    if (revisedFunc) {\n      res = revisedFunc(res, type, context);\n    }\n  });\n  const revisedInsights: Insight[] = [];\n  (Object.keys(revisedInsightByTypeMapping) as InsightType[]).forEach(type => {\n    revisedInsights.push(...res[type]);\n  });\n  //sort the insights according to significant\n  revisedInsights.sort((a, b) => {\n    const significant1 = a.significant ?? -1;\n    const significant2 = b.significant ?? -1;\n    return InsightSortMapping[a.type] > InsightSortMapping[b.type] ||\n      (InsightSortMapping[a.type] === InsightSortMapping[b.type] && significant2 - significant1 >= 0)\n      ? -1\n      : 1;\n  });\n  let afterLimitsInsights: Insight[] = [...revisedInsights];\n  detailMaxNum.forEach(item => {\n    const { types, maxNum } = item;\n    const filteredInsights = revisedInsights.filter(insight => types.includes(insight.type)).slice(maxNum);\n    afterLimitsInsights = afterLimitsInsights.filter(insight => !filteredInsights.includes(insight));\n  });\n  const finalInsights = generateInsightTemplate(\n    maxNum ? afterLimitsInsights.slice(0, maxNum) : afterLimitsInsights,\n    context,\n    language\n  );\n\n  return finalInsights;\n};\n"]}