{"version":3,"sources":["../src/atom/dataInsight/type.ts"],"names":[],"mappings":";;;AAiBA,IAAY,aAeX;AAfD,WAAY,aAAa;IACvB,iDAAgC,CAAA;IAChC,gDAA+B,CAAA;IAC/B,0DAAyC,CAAA;IACzC,4DAA2C,CAAA;IAC3C,8CAA6B,CAAA;IAC7B,gDAA+B,CAAA;IAC/B,0DAAyC,CAAA;IACzC,kDAAiC,CAAA;IACjC,gDAA+B,CAAA;IAC/B,0CAAyB,CAAA;IACzB,8CAA6B,CAAA;IAC7B,4CAA2B,CAAA;IAC3B,wDAAuC,CAAA;IACvC,0CAAyB,CAAA;AAC3B,CAAC,EAfW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAexB;AAkBD,IAAY,WAcX;AAdD,WAAY,WAAW;IACrB,0BAAW,CAAA;IACX,0BAAW,CAAA;IACX,0BAAW,CAAA;IACX,kCAAmB,CAAA;IACnB,2CAA4B,CAAA;IAC5B,6CAA8B,CAAA;IAC9B,+CAAgC,CAAA;IAChC,6CAA8B,CAAA;IAC9B,6CAA8B,CAAA;IAC9B,+CAAgC,CAAA;IAChC,6CAA8B,CAAA;IAC9B,0CAA2B,CAAA;IAC3B,wCAAyB,CAAA;AAC3B,CAAC,EAdW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QActB","file":"type.js","sourcesContent":["import type { Cell, ChartType } from '../../types/chart';\nimport type { DataCell, FieldInfo, DataTable, DataItem } from '../../types/base';\nimport type { AbnormalTrendOptions } from './algorithms/abnormalTrend';\nimport type { PearsonOptions } from './algorithms/correlation/pearson';\nimport type { OverallTrendingOptions } from './algorithms/overallTrending';\nimport type { SpearmanOptions } from './algorithms/correlation/spearman';\nimport type { ExtremeValueOptions } from './algorithms/extremeValue';\nimport type { MajorityValueOptions } from './algorithms/majorityValue';\nimport type { LOFOptions } from './algorithms/outlier/lof';\nimport type { DbscanOptions } from './algorithms/outlier/dbscan';\nimport type { VolatilityOptions } from './algorithms/volatility';\nimport type { StatisticsOptions } from './algorithms/outlier/statistics';\nimport type { DifferenceOptions } from './algorithms/outlier/difference';\nimport type { PageHinkleyOptions } from './algorithms/drift';\nimport type { BaseStatisticsOptions } from './algorithms/base/baseStatistics';\nimport type { BaseOptions } from '../../types/atom';\n\nexport enum AlgorithmType {\n  OverallTrending = 'overallTrend',\n  AbnormalTrend = 'abnormalTrend',\n  PearsonCorrelation = 'pearsonCorrelation',\n  SpearmanCorrelation = 'spearmanCorrelation',\n  ExtremeValue = 'extremeValue',\n  MajorityValue = 'majorityValue',\n  StatisticsAbnormal = 'statisticsAbnormal',\n  StatisticsBase = 'statisticsBase',\n  DbscanOutlier = 'dbscanOutlier',\n  LOFOutlier = 'lofOutlier',\n  TurningPoint = 'turningPoint',\n  PageHinkley = 'pageHinkley',\n  DifferenceOutlier = 'differenceOutlier',\n  Volatility = 'volatility'\n}\n\nexport interface AlgorithmOptions {\n  [AlgorithmType.OverallTrending]?: OverallTrendingOptions;\n  [AlgorithmType.AbnormalTrend]?: AbnormalTrendOptions;\n  [AlgorithmType.PearsonCorrelation]?: PearsonOptions;\n  [AlgorithmType.SpearmanCorrelation]: SpearmanOptions;\n  [AlgorithmType.ExtremeValue]?: ExtremeValueOptions;\n  [AlgorithmType.MajorityValue]?: MajorityValueOptions;\n  [AlgorithmType.StatisticsAbnormal]?: StatisticsOptions;\n  [AlgorithmType.LOFOutlier]?: LOFOptions;\n  [AlgorithmType.DifferenceOutlier]?: DifferenceOptions;\n  [AlgorithmType.TurningPoint]?: {};\n  [AlgorithmType.PageHinkley]?: PageHinkleyOptions;\n  [AlgorithmType.DbscanOutlier]: DbscanOptions;\n  [AlgorithmType.Volatility]: VolatilityOptions;\n  [AlgorithmType.StatisticsBase]?: BaseStatisticsOptions;\n}\nexport enum InsightType {\n  Min = 'min',\n  Max = 'max',\n  Avg = 'avg',\n  Outlier = 'outlier',\n  PairOutlier = 'pair_outlier',\n  ExtremeValue = 'extreme_value',\n  MajorityValue = 'majority_value',\n  TurningPoint = 'turning_point',\n  OverallTrend = 'overall_trend',\n  AbnormalTrend = 'abnormal_trend',\n  AbnormalBand = 'abnormal_band',\n  Correlation = 'correlation',\n  Volatility = 'volatility'\n}\n\nexport interface InsightTextContent {\n  value: DataCell;\n  formatValue?: string;\n  fieldName: string;\n  isMeasure?: boolean;\n  color?: string;\n  valueType?: 'ascendTrend' | 'descendTrend' | string;\n  icon?: 'ratio' | 'ascendTrend' | 'descendTrend' | string;\n  isDimValue?: boolean;\n}\n\nexport interface Insight {\n  name: string; // algorithm name\n  type: InsightType; // Insight type\n  data: {\n    // Abnormal data points\n    index: number; // The index of the data point in the dataset\n    dataItem: DataItem; // Data item\n  }[];\n  fieldId?: string; //abnormal field id\n  seriesName?: DataCell | DataCell[]; //series name\n  textContent?: {\n    // The text explanation of the insight, included variables placeholder\n    content: string;\n    // Plain text after parse variables placeholder into text\n    plainText: string;\n    variables?: Record<string, InsightTextContent>;\n  }; // The text array is composed of text fragments, and all elements in the array are combined to form a complete text.\n  value?: number | string; // The specific value of the insight\n  significant: number; // The prominence of insights, used for sorting\n  info?: { [key: string]: any }; //additional information about this insight\n}\n\nexport type InsightAlgorithm = {\n  name: string; //specific algorithm name of this insight algorithm\n  chartType?: ChartType[]; //supported chart type of this insight algorithm\n  forceChartType?: ChartType[]; //force chart type of this insight algorithm\n  /** support stack chart or not */\n  supportStack?: boolean;\n  /** support percent chart or not */\n  supportPercent?: boolean;\n  insightType: InsightType;\n  canRun?: (context: DataInsightExtractContext) => boolean;\n  algorithmFunction: (context: DataInsightExtractContext, options: any) => Insight[];\n};\n\nexport type DataProcessOutput = {\n  chartType: ChartType;\n  cell: DataCell;\n  fieldInfo: FieldInfo[];\n  dataTable: DataTable;\n  seriesDataMap: Record<string | number, { index: number; dataItem: DataItem }[]>;\n};\n\nexport type ExtractInsightOutput = {\n  insights: Insight[];\n};\n\nexport type GenerateTextOutput = {\n  insights: Insight[];\n  usage: any;\n};\n\nexport interface ChartDataItem {\n  index: number;\n  dataItem: DataItem;\n}\n\nexport type DimValueDataMap = Record<string | number, ChartDataItem[]>;\n\nexport interface AxesDataInfo {\n  dataset: DataTable;\n  seriesNames: string[];\n  series: any[];\n  seriesIndex: number;\n  seriesId: string;\n  dimensionDataMap: DimValueDataMap;\n  dimensionValues: DataCell[];\n  dimensionSumMap: Record<string, number[]>;\n  dimensionStackSumMap: Record<string, number[]>;\n  axisTitle: string | string[];\n  yField: string | string[];\n}\n\nexport interface DataInsightExtractContext {\n  dataset: DataTable;\n  originDataset: DataTable;\n  fieldInfo: FieldInfo[];\n  dimensionDataMap: DimValueDataMap;\n  dimensionSumMap: Record<string, number[]>;\n  dimensionStackSumMap: Record<string, number[]>;\n  dimensionValues: DataCell[];\n  seriesDataMap: DimValueDataMap;\n  chartType: ChartType;\n  cell: Cell;\n  spec: any;\n  insights?: Insight[];\n  leftAxesDataList?: AxesDataInfo;\n  rightAxesDataList?: AxesDataInfo;\n}\n\nexport interface DataInsightOptions extends BaseOptions {\n  /** max number of insight */\n  maxNum?: number;\n  /** detail number limits of insight, higher priority than maxNum */\n  detailMaxNum?: {\n    types: InsightType[];\n    maxNum: number;\n  }[];\n  /** using algorithms list */\n  algorithms?: AlgorithmType[];\n  /** options of each algorithms */\n  algorithmOptions?: AlgorithmOptions;\n  /** insight limited by chartType, eg. cluster only in scatter chart */\n  isLimitedbyChartType?: boolean;\n  /** polish insights by llm or not */\n  usePolish?: boolean;\n  /** add insights into spec */\n  enableInsightAnnotation?: boolean;\n}\n"]}