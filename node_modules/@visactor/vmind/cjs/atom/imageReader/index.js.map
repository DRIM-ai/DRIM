{"version":3,"sources":["../src/atom/imageReader/index.ts"],"names":[],"mappings":";;;AAAA,2CAA4C;AAE5C,kCAAmC;AAEnC,qCAA2C;AAE3C,gDAA6C;AAG7C,MAAa,WAAY,SAAQ,eAAqC;IAKpE,YAAY,OAAuB,EAAE,MAAmB;QACtD,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QALzB,SAAI,GAAG,eAAQ,CAAC,YAAY,CAAC;QAE7B,cAAS,GAAG,IAAI,CAAC;IAIjB,CAAC;IAED,cAAc,CAAC,KAAc;QAC3B,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QAC/B,OAAO;YACL;gBACE,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE,IAAA,wBAAe,GAAE;aAC3B;YACD;gBACE,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE;oBACP;wBACE,IAAI,EAAE,WAAW;wBACjB,SAAS,EAAE;4BACT,GAAG,EAAE,KAAK;yBACX;qBACF;oBACD;wBACE,IAAI,EAAE,MAAM;wBACZ,IAAI,EACF,yFAAyF;4BACzF,yCAAyC;qBAC5C;iBACF;aACF;SACF,CAAC;IACJ,CAAC;IAED,eAAe,CAAC,OAAY;QAC1B,IAAI,CAAC,OAAO,EAAE;YACZ,uCACK,IAAI,CAAC,OAAO,KACf,KAAK,EAAE,gBAAgB,IACvB;SACH;QACD,uCACK,IAAI,CAAC,OAAO,KACf,gBAAgB,EAAE,OAAO,IACzB;IACJ,CAAC;CACF;AAhDD,kCAgDC;AAEM,MAAM,uBAAuB,GAAG,GAAG,EAAE;IAC1C,iBAAO,CAAC,YAAY,CAClB,eAAQ,CAAC,YAAY,EACrB,WAA0E,CAC3E,CAAC;AACJ,CAAC,CAAC;AALW,QAAA,uBAAuB,2BAKlC","file":"index.js","sourcesContent":["import { AtomName } from '../../types/atom';\nimport type { BaseOptions } from '../../types';\nimport { BaseAtom } from '../base';\nimport type { LLMMessage } from '../../types/llm';\nimport { getSystemPrompt } from './prompt';\nimport type { ImageReaderCtx } from './interface';\nimport { Factory } from '../../core/factory';\nimport type { BaseAtomConstructor } from '../../types';\n\nexport class ImageReader extends BaseAtom<ImageReaderCtx, BaseOptions> {\n  name = AtomName.IMAGE_READER;\n\n  isLLMAtom = true;\n\n  constructor(context: ImageReaderCtx, option: BaseOptions) {\n    super(context, option);\n  }\n\n  getLLMMessages(query?: string): LLMMessage[] {\n    const { image } = this.context;\n    return [\n      {\n        role: 'system',\n        content: getSystemPrompt()\n      },\n      {\n        role: 'user',\n        content: [\n          {\n            type: 'image_url',\n            image_url: {\n              url: image\n            }\n          },\n          {\n            type: 'text',\n            text:\n              'Please read this image and generate a JSON based on the chart information in the image ' +\n              'that can be used to recreate the chart.'\n          }\n        ]\n      }\n    ];\n  }\n\n  parseLLMContent(resJson: any): ImageReaderCtx {\n    if (!resJson) {\n      return {\n        ...this.context,\n        error: 'Image is Empty'\n      };\n    }\n    return {\n      ...this.context,\n      simpleVChartSpec: resJson\n    };\n  }\n}\n\nexport const registerImageReaderAtom = () => {\n  Factory.registerAtom(\n    AtomName.IMAGE_READER,\n    ImageReader as unknown as BaseAtomConstructor<ImageReaderCtx, BaseOptions>\n  );\n};\n"]}