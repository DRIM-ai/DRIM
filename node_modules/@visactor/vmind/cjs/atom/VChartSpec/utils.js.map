{"version":3,"sources":["../src/atom/VChartSpec/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import { isArray, isNil, isPlainObject, isString, isValid, merge } from '@visactor/vutils';\nimport type { IVChartOperationItem } from '../../types/atom';\nimport { deleteByPath, set } from '../../utils/set';\n\nexport const validSeriesForChart: Record<\n  string,\n  {\n    series: string[];\n  }\n> = {\n  line: {\n    series: ['line']\n  },\n  area: {\n    series: ['area']\n  },\n  bar: {\n    series: ['bar']\n  },\n  bar3d: {\n    series: ['bar3d']\n  },\n  pie: {\n    series: ['pie']\n  },\n  pie3d: {\n    series: ['pie3d']\n  },\n  scatter: {\n    series: ['scatter']\n  },\n  funnel: {\n    series: ['funnel']\n  },\n  funnel3d: {\n    series: ['funnel3d']\n  },\n  map: {\n    series: ['map']\n  },\n  radar: {\n    series: ['radar']\n  },\n  wordCloud: {\n    series: ['wordCloud']\n  },\n  wordCloud3d: {\n    series: ['wordCloud3d']\n  },\n  heatmap: {\n    series: ['heatmap']\n  },\n  treemap: {\n    series: ['treemap']\n  },\n  gauge: {\n    series: ['gauge', 'gaugePointer']\n  },\n  rangeColumn: {\n    series: ['rangeColumn']\n  },\n  rangeColumn3d: {\n    series: ['rangeColumn3d']\n  },\n  rangeArea: {\n    series: ['rangeArea']\n  },\n  sequence: {\n    series: ['dot', 'link']\n  },\n  rose: {\n    series: ['rose']\n  },\n  circularProgress: {\n    series: ['circularProgress']\n  },\n  linearProgress: {\n    series: ['linearProgress']\n  },\n  boxPlot: {\n    series: ['boxPlot']\n  },\n  sankey: {\n    series: ['sankey']\n  },\n  gaugePointer: {\n    series: ['gaugePointer']\n  },\n  sunburst: {\n    series: ['sunburst']\n  },\n  circlePacking: {\n    series: ['circlePacking']\n  },\n  waterfall: {\n    series: ['waterfall']\n  },\n  correlation: {\n    series: ['correlation']\n  },\n  liquid: {\n    series: ['liquid']\n  },\n  venn: {\n    series: ['venn']\n  },\n  mosaic: {\n    series: ['mosaic']\n  },\n  histogram: {\n    series: ['bar']\n  },\n  histogram3d: {\n    series: ['bar3d']\n  },\n  pictogram: {\n    series: ['pictogram']\n  }\n};\n\nexport const getChartAxisType = (chartSpec: any) => {\n  if (\n    [\n      'bar',\n      'bar3d',\n      'line',\n      'scatter',\n      'area',\n      'boxPlot',\n      'histogram',\n      'histogram3d',\n      'mosaic',\n      'rangeArea',\n      'rangeColumn',\n      'rangeColumn3d',\n      'waterfall'\n    ].includes(chartSpec.type)\n  ) {\n    return 'cartesian';\n  }\n\n  if (['radar', 'rose'].includes(chartSpec.type)) {\n    return 'polar';\n  }\n\n  return 'none';\n};\n\nexport const aliasByComponentType: Record<\n  string,\n  {\n    isArray?: boolean;\n    aliasMap?: Record<string, { appendSpec?: any; filter?: (entry: any) => boolean }>;\n  }\n> = {\n  axes: {\n    isArray: true,\n    aliasMap: {\n      xAxis: {\n        appendSpec: { orient: 'bottom' }\n      },\n      yAxis: {\n        appendSpec: { orient: 'left' }\n      },\n      radiusAxis: {\n        appendSpec: { orient: 'radius' }\n      },\n      angleAxis: {\n        appendSpec: { orient: 'angle' }\n      },\n      leftAxis: {\n        appendSpec: { orient: 'left' }\n      },\n      rightAxis: {\n        appendSpec: { orient: 'right' }\n      },\n      topAxis: {\n        appendSpec: { orient: 'top' }\n      },\n      bottomAxis: {\n        appendSpec: { orient: 'bottom' }\n      },\n      allAxis: {\n        filter: (entry: any) => {\n          return true;\n        }\n      }\n    }\n  },\n\n  legends: {\n    aliasMap: {\n      discreteLegend: {\n        filter: (entry: any) => {\n          return isNil(entry.type) || entry.type === 'discrete';\n        }\n      },\n      colorLegend: {\n        appendSpec: { type: 'color' }\n      },\n\n      sizeLegend: {\n        appendSpec: { type: 'size' }\n      }\n    }\n  },\n\n  dataZoom: {\n    aliasMap: {\n      yDataZoom: {\n        appendSpec: { orient: 'left' },\n        filter: (entry: any) => {\n          return entry.orient === 'left';\n        }\n      },\n      xDataZoom: {\n        appendSpec: { orient: 'bottom' },\n        filter: (entry: any) => {\n          return entry.orient === 'bottom';\n        }\n      }\n    }\n  },\n\n  scrollBar: {\n    aliasMap: {\n      yScrollbar: {\n        appendSpec: { orient: 'right' },\n        filter: (entry: any) => {\n          return entry.orient === 'right';\n        }\n      },\n      xScrollbar: {\n        appendSpec: { orient: 'bottom' },\n        filter: (entry: any) => {\n          return entry.orient === 'bottom';\n        }\n      }\n    }\n  },\n\n  series: {\n    isArray: true,\n    aliasMap: {\n      lineSeries: {\n        appendSpec: {\n          type: 'line'\n        }\n      },\n      areaSeries: {\n        appendSpec: {\n          type: 'area'\n        }\n      },\n      barSeries: {\n        appendSpec: {\n          type: 'bar'\n        }\n      },\n      bar3dSeries: {\n        appendSpec: {\n          type: 'bar3d'\n        }\n      },\n      pieSeries: {\n        appendSpec: {\n          type: 'pie'\n        }\n      },\n      pie3dSeries: {\n        appendSpec: {\n          type: 'pie3d'\n        }\n      },\n      scatterSeries: {\n        appendSpec: {\n          type: 'scatter'\n        }\n      },\n      funnelSeries: {\n        appendSpec: {\n          type: 'funnel'\n        }\n      },\n      funnel3dSeries: {\n        appendSpec: {\n          type: 'funnel3d'\n        }\n      },\n      mapSeries: {\n        appendSpec: {\n          type: 'map'\n        }\n      },\n      radarSeries: {\n        appendSpec: {\n          type: 'radar'\n        }\n      },\n      wordCloudSeries: {\n        appendSpec: {\n          type: 'wordCloud'\n        }\n      },\n      wordCloud3dSeries: {\n        appendSpec: {\n          type: 'wordCloud3d'\n        }\n      },\n      heatmapSeries: {\n        appendSpec: {\n          type: 'heatmap'\n        }\n      },\n      treemapSeries: {\n        appendSpec: {\n          type: 'treemap'\n        }\n      },\n      gaugeSeries: {\n        appendSpec: {\n          type: 'gauge'\n        }\n      },\n      rangeColumnSeries: {\n        appendSpec: {\n          type: 'rangeColumn'\n        }\n      },\n      rangeColumn3dSeries: {\n        appendSpec: {\n          type: 'rangeColumn3d'\n        }\n      },\n      rangeAreaSeries: {\n        appendSpec: {\n          type: 'rangeArea'\n        }\n      },\n      dotSeries: {\n        appendSpec: {\n          type: 'dot'\n        }\n      },\n      geoSeries: {\n        appendSpec: {\n          type: 'geo'\n        }\n      },\n      linkSeries: {\n        appendSpec: {\n          type: 'link'\n        }\n      },\n      roseSeries: {\n        appendSpec: {\n          type: 'rose'\n        }\n      },\n      circularProgressSeries: {\n        appendSpec: {\n          type: 'circularProgress'\n        }\n      },\n      linearProgressSeries: {\n        appendSpec: {\n          type: 'linearProgress'\n        }\n      },\n      boxPlotSeries: {\n        appendSpec: {\n          type: 'boxPlot'\n        }\n      },\n      sankeySeries: {\n        appendSpec: {\n          type: 'sankey'\n        }\n      },\n      gaugePointerSeries: {\n        appendSpec: {\n          type: 'gaugePointer'\n        }\n      },\n      sunburstSeries: {\n        appendSpec: {\n          type: 'sunburst'\n        }\n      },\n      circlePackingSeries: {\n        appendSpec: {\n          type: 'circlePacking'\n        }\n      },\n      waterfallSeries: {\n        appendSpec: {\n          type: 'waterfall'\n        }\n      },\n      correlationSeries: {\n        appendSpec: {\n          type: 'correlation'\n        }\n      },\n      liquidSeries: {\n        appendSpec: {\n          type: 'liquid'\n        }\n      },\n      vennSeries: {\n        appendSpec: {\n          type: 'venn'\n        }\n      },\n      mosaicSeries: {\n        appendSpec: {\n          type: 'mosaic'\n        }\n      }\n    }\n  },\n\n  scales: {\n    isArray: true\n  },\n  customMark: {\n    isArray: true\n  },\n  background: {\n    isArray: false\n  },\n  player: {\n    isArray: false\n  },\n  crosshair: {},\n  region: {\n    isArray: true\n  },\n  title: {},\n  markLine: {},\n  markArea: {},\n  markPoint: {},\n  seriesStyle: {\n    isArray: true\n  },\n  tooltip: {\n    isArray: false\n  },\n  brush: {\n    isArray: false\n  },\n  label: {}\n};\n\nexport const removeUnneedArrayInSpec = (leafSpec: any, compKey: string, parentKeyPath: string) => {\n  if (compKey === parentKeyPath) {\n    return isArray(leafSpec) ? leafSpec[0] : leafSpec;\n  }\n\n  return leafSpec;\n};\n\nexport const findComponentNameByAlias = (alias: string) => {\n  if (aliasByComponentType[alias]) {\n    return alias;\n  }\n\n  const comp = Object.keys(aliasByComponentType).find(key => {\n    return !!aliasByComponentType[key]?.aliasMap?.[alias];\n  });\n\n  if (comp) {\n    return comp;\n  }\n\n  return alias;\n};\n\nconst ALIAS_NAME_KEY = '_alias_name';\n\nexport const parseAliasOfPath = (\n  parentKeyPath: string,\n  compKey: string,\n  chartSpec: any,\n  leafSpec: any,\n  op: 'add' | 'update' | 'delete' | 'deleteAll'\n) => {\n  const subPaths = parentKeyPath.split('.');\n  const aliasOptions = aliasByComponentType[compKey];\n\n  if (!aliasOptions) {\n    return { parentKeyPath };\n  }\n  const aliasName = subPaths[0].replace(/\\[\\d\\]/, '');\n  const isValidAlias = aliasOptions && aliasName && !!aliasOptions.aliasMap?.[aliasName];\n  let newLeafSpec = leafSpec;\n\n  if (subPaths.length === 1) {\n    newLeafSpec = isArray(leafSpec) ? leafSpec[0] : leafSpec;\n  }\n  const isTargetArray = (chartSpec[compKey] && isArray(chartSpec[compKey])) || aliasOptions?.isArray;\n  const specifiedIndexRes = /\\[(\\d+)\\]/.exec(subPaths[0]);\n  const specifiedIndex = specifiedIndexRes ? Number(specifiedIndexRes[1]) : -1;\n\n  // 路径中没包含序号\n  if (isTargetArray) {\n    // 加上序号，返回结果示例： `legends[0]`\n    if (op === 'add' && subPaths.length === 1) {\n      if (specifiedIndex >= 0 && (!chartSpec[compKey] || specifiedIndex <= chartSpec[compKey].length)) {\n        subPaths[0] = `${compKey}[${specifiedIndex}]`;\n      } else {\n        subPaths[0] = `${compKey}[${chartSpec[compKey]?.length ?? 0}]`;\n      }\n    } else {\n      if (specifiedIndex >= 0 && (!chartSpec[compKey] || specifiedIndex <= chartSpec[compKey].length - 1)) {\n        subPaths[0] = `${compKey}[${specifiedIndex}]`;\n      } else {\n        subPaths[0] = `${compKey}[0]`;\n      }\n    }\n  } else if (aliasOptions?.isArray !== false && op === 'add' && chartSpec[compKey]) {\n    // 扩展成数组，添加到第二个元素上\n    chartSpec[compKey] = [chartSpec[compKey]];\n    subPaths[0] = `${compKey}[1]`;\n  } else {\n    // 替换aliasName为compKey，返回结果示例： `legends`\n    subPaths[0] = compKey; // 替换aliasName为compKey\n  }\n\n  if (!isValidAlias || op === 'delete' || op === 'deleteAll') {\n    return { parentKeyPath: subPaths.join('.'), leafSpec: newLeafSpec };\n  }\n  const appendSpec = { ...aliasOptions.aliasMap[aliasName].appendSpec, [ALIAS_NAME_KEY]: aliasName };\n  const appendPath: string[][] = [];\n\n  if (chartSpec[compKey]) {\n    const isMatchComp = (comp: any) => {\n      const aliasEntry = aliasOptions.aliasMap[aliasName];\n\n      if (aliasEntry.filter) {\n        return aliasEntry.filter(comp);\n      } else if (aliasEntry.appendSpec) {\n        return Object.keys(aliasEntry.appendSpec).every((key: string) => {\n          return comp[key] === aliasEntry.appendSpec[key];\n        });\n      }\n\n      return false;\n    };\n\n    if (isArray(chartSpec[compKey])) {\n      // 根据别名查找需要修改的组件\n      let specifiedComps =\n        op !== 'add' ? chartSpec[compKey].filter((comp: any) => comp[ALIAS_NAME_KEY] === aliasName) : [];\n\n      if (op !== 'add' && !specifiedComps.length) {\n        specifiedComps = chartSpec[compKey].filter(isMatchComp);\n      }\n\n      if (specifiedComps.length) {\n        specifiedComps.forEach((comp: any) => {\n          const index = chartSpec[compKey].indexOf(comp);\n\n          const appended = [...subPaths];\n\n          appended[0] = `${compKey}[${index}]`;\n\n          appendPath.push(appended);\n        });\n      } else if (isValidAlias || op === 'add') {\n        const appended = [...subPaths];\n\n        appended[0] = `${compKey}[${chartSpec[compKey].length}]`;\n\n        appendPath.push(appended);\n      }\n    } else {\n      // 单个组件的配置，判断是否符合条件\n      if (isMatchComp(chartSpec[compKey]) && op !== 'add') {\n        const appended = [...subPaths];\n\n        appended[0] = `${compKey}`;\n\n        appendPath.push(appended);\n      } else {\n        // 扩展成数组\n        chartSpec[compKey] = [chartSpec[compKey]];\n        const appended = [...subPaths];\n\n        appended[0] = `${compKey}[1]`;\n\n        appendPath.push(appended);\n      }\n    }\n  } else if (aliasName === 'allAxis') {\n    // 这种情况需要特殊处理\n    const axisType = getChartAxisType(chartSpec);\n\n    if (axisType === 'cartesian') {\n      return {\n        aliasName: aliasName,\n        appendContent: [\n          {\n            appendPath: 'axes[0]',\n            appendSpec: { ...aliasByComponentType.axes.aliasMap.xAxis.appendSpec },\n            parentKeyPath: ['axes[0]', ...subPaths.slice(1)].join('.')\n          },\n          {\n            appendPath: 'axes[1]',\n            appendSpec: { ...aliasByComponentType.axes.aliasMap.yAxis.appendSpec },\n            parentKeyPath: ['axes[1]', ...subPaths.slice(1)].join('.')\n          }\n        ],\n        parentKeyPath: subPaths.join('.')\n      };\n    } else if (axisType === 'polar') {\n      return {\n        aliasName: aliasName,\n        appendContent: [\n          {\n            appendPath: 'axes[0]',\n            appendSpec: { ...aliasByComponentType.axes.aliasMap.radiusAxis.appendSpec },\n            parentKeyPath: ['axes[0]', ...subPaths.slice(1)].join('.')\n          },\n          {\n            appendPath: 'axes[1]',\n            appendSpec: { ...aliasByComponentType.axes.aliasMap.angleAxis.appendSpec },\n            parentKeyPath: ['axes[1]', ...subPaths.slice(1)].join('.')\n          }\n        ],\n        parentKeyPath: subPaths.join('.')\n      };\n    }\n  } else {\n    appendPath.push(subPaths);\n  }\n\n  return {\n    aliasName: aliasName,\n    appendContent: appendPath.map(path => {\n      return {\n        appendPath: path[0],\n        appendSpec,\n        parentKeyPath: path.join('.')\n      };\n    }),\n    parentKeyPath: subPaths.join('.')\n  };\n};\n\nexport const checkDuplicatedKey = (parentPath: string, key: string) => {\n  let isDuplicated = false;\n\n  if (parentPath === key) {\n    return {\n      remainKeyPath: ''\n    };\n  }\n\n  if (/^\\d$/.exec(key)) {\n    const indexString = `[${key}]`;\n\n    if (parentPath.startsWith(indexString)) {\n      isDuplicated = true;\n\n      if (isDuplicated) {\n        return {\n          remainKeyPath: parentPath.substring(indexString.length + 1)\n        };\n      }\n    }\n  }\n\n  if (parentPath.startsWith(`${key}`)) {\n    let remainKeyPath = parentPath.substring(key.length);\n\n    if (remainKeyPath[0] === '.') {\n      remainKeyPath = remainKeyPath.substring(1);\n    }\n\n    return {\n      remainKeyPath\n    };\n  } else if (parentPath.includes(`.${key}`)) {\n    const str = `.${key}`;\n    let remainKeyPath = parentPath.substring(parentPath.indexOf(str) + str.length);\n\n    if (remainKeyPath[0] === '.') {\n      remainKeyPath = remainKeyPath.substring(1);\n    }\n\n    return {\n      remainKeyPath\n    };\n  }\n\n  return null;\n};\n/**\n * 去除spec中包裹的`parentPath`\n */\nexport const reduceDuplicatedPath = (parentPath: string, spec: any): any => {\n  if (isPlainObject(spec) && parentPath) {\n    const keys = Object.keys(spec);\n\n    if (keys.length === 1) {\n      const res = checkDuplicatedKey(parentPath, keys[0]);\n\n      return res ? reduceDuplicatedPath(res.remainKeyPath, (spec as any)[keys[0]]) : spec;\n    } else if (keys.length > 1) {\n      const fixedKey = keys.find(k => checkDuplicatedKey(parentPath, k));\n\n      if (fixedKey) {\n        const res = checkDuplicatedKey(parentPath, fixedKey);\n\n        return reduceDuplicatedPath(res.remainKeyPath, (spec as any)[fixedKey]);\n      }\n    }\n  } else if (isArray(spec) && parentPath) {\n    const res = /^\\[((\\d)+)\\]/.exec(parentPath);\n\n    if (res) {\n      const remainPath = parentPath.substring(res[0].length + 1);\n      const val = spec[+res[1]] ?? spec[spec.length - 1];\n\n      return remainPath ? reduceDuplicatedPath(remainPath, val) : val;\n    }\n  }\n\n  return spec;\n};\n\n/**\n * 将大模型返回的spec中的函数字符串转换成函数\n * @param spec 转换后的spec\n * @returns\n */\nexport const convertFunctionString = (spec: any): any => {\n  if (isPlainObject(spec)) {\n    const newSpec: any = {};\n\n    Object.keys(spec).forEach(key => {\n      newSpec[key] = convertFunctionString((spec as any)[key]);\n    });\n\n    return newSpec;\n  } else if (isArray(spec)) {\n    return spec.map(convertFunctionString);\n  }\n\n  if (isString(spec)) {\n    if (spec.includes('=>') || spec.includes('function')) {\n      try {\n        // 将函数自浮窗转换成可执行的函数\n        return new Function(`return (${spec})`)();\n      } catch (e) {\n        return spec;\n      }\n    }\n  }\n\n  return spec;\n};\n\nexport const updateSpecByOperation = (prevSpec: any, op: IVChartOperationItem) => {\n  const newSpec = merge({}, prevSpec);\n\n  let parentKeyPath: string = op.target;\n  let updatedKeyPaths: string[] = null;\n  let leafSpec = op.value;\n  const aliasName = parentKeyPath.split('.')[0].replace(/\\[\\d\\]/, '');\n  const compKey = findComponentNameByAlias(aliasName);\n\n  if (compKey.startsWith('series') && newSpec.type !== 'common' && !newSpec.series) {\n    leafSpec = removeUnneedArrayInSpec(op.value, 'series', op.target);\n\n    parentKeyPath = parentKeyPath.indexOf('.') > 0 ? parentKeyPath.slice(parentKeyPath.indexOf('.') + 1) : '';\n  } else {\n    const aliasResult = parseAliasOfPath(parentKeyPath, compKey, newSpec, leafSpec, op.op);\n\n    if (aliasResult.appendContent) {\n      aliasResult.appendContent.forEach(entry => {\n        set(newSpec, entry.appendPath, entry.appendSpec);\n      });\n\n      if (aliasResult.appendContent.length) {\n        updatedKeyPaths = aliasResult.appendContent.map(entry => entry.parentKeyPath);\n      }\n    }\n\n    if (isValid(aliasResult.parentKeyPath)) {\n      parentKeyPath = aliasResult.parentKeyPath;\n    }\n\n    if (isValid(aliasResult.leafSpec)) {\n      leafSpec = aliasResult.leafSpec;\n    }\n\n    leafSpec = convertFunctionString(leafSpec);\n  }\n\n  if (op.op === 'add' || op.op === 'update') {\n    (updatedKeyPaths ?? [parentKeyPath]).forEach(kp => {\n      if (kp) {\n        set(newSpec, kp, leafSpec);\n      } else {\n        merge(newSpec, leafSpec);\n      }\n    });\n  } else if (op.op === 'delete') {\n    (updatedKeyPaths ?? [parentKeyPath]).forEach(kp => {\n      if (kp) {\n        deleteByPath(newSpec, kp);\n      }\n    });\n  } else if (op.op === 'deleteAll') {\n    (updatedKeyPaths ?? [parentKeyPath]).forEach(kp => {\n      if (kp) {\n        // 如果是删除所有的元素，并且最后的路径里面有数组下标，需要删除数组下标\n\n        deleteByPath(newSpec, kp.replace(/(\\[(\\d+)\\])$/, ''));\n      }\n    });\n  }\n\n  return {\n    newSpec,\n    code: 0\n  };\n};\n\nexport const runOperactionsOfSpec = (prevSpec: any, ops: IVChartOperationItem[]) => {\n  let spec = prevSpec;\n  const codes: number[] = [];\n\n  ops.forEach(op => {\n    const res = updateSpecByOperation(spec, op);\n\n    spec = res.newSpec;\n    codes.push(res.code);\n  });\n\n  return {\n    spec,\n    codes\n  };\n};\n"]}