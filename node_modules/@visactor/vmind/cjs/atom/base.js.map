{"version":3,"sources":["../src/atom/base.ts"],"names":[],"mappings":";;;;;;;;;;;;AAIA,6CAAyC;AAEzC,wCAAyC;AAGzC,6CAA0C;AAE1C,MAAa,QAAQ;IAuBnB,YAAY,OAAqB,EAAE,OAAmB;QArBtD,SAAI,GAAa,eAAQ,CAAC,IAAI,CAAC;QAsB7B,IAAI,CAAC,OAAO,GAAG,IAAA,cAAK,EAAC,EAAE,EAAE,IAAI,CAAC,mBAAmB,EAAE,EAAE,OAAO,CAAC,CAAC;QAC9D,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG;YACb,GAAG,EAAE,IAAI,GAAG,EAAE;YACd,MAAM,EAAE,EAAE;YACV,EAAE,EAAE,IAAI;SACT,CAAC;QACF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAc,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,SAAS,EAAE;YACvC,OAAO,CAAC,KAAK,CAAC,gCAAgC,IAAI,CAAC,IAAI,sBAAsB,CAAC,CAAC;SAChF;IACH,CAAC;IAES,aAAa,CAAC,OAAY;QAClC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,MAAM,YAAY,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QAChD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvC,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,YAAY,CAAC;IACjC,CAAC;IAED,IAAI,CAAC,EAAW;IAEhB,CAAC;IAED,IAAI,CAAC,EAAW;IAEhB,CAAC;IAED,mBAAmB,CAAC,OAAY;QAC9B,OAAO,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,IAAI,CAAC,OAAO,CAAC;IACjC,CAAC;IAED,mBAAmB;QACjB,OAAO;YACL,cAAc,EAAE,EAAE;SACd,CAAC;IACT,CAAC;IAED,aAAa,CAAC,OAAqB,EAAE,OAAiB;QACpD,IAAI,OAAO,EAAE;YACX,IAAI,OAAO,EAAE;gBACX,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;oBAC9B,IAAI,CAAC,OAAe,CAAC,CAAC,CAAC,GAAI,OAAe,CAAC,CAAC,CAAC,CAAC;gBACjD,CAAC,CAAC,CAAC;aACJ;iBAAM;gBACL,IAAI,CAAC,OAAO,GAAG,IAAA,cAAK,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;aACjD;SACF;QACD,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,aAAa,CAAC,OAAmB;QAC/B,IAAI,CAAC,OAAO,GAAG,IAAA,cAAK,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAED,KAAK,CAAC,OAAsB;QAC1B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAc,CAAC,CAAC;QACxD,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,mBAAmB;QACjB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAGD,wBAAwB,CAAC,OAAY;QACnC,OAAO,KAAK,CAAC;IACf,CAAC;IAUK,GAAG,CAAC,SAAsE;;;YAC9E,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,SAAS,IAAI,EAAE,CAAC;YACrD,IAAI,CAAC,CAAC,QAAQ,EAAE;gBACd,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;aAC7B;YACD,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC5B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC;YAClC,IAAI;gBACF,IAAI,CAAC,YAAY,EAAE,CAAC;gBACpB,IAAI,IAAI,CAAC,SAAS,IAAI,KAAK,EAAE;oBAC3B,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;oBAC9B,IAAI,CAAC,cAAc,EAAE,CAAC;oBACtB,OAAO,IAAI,CAAC,OAAO,CAAC;iBACrB;gBACD,IAAI,IAAI,CAAC,SAAS,EAAE;oBAClB,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;oBACvC,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBAC9C,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;oBAC5E,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBACjD,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBACnD,IAAI,OAAO,CAAC,KAAK,KAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,CAAA,EAAE;wBAChC,OAAO,IAAI,CAAC,eAAe,CAAC,MAAA,OAAO,CAAC,KAAK,mCAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,CAAC,CAAC;qBAC3D;oBACD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;oBAC7B,IAAI,CAAC,aAAa,iCACb,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,KAChD,KAAK,EAAG,IAAoB,aAApB,IAAI,uBAAJ,IAAI,CAAkB,KAAK,IACnC,CAAC;oBACH,IAAI,CAAC,cAAc,EAAE,CAAC;iBACvB;qBAAM;oBACL,IAAI,CAAC,cAAc,EAAE,CAAC;iBACvB;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,IAAI,CAAC,eAAe,CAAC,KAAe,CAAC,CAAC;aAC9C;YACD,OAAO,IAAI,CAAC,OAAO,CAAC;;KACrB;IAES,YAAY;QACpB,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAES,eAAe,CAAC,KAAa;QACrC,IAAI,CAAC,aAAa,CAAC,EAAE,KAAK,EAAE,gBAAgB,IAAI,CAAC,IAAI,MAAM,KAAK,EAAE,EAAS,CAAC,CAAC;QAC7E,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAOK,WAAW,CAAC,KAAa;;YAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAC5C,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC9C,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;YAC5E,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACjD,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACnD,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;gBACpC,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBACpC,IAAI,CAAC,aAAa,iCAAM,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAE,KAAK,EAAG,IAAoB,aAApB,IAAI,uBAAJ,IAAI,CAAkB,KAAK,IAAG,CAAC;aAC/G;iBAAM;gBACL,IAAI,CAAC,aAAa,CAAC,EAAE,KAAK,EAAE,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,MAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,KAAK,CAAA,EAAS,CAAC,CAAC;aACzE;YACD,OAAO,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;KAAA;IAES,cAAc;QACtB,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAES,qBAAqB,CAAC,KAAc;QAC5C,OAAO,KAAK;YACV,CAAC,CAAC;gBACE,GAAG,IAAI,CAAC,SAAS;gBACjB;oBACE,IAAI,EAAE,MAAe;oBACrB,OAAO,EAAE,KAAK;iBACf;aACF;YACH,CAAC,CAAC,EAAE,CAAC;IACT,CAAC;IAES,cAAc,CAAC,KAAc;QACrC,OAAO,EAAE,CAAC;IACZ,CAAC;IAES,gBAAgB;;QACxB,OAAO,MAAA,IAAI,CAAC,OAAO,0CAAE,KAAK,CAAC;IAC7B,CAAC;IAES,eAAe,CAAC,OAAY,EAAE,QAAc,EAAE,MAAoB;QAC1E,yBAAY,IAAI,CAAC,OAAO,EAAG;IAC7B,CAAC;IAGS,iBAAiB,CAAC,IAAiB,EAAE,KAAc;QAC3D,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;QAC5C,MAAM,YAAY,GAAe;YAC/B,IAAI,EAAE,WAAW;YACjB,OAAO,EAAE,WAAW;SACrB,CAAC;QACF,IAAI,CAAC,KAAK,EAAE;YAEV,IAAI,CAAC,SAAS,GAAG,CAAC,YAAY,CAAC,CAAC;SACjC;aAAM;YAEL,IAAI,CAAC,SAAS,CAAC,IAAI,CACjB;gBACE,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,WAAW;aACrB,EACD,YAAY,CACb,CAAC;SACH;IACH,CAAC;IAED,YAAY,CAAC,QAAsB;QACjC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,YAAY;QACV,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5B,CAAC;CACF;AA/OD,4BA+OC;AAEM,MAAM,gBAAgB,GAAG,GAAG,EAAE;IACnC,iBAAO,CAAC,YAAY,CAAC,eAAQ,CAAC,IAAI,EAAE,QAAoE,CAAC,CAAC;AAC5G,CAAC,CAAC;AAFW,QAAA,gBAAgB,oBAE3B","file":"base.js","sourcesContent":["/**\n * Base Class of Atom Module\n */\n\nimport { merge } from '@visactor/vutils';\nimport type { BaseContext, BaseOptions } from '../types';\nimport { AtomName } from '../types/atom';\nimport type { LLMMessage, LLMResponse, ToolMessage } from '../types/llm';\nimport type { BaseAtomConstructor } from '../types';\nimport { Factory } from '../core/factory';\n\nexport class BaseAtom<Ctx extends BaseContext, O extends BaseOptions> {\n  /** name */\n  name: AtomName = AtomName.BASE;\n  /** context before atom execute */\n  protected originContext: Ctx;\n  /** current context to self-update */\n  protected context: Ctx;\n  /** llm response and user's query */\n  protected responses: LLMMessage[];\n  /** base Options */\n  options: O;\n  /** is based on LLM */\n  isLLMAtom: boolean;\n  /** historys of context update */\n  history: {\n    /** map of history context */\n    map: Map<number, Ctx>;\n    /** id of history Step */\n    idList: number[];\n    /** current id */\n    id: number;\n  };\n\n  constructor(context: Partial<Ctx>, options: Partial<O>) {\n    this.options = merge({}, this.buildDefaultOptions(), options);\n    this.responses = [];\n    this.history = {\n      map: new Map(),\n      idList: [],\n      id: null\n    };\n    this.setNewContext(this.buildDefaultContext(context as any));\n    if (!this.options.llm && this.isLLMAtom) {\n      console.error(`Does\\'t support LLM Mange in ${this.name} Atom which need LLM`);\n    }\n  }\n\n  protected setNewContext(context: Ctx) {\n    this.context = context;\n    const newHistoryId = (this.history.id || 0) + 1;\n    this.history.map.set(newHistoryId, context);\n    this.history.idList.push(newHistoryId);\n    this.history.id = newHistoryId;\n  }\n\n  undo(id?: string) {\n    /** todo */\n  }\n\n  redo(id?: string) {\n    /** todo */\n  }\n\n  buildDefaultContext(context: Ctx) {\n    return context ?? this.context;\n  }\n\n  buildDefaultOptions(): O {\n    return {\n      maxMessagesCnt: 10\n    } as O;\n  }\n\n  updateContext(context: Partial<Ctx>, replace?: boolean) {\n    if (context) {\n      if (replace) {\n        Object.keys(context).forEach(k => {\n          (this.context as any)[k] = (context as any)[k];\n        });\n      } else {\n        this.context = merge({}, this.context, context);\n      }\n    }\n    return this.context;\n  }\n\n  updateOptions(options: Partial<O>) {\n    this.options = merge({}, this.options, options);\n  }\n\n  reset(context?: Partial<Ctx>) {\n    this.context = this.buildDefaultContext(context as any);\n    this.responses = [];\n    this.history.map.clear();\n    this.history.idList = [];\n    this.history.id = null;\n  }\n\n  getContext() {\n    return this.context;\n  }\n\n  getContextBeforeRun() {\n    return this.originContext;\n  }\n\n  /** check should run or not when context in schdule changed */\n  shouldRunByContextUpdate(context: Ctx) {\n    return false;\n  }\n\n  /**\n   * run atom function to update context\n   * @param userInput\n   * @param userInput.context new context to update\n   * @param userInput.query user's query to adjust context\n   * @param userInput.messages user's history messages\n   * @returns new context after execute atom function\n   */\n  async run(userInput?: { context?: Ctx; query?: string; messages?: LLMMessage[] }) {\n    const { context, query, messages } = userInput || {};\n    if (!!messages) {\n      this.setResponses(messages);\n    }\n    this.context.error = null;\n    this.updateContext(context);\n    this.originContext = this.context;\n    try {\n      this.runBeforeLLM();\n      if (this.isLLMAtom && query) {\n        await this.runWithChat(query);\n        this._runWithOutLLM();\n        return this.context;\n      }\n      if (this.isLLMAtom) {\n        const messages = this.getLLMMessages();\n        const functionCalls = this.getFunctionCalls();\n        const data = await this.options.llm.run(this.name, messages, functionCalls);\n        const resJson = this.options.llm.parseJson(data);\n        const toolJson = this.options.llm.parseTools(data);\n        if (resJson.error || data?.error) {\n          return this.runWithLLMError(resJson.error ?? data?.error);\n        }\n        this.recordLLMResponse(data);\n        this.setNewContext({\n          ...this.parseLLMContent(resJson, toolJson, data),\n          usage: (data as LLMResponse)?.usage\n        });\n        this._runWithOutLLM();\n      } else {\n        this._runWithOutLLM();\n      }\n    } catch (error) {\n      return this.runWithLLMError(error as string);\n    }\n    return this.context;\n  }\n\n  protected runBeforeLLM() {\n    return this.context;\n  }\n\n  protected runWithLLMError(error: string) {\n    this.updateContext({ error: `LLM Error in ${this.name}.\\n${error}` } as any);\n    console.error(this.context.error);\n    return this.context;\n  }\n\n  /**\n   * after run function, user can adjust context result by multi-turn dialogue\n   * @param query user's new query\n   * @returns new context after execute\n   */\n  async runWithChat(query: string) {\n    const messages = this.getLLMMessages(query);\n    const functionCalls = this.getFunctionCalls();\n    const data = await this.options.llm.run(this.name, messages, functionCalls);\n    const resJson = this.options.llm.parseJson(data);\n    const toolJson = this.options.llm.parseTools(data);\n    if (!resJson.error && !resJson.error) {\n      this.recordLLMResponse(data, query);\n      this.setNewContext({ ...this.parseLLMContent(resJson, toolJson, data), usage: (data as LLMResponse)?.usage });\n    } else {\n      this.updateContext({ error: resJson?.error || toolJson?.error } as any);\n    }\n    return this.context;\n  }\n\n  protected _runWithOutLLM(): Ctx {\n    return this.context;\n  }\n\n  protected getHistoryLLMMessages(query?: string): LLMMessage[] {\n    return query\n      ? [\n          ...this.responses,\n          {\n            role: 'user' as const,\n            content: query\n          }\n        ]\n      : [];\n  }\n\n  protected getLLMMessages(query?: string): LLMMessage[] {\n    return [];\n  }\n\n  protected getFunctionCalls(): ToolMessage[] {\n    return this.options?.tools;\n  }\n\n  protected parseLLMContent(resJson: any, toolJson?: any, llmRes?: LLMResponse) {\n    return { ...this.context };\n  }\n\n  /** record LLM response and user's query to multi-turn dialog */\n  protected recordLLMResponse(data: LLMResponse, query?: string) {\n    const newResponse = data.choices[0].message;\n    const assistantMsg: LLMMessage = {\n      role: 'assistant',\n      content: newResponse\n    };\n    if (!query) {\n      // record with out uesr's query, it's new to record\n      this.responses = [assistantMsg];\n    } else {\n      // record a round of conversation\n      this.responses.push(\n        {\n          role: 'user',\n          content: newResponse\n        },\n        assistantMsg\n      );\n    }\n  }\n\n  setResponses(messages: LLMMessage[]) {\n    this.responses = messages;\n  }\n\n  getResponses() {\n    return this.responses;\n  }\n\n  clearHistory() {\n    this.responses.length = 0;\n  }\n}\n\nexport const registerBaseAtom = () => {\n  Factory.registerAtom(AtomName.BASE, BaseAtom as unknown as BaseAtomConstructor<BaseContext, BaseOptions>);\n};\n"]}