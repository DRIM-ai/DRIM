{"version":3,"sources":["../src/types/atom.ts"],"names":[],"mappings":";;;AA8EA,IAAY,QAeX;AAfD,WAAY,QAAQ;IAClB,yBAAa,CAAA;IACb,wCAA4B,CAAA;IAC5B,oCAAwB,CAAA;IACxB,qDAAyC,CAAA;IACzC,oCAAwB,CAAA;IACxB,0CAA8B,CAAA;IAC9B,2DAA+C,CAAA;IAC/C,4CAAgC,CAAA;IAChC,wCAA4B,CAAA;IAC5B,wCAA4B,CAAA;IAC5B,qDAAyC,CAAA;IACzC,2CAA+B,CAAA;IAC/B,uCAA2B,CAAA;IAC3B,wCAA4B,CAAA;AAC9B,CAAC,EAfW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAenB","file":"atom.js","sourcesContent":["/** Atom Function Types */\nimport type { Cell, ChartType } from './chart';\nimport type { FieldInfo, DataTable } from './base';\nimport type { Insight } from '../atom/dataInsight/type';\nimport type { ILLMManage, ToolMessage, LLMMessage } from '../types/llm';\nimport type { SimpleVChartSpec } from '../atom/imageReader/interface';\n\nexport interface BaseOptions {\n  /** llm manage instance */\n  llm?: ILLMManage;\n  /** function calls */\n  tools?: ToolMessage[];\n  /** show llm thoughs or not */\n  showThoughts?: boolean;\n  /** answer language */\n  language?: 'chinese' | 'english';\n  /** max history messages saved */\n  maxMessagesCnt?: number;\n}\n\nexport interface DataExtractionOptions extends BaseOptions {\n  reGenerateFieldInfo?: boolean;\n  isMultiple?: boolean;\n}\n\nexport interface ChartCommandOptions extends BaseOptions {\n  useDataTable?: boolean;\n  filterByRule?: boolean;\n}\n\nexport type RangeValueTransferType = 'string' | 'filter' | 'avg' | 'max' | 'min' | 'first' | 'last';\n\nexport interface DataCleanOptions extends BaseOptions {\n  needNumericalFields?: boolean;\n  filterSameValueColumn?: boolean;\n  measureAutoTransfer?: boolean;\n  filterSameDataItem?: boolean;\n  filterRowWithEmptyValues?: boolean;\n  rangeValueTransfer?: RangeValueTransferType;\n  hierarchicalClustering?: boolean;\n  clusterThreshold?: number;\n}\n\nexport interface MultipleDataCleanOptions extends DataCleanOptions {\n  filterRatioInDataset?: number;\n}\n\nexport interface DataQueryOptions extends BaseOptions {\n  /** use SQL to execute data query or not */\n  useSQL?: boolean;\n}\n\nexport interface SpecInsightOptions extends BaseOptions {\n  defaultMarkerLineStyle?: any;\n  defaultMarkerSymbolStyle?: any;\n  diffMarkerSymbolStyle?: any;\n  labelBackground?: any;\n  defaultOffsetInGrowthMarkLine?: number;\n}\n\nexport interface CustomPromptOptions extends BaseOptions {\n  /** prompt template */\n  promptTemplate: string;\n}\n\nexport interface SchemaFieldInfo extends Pick<FieldInfo, 'description' | 'role' | 'location' | 'type'> {\n  id: string;\n  /** aliasName */\n  alias?: string;\n  /** show or not */\n  visible?: boolean;\n}\n\nexport type VizSchema = {\n  chartType?: string;\n  fields: SchemaFieldInfo[];\n};\n\nexport enum AtomName {\n  BASE = 'base',\n  DATA_EXTRACT = 'dataExtract',\n  DATA_CLEAN = 'dataClean',\n  MULTIPLE_DATA_CLEAN = 'multipleDataClean',\n  DATA_QUERY = 'dataQuery',\n  CHART_COMMAND = 'chartCommand',\n  MULTIPLE_CHART_COMMAND = 'multipleChartCommand',\n  CHART_GENERATE = 'chartGenerate',\n  DATA_INSIGHT = 'dataInsight',\n  SPEC_INSIGHT = 'specInsight',\n  CHART_QA_EXTRACTION = 'chartQAExtraction',\n  CUSTOM_PROMPT = 'custom_prompt',\n  VCHART_SPEC = 'vchart_spec',\n  IMAGE_READER = 'imageReader'\n}\n\nexport interface Usage {\n  prompt_tokens: number;\n  completion_tokens: number;\n  total_tokens: number;\n}\n/** Base LLM Context */\nexport interface BaseContext {\n  /** response logId in chat */\n  logId?: string;\n  /** response id in chat */\n  id?: string;\n  /** user query */\n  query?: string;\n  /** llm response content */\n  response?: string;\n  /** error info */\n  error?: string;\n  /** prompt usage */\n  usage?: Usage;\n  /** LLM thoughts */\n  thoughts?: string;\n  /** function call res */\n  toolRes?: any;\n}\n\nexport interface ClusterDataView {\n  /** cluster result */\n  dataTable: DataTable;\n  /** cluster field */\n  fieldInfo: FieldInfo[];\n  /** valid count of measure fields */\n  validColumnLength: number;\n  /** table row length */\n  validRowLength: number;\n  /** valid cell count */\n  validCellCount: number;\n  /** valid measure cell count */\n  validMeasureCellCount: number;\n}\n\n/** Multiple Dataset */\nexport interface DatasetFromText {\n  /** text object of data extraction */\n  text?: string;\n  /** summary of dataset */\n  summary: string;\n  /** data table of dataset */\n  dataTable: DataTable;\n  /** field info of dataset */\n  fieldInfo: FieldInfo[];\n  /** data position in text */\n  textRange?: [string, string];\n}\n\n/** Context of Data Extraction Atom */\nexport interface DataExtractionCtx extends BaseContext {\n  /** text object of data extraction */\n  text: string;\n  /** extra fieldsInfo of dataTable */\n  fieldInfo?: FieldInfo[];\n  /** Data Table values */\n  dataTable?: DataTable;\n  /** multiple results */\n  datasets?: DatasetFromText[];\n}\n\n/** Context of Chart Command Atom */\nexport interface ChartCommandCtx extends BaseContext {\n  /** text object of data extraction */\n  text: string;\n  /** summary of data table */\n  summary?: string;\n  /** extra fieldsInfo of dataTable */\n  fieldInfo?: FieldInfo[];\n  /** Data Table values */\n  dataTable?: DataTable;\n  /** command */\n  command: string;\n}\n\nexport interface DataCleanCtx extends BaseContext {\n  /** extra fieldsInfo of dataTable */\n  fieldInfo?: FieldInfo[];\n  /** Data Table values */\n  dataTable?: DataTable;\n  /** clutser result */\n  clusterResult?: ClusterDataView[];\n  /** original data table */\n  originalDataTable?: DataTable;\n}\n\nexport interface MultipleDataCleanCtx extends BaseContext {\n  /** multiple dataset */\n  datasets: DatasetFromText[];\n}\n\nexport interface MultipleChartCommandsCtx extends BaseContext {\n  /** multiple dataset */\n  datasets: DatasetFromText[];\n  /** commands */\n  commands: string[];\n}\n\n/** Context of Data Query Atom */\nexport interface DataQueryCtx extends BaseContext {\n  /** current summary of dataTable */\n  dataTableSummary?: string;\n  /** extra fieldsInfo of dataTable */\n  fieldInfo?: FieldInfo[];\n  /** fieldsInfo of sql query result */\n  llmFieldInfo?: FieldInfo[];\n  /** Data Table values */\n  dataTable: DataTable;\n  /** user's command */\n  command: string;\n  /** sql */\n  sql?: string;\n}\n\n/** Context of Chart Generator Atom */\nexport interface ChartGeneratorCtx extends BaseContext {\n  /** extra fieldsInfo of dataTable */\n  fieldInfo?: FieldInfo[];\n  /** Data Table values */\n  dataTable: DataTable;\n  /** command */\n  command: string;\n  /** chart type generator result */\n  chartType?: ChartType;\n  /** field mapping result */\n  cell: Cell;\n  /** vizSchema */\n  vizSchema?: VizSchema;\n  /** chart spec */\n  spec: any;\n  /** chart advistor result */\n  chartAdvistorRes?: {\n    chartType: ChartType;\n    spec: any;\n    score: number;\n  }[];\n  /**\n   * simple vchart spec\n   * 可以用于生成详细的vchart配置\n   */\n  simpleVChartSpec?: SimpleVChartSpec;\n  /** animation config */\n  time?: { totalTime: number; frameArr: any[] };\n}\n\nexport interface DataInsightCtx extends BaseContext {\n  /** spec of chart */\n  spec?: any;\n  /** data tabel */\n  dataTable?: DataTable;\n  /** fieldsInfo of dataTable */\n  fieldInfo?: FieldInfo[];\n  /** final insight */\n  insights: Insight[];\n  /** chartType of vchart */\n  vChartType?: string;\n  /** chartType */\n  chartType?: ChartType;\n}\n\nexport interface SpecInsightCtx extends BaseContext {\n  /** spec of chart */\n  spec?: any;\n  /** final insight */\n  insights: Insight[];\n  /** chartType */\n  chartType?: ChartType;\n  /** spec added with insights */\n  newSpec?: any;\n}\n\nexport interface ChartQAExtractionCtx extends BaseContext {\n  text: string;\n  question: string;\n  answer: string;\n  keyList: string[];\n  explanation: string;\n}\n\n/**\n * 更新vchart spec 的原子操作\n */\nexport interface IVChartOperationItem {\n  /**\n   * The type of operation to perform.\n   * - \"add\": Add a new field or array element.\n   * - \"update\": Update an existing field or array element.\n   * - \"delete\": Remove an existing field or array element.\n   */\n  op: 'add' | 'update' | 'delete' | 'deleteAll';\n  /**\n   * The target location of the operation in the DSL.\n   * - Use dot notation for nested fields (e.g., \"settings.theme.color\").\n   * - Use square brackets for array indices (e.g., \"data[2]\").\n   */\n  target: string;\n  /**\n   * The value to be added or updated\n   */\n  value?: any;\n}\n\nexport interface VChartSpecCtx extends BaseContext {\n  /**\n   * the original spec\n   */\n  originalSpec: any;\n  /**\n   * the latest spec\n   */\n  spec?: any;\n  /**\n   * the spec before operations\n   */\n  prevSpec?: any;\n  /**\n   * The operations to be performed on the spec\n   */\n  operations?: IVChartOperationItem[];\n  /**\n   * the result of operations\n   */\n  opertationsResult?: number[];\n}\n\nexport interface DialogueChartCtx extends BaseContext {\n  spec: any;\n  oneSpec: any;\n}\n\nexport interface IBaseAtom<Ctx extends BaseContext, O extends BaseOptions> {\n  name: string;\n  options: O;\n  isLLMAtom: boolean;\n  history: {\n    map: Map<number, Ctx>;\n    idList: number[];\n    id: number;\n  };\n\n  undo: (id?: string) => void;\n  redo: (id?: string) => void;\n  buildDefaultContext: (context: Ctx) => Ctx;\n  buildDefaultOptions: () => O;\n  updateContext: (context: Partial<Ctx>, replace?: boolean) => Ctx;\n  updateOptions: (options: Partial<O>) => void;\n  reset: (context?: Partial<Ctx>) => void;\n  getContext: () => Ctx;\n  getContextBeforeRun: () => Ctx;\n  shouldRunByContextUpdate: (context: Ctx) => boolean;\n  run: (userInput?: { context?: Ctx; query?: string; messages?: ILLMManage[] }) => Promise<Ctx>;\n  runWithChat: (query: string) => Promise<Ctx>;\n  setResponses: (messages: LLMMessage[]) => void;\n  getResponses: () => LLMMessage[];\n  clearHistory: () => void;\n}\n\nexport interface BaseAtomConstructor<Ctx extends BaseContext = BaseContext, O extends BaseOptions = BaseOptions> {\n  new (context: Partial<Ctx>, options: Partial<O>): IBaseAtom<Ctx, O>;\n}\n"]}