{"version":3,"sources":["../src/utils/dataTable.ts"],"names":[],"mappings":"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","file":"dataTable.js","sourcesContent":["import { DataSet, DataView, csvParser, fold as vdatasetFold } from '@visactor/vdataset';\nimport { getFieldInfo } from './field';\nimport { DataType } from '../types';\nimport { isArray, isNil, isNumber } from '@visactor/vutils';\nimport { FOLD_NAME, FOLD_VALUE, fold } from '@visactor/chart-advisor';\nimport { ROLE, type DataItem, type DataTable, type FieldInfo } from '../types';\n\nexport const parseCSVWithVChart = (csvString: string) => {\n  //Parse csv string to VChart Dataview so it can be directly used in VChart spec\n  const dataSet = new DataSet();\n  dataSet.registerParser('csv', csvParser);\n  dataSet.registerTransform('fold', vdatasetFold);\n  const dataView = new DataView(dataSet, { name: 'data' });\n  dataView.parse(csvString, {\n    type: 'csv'\n  });\n  return dataView;\n};\n\nexport const getDataset = (csvString: string): { dataset: DataItem[]; columns: string[] } => {\n  //get dataset from csv string\n  const dataView = parseCSVWithVChart(csvString);\n  const { columns, ...dataColumns } = dataView.latestData;\n  const dataset = Object.keys(dataColumns).map(key => dataColumns[key]);\n  return { dataset, columns };\n};\n\n/**\n * convert number string to number in dataset\n */\nexport const convertNumberField = (dataset: DataItem[], fieldInfo: FieldInfo[]) => {\n  const numberFields = fieldInfo\n    .filter(field => [DataType.INT, DataType.FLOAT].includes(field.type))\n    .map(field => field.fieldName);\n  dataset.forEach(d => {\n    numberFields.forEach(numberField => {\n      if (!isNil(d[numberField])) {\n        d[numberField] = Number(d[numberField]);\n      }\n    });\n  });\n  return dataset;\n};\n\nexport const parseCSVData = (csvString: string): { fieldInfo: FieldInfo[]; dataset: DataItem[] } => {\n  //parse the CSV string to get information about the fields(fieldInfo) and dataset object\n  const { dataset, columns } = getDataset(csvString);\n  const fieldInfo = getFieldInfo(dataset, columns);\n  convertNumberField(dataset, fieldInfo);\n  return { fieldInfo, dataset };\n};\n\nexport const foldDatasetByYField = (\n  dataset: DataItem[],\n  yFieldList: string[],\n  fieldInfo: FieldInfo[],\n  foldName: any = FOLD_NAME,\n  foldValue: any = FOLD_VALUE\n) => {\n  const aliasMap = Object.fromEntries(fieldInfo.map(d => [d.fieldName, d.fieldName]));\n\n  return fold(dataset as any, yFieldList, foldName, foldValue, aliasMap, false);\n};\n\nexport const foldDataTableByYField = (\n  dataTable: DataItem[],\n  yFieldList: string[],\n  fieldInfo: FieldInfo[],\n  foldName: any = FOLD_NAME,\n  foldValue: any = FOLD_VALUE\n) => {\n  const aliasMap = Object.fromEntries(fieldInfo.map(d => [d.fieldName, d.fieldName]));\n\n  return fold(dataTable as any, yFieldList, foldName, foldValue, aliasMap, false);\n};\n\nexport const isValidDataTable = (dataTable?: DataTable | undefined | null) => {\n  return !isNil(dataTable) && isArray(dataTable) && dataTable.length > 0;\n};\n\nexport const transferMeasureInTable = (dataTable: DataItem[], fieldInfo: FieldInfo[]) => {\n  const newDataTable: DataTable = [];\n  const measureFields = fieldInfo.filter(field => field.role === ROLE.MEASURE);\n  if (measureFields.length) {\n    dataTable.forEach(row => {\n      const newRow = { ...row };\n      measureFields.forEach(field => {\n        const value = Number(row[field.fieldName]);\n        if (isNumber(value) && row[field.fieldName] !== '') {\n          newRow[field.fieldName] = value;\n        }\n      });\n      newDataTable.push(newRow);\n    });\n    return newDataTable;\n  }\n  return dataTable;\n};\n"]}