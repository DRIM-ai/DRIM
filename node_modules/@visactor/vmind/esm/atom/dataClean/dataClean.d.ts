import type { DataCleanCtx, DataCleanOptions } from '../../types';
import { AtomName } from '../../types/atom';
import { BaseAtom } from '../base';
export declare const pipelines: {
    key: string;
    func: (ctx: DataCleanCtx, ...args: any[]) => DataCleanCtx;
}[];
export declare class DataCleanAtom extends BaseAtom<DataCleanCtx, DataCleanOptions> {
    name: AtomName;
    constructor(context: DataCleanCtx, option: DataCleanOptions);
    buildDefaultContext(context: DataCleanCtx): DataCleanCtx;
    buildDefaultOptions(): DataCleanOptions;
    updateContext(context: DataCleanCtx): DataCleanCtx;
    shouldRunByContextUpdate(context: DataCleanCtx): boolean;
    _runWithOutLLM(): DataCleanCtx;
}
export declare const registerDataCleanAtom: () => void;
