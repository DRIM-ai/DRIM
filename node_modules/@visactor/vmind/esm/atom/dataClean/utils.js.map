{"version":3,"sources":["../src/atom/dataClean/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import stringSimilarity from 'string-similarity-js';\nimport { getRoleByFieldType } from '../../utils/field';\nimport type { ClusterDataView, DatasetFromText } from '../../types/atom';\nimport type { DataItem, DataTable, RangeValueTransferType } from '../../types';\nimport { DataType, ROLE, type DataCleanCtx, type FieldInfo } from '../../types';\nimport { isArray, isNumber, isString, pick } from '@visactor/vutils';\nimport { extractFirstNumberInString } from '../../utils/text';\nimport { isValidData, uniqBy, average, convertStringToDateValue } from '../../utils/common';\nimport { agglomerativeHierarchicalClustering, type ClusterDataItem } from '../../utils/cluster';\nimport dayjs from 'dayjs';\n\nconst removeFieldInfoInCtx = (context: DataCleanCtx, cleanFieldKey: string[]) => {\n  if (!cleanFieldKey.length) {\n    return context;\n  }\n  const { fieldInfo = [], dataTable = [] } = context || {};\n  const newFieldInfo = fieldInfo.filter(info => !cleanFieldKey.includes(info.fieldName));\n  const fieldNameList = newFieldInfo.map(info => info.fieldName);\n  const newDataTable = dataTable.map(dataItem => pick(dataItem, fieldNameList));\n\n  return {\n    ...context,\n    fieldInfo: newFieldInfo,\n    dataTable: newDataTable\n  };\n};\n\nexport const transferFieldInfo = (context: DataCleanCtx, fieldMapping?: Record<string, FieldInfo>) => {\n  (context.fieldInfo || []).forEach(info => {\n    if (!info.role || !info.location) {\n      info.role = getRoleByFieldType(info.type);\n      info.location = info.role as any;\n    }\n    if (fieldMapping?.[info.fieldName]) {\n      info.alias = info.alias ?? fieldMapping[info.fieldName]?.alias;\n    }\n  });\n  return context;\n};\n\n/**\n * Remove the fields where all dimension values are the same\n * @param context\n * @returns\n */\nexport const getCtxByfilterSameValueColumn = (context: DataCleanCtx) => {\n  const { fieldInfo = [], dataTable = [] } = context || {};\n  const newContext = { ...context };\n  if (dataTable.length > 1 && fieldInfo.length) {\n    const cleanFieldKey: string[] = [];\n    fieldInfo.forEach(info => {\n      if (info.role === ROLE.MEASURE) {\n        return;\n      }\n      let shouldFilter = true;\n      const prev = dataTable[0][info.fieldName];\n      for (let i = 1; i < dataTable.length; i++) {\n        if (isValidData(dataTable[i][info.fieldName]) && dataTable[i][info.fieldName] !== prev) {\n          shouldFilter = false;\n          break;\n        }\n      }\n      shouldFilter && cleanFieldKey.push(info.fieldName);\n    });\n    return removeFieldInfoInCtx(newContext, cleanFieldKey);\n  }\n  if (dataTable.length && fieldInfo.length) {\n    const cleanFieldKey: string[] = [];\n    fieldInfo.forEach(info => {\n      if (info.role === ROLE.DIMENSION && !isValidData(dataTable[0][info.fieldName])) {\n        cleanFieldKey.push(info.fieldName);\n      }\n    });\n    return removeFieldInfoInCtx(newContext, cleanFieldKey);\n  }\n  return newContext;\n};\n\n/**\n * Need at least one valid measure field\n * @param context\n * @returns\n */\nexport const getCtxByneedNumericalFields = (context: DataCleanCtx) => {\n  if (context.fieldInfo.findIndex(info => info.role === ROLE.MEASURE) === -1) {\n    return {\n      ...context,\n      dataTable: [],\n      fieldInfo: []\n    };\n  }\n  return context;\n};\n\nexport const sortDataTableByDate = (context: DataCleanCtx) => {\n  const { dataTable, fieldInfo } = context;\n  const dateField = fieldInfo.find(info => info.role === ROLE.DIMENSION && info.type === DataType.DATE);\n  if (dateField) {\n    dataTable.sort((a, b) => {\n      const dateA = dayjs(convertStringToDateValue(`${a[dateField.fieldName]}`));\n      const dateB = dayjs(convertStringToDateValue(`${b[dateField.fieldName]}`));\n      if (dateA.isValid() && dateB.isValid()) {\n        return dateA.isBefore(dateB) ? -1 : 1;\n      }\n      return 0;\n    });\n  }\n  return context;\n};\n\n/**\n * Correct the measurement fields, extract number from string\n * @param context\n * @returns\n */\nexport const getCtxBymeasureAutoTransfer = (context: DataCleanCtx, text?: string) => {\n  const { fieldInfo = [], dataTable = [] } = context || {};\n  const isStringText = text && typeof text === 'string';\n  if (dataTable.length >= 1 && fieldInfo.length) {\n    fieldInfo.forEach(info => {\n      if (info.role === ROLE.DIMENSION) {\n        return;\n      }\n      for (let i = 0; i < dataTable.length; i++) {\n        let value = dataTable[i][info.fieldName];\n        if (typeof dataTable[i][info.fieldName] === 'string' && isNaN(Number(value))) {\n          const extractionValue = `${extractFirstNumberInString(value as string)}`;\n          const beforeLen = (value as string).length;\n          const curLen = extractionValue.length;\n          dataTable[i][info.fieldName] =\n            extractionValue !== 'null' && (curLen / beforeLen > 0.9 || beforeLen - curLen <= 2)\n              ? Number(extractionValue)\n              : null;\n        } else if (typeof dataTable[i][info.fieldName] === 'string') {\n          value = Number(value);\n          dataTable[i][info.fieldName] = value;\n        } else if (!isNumber(value)) {\n          value = null;\n          dataTable[i][info.fieldName] = null;\n        }\n        value = dataTable[i][info.fieldName];\n        if (info.type === DataType.RATIO && isNumber(value)) {\n          if (isStringText) {\n            // revised wrong ratio value in extraction\n            const ratioValue = value * 100;\n            if ((text.includes(`${ratioValue}%`) || text.includes(`${value}倍`)) && !text.includes(`${value}`)) {\n              dataTable[i][info.fieldName] = ratioValue;\n              value = ratioValue;\n            }\n          }\n          // transfer ratio value to absolue value without unit\n          if (info?.ratioGranularity === '%') {\n            dataTable[i][info.fieldName] = value / 100;\n          } else if (info?.ratioGranularity === '‰') {\n            dataTable[i][info.fieldName] = value / 1000;\n          }\n        }\n      }\n    });\n  }\n  return context;\n};\n\n/**\n * Filter out completely identical rows.\n * @param context\n * @returns\n */\nexport const getCtxByfilterSameDataItem = (context: DataCleanCtx) => {\n  const { dataTable = [], fieldInfo } = context || {};\n  let newDataTable = uniqBy(dataTable, item => JSON.stringify(item));\n  if (fieldInfo.length === 1) {\n    newDataTable = newDataTable.length > 0 ? [newDataTable[0]] : newDataTable;\n  }\n  return {\n    ...context,\n    dataTable: newDataTable\n  };\n};\n\nconst isDataItemWithNonEmptyValues = (dataItem: DataItem, fieldInfo: FieldInfo[]) => {\n  return fieldInfo.some(info => isValidData(dataItem[info.fieldName]));\n};\n\n/**\n * DataItem should has at least one measure value\n * @param context\n * @returns\n */\nexport const getCtxByFilterRowWithNonEmptyValues = (context: DataCleanCtx) => {\n  const { dataTable = [], fieldInfo } = context || {};\n  const measureFieldInfo = fieldInfo.filter(info => info.role === ROLE.MEASURE);\n  return {\n    ...context,\n    dataTable: dataTable.filter(item => isDataItemWithNonEmptyValues(item, measureFieldInfo))\n  };\n};\n\nconst transferRangeData = (cell: number[], type: RangeValueTransferType) => {\n  const validCell = cell.filter(v => isValidData(v));\n  switch (type) {\n    case 'avg':\n      return average(validCell);\n    case 'filter':\n      return null;\n    case 'max':\n      return Math.max(...validCell);\n    case 'min':\n      return Math.min(...validCell);\n    case 'first':\n      return validCell[0];\n    case 'last':\n      return validCell[validCell.length - 1];\n    default:\n      return validCell.join('-');\n  }\n};\n\n/** convert the interval data */\nexport const getCtxByRangeValueTranser = (context: DataCleanCtx, type: RangeValueTransferType) => {\n  const { dataTable = [], fieldInfo } = context || {};\n  return {\n    ...context,\n    dataTable: dataTable.map(item => {\n      const newItem = { ...item };\n      fieldInfo.forEach(info => {\n        if (info.role === ROLE.MEASURE && !isString(item[info.fieldName]) && isArray(item[info.fieldName])) {\n          newItem[info.fieldName] = transferRangeData(item[info.fieldName] as any, type);\n        }\n      });\n      return newItem;\n    })\n  };\n};\n\nexport const revisedUnMatchedFieldInfo = (context: DataCleanCtx) => {\n  const { dataTable, fieldInfo } = context;\n  const dataTableFieldSet = new Set<string>();\n  dataTable.forEach(item => {\n    Object.keys(item).forEach(key => dataTableFieldSet.add(key));\n  });\n  const fieldInfoMapping: Record<string, FieldInfo> = {};\n  fieldInfo.forEach(info => {\n    fieldInfoMapping[info.fieldName] = info;\n  });\n  const fieldNameSet = new Set(Object.keys(fieldInfoMapping));\n  // @ts-ignore\n  const intersectionName: Set<string> = dataTableFieldSet.intersection(fieldNameSet);\n  if (intersectionName.size !== dataTableFieldSet.size) {\n    // @ts-ignore\n    const dataTableUnMatch: Set<string> = dataTableFieldSet.difference(intersectionName);\n    // @ts-ignore\n    const fieldNameUnMatch: Set<string> = fieldNameSet.difference(intersectionName);\n    if (dataTableUnMatch.size !== fieldNameUnMatch.size) {\n      return context;\n    }\n    fieldNameUnMatch.forEach(name => {\n      const candidateList = [...dataTableUnMatch];\n      let min = -1;\n      let matchedName = candidateList[0];\n      candidateList.forEach(v => {\n        const score = stringSimilarity(name, v);\n        if (score > min) {\n          min = score;\n          matchedName = v;\n        }\n      });\n      fieldInfoMapping[name].fieldName = matchedName;\n      fieldInfoMapping[name].alias = name;\n      dataTableUnMatch.delete(matchedName);\n    });\n  }\n  return context;\n};\n\n/** Remove columns with a low effective percentage of values. */\nexport const getCtxByValidColumnRatio = (context: DataCleanCtx, ratio = 0.2) => {\n  const { dataTable = [], fieldInfo } = context || {};\n  let maxCount = 0;\n  const validCountOfFieldInfo = fieldInfo\n    .filter(info => info.role === ROLE.MEASURE)\n    .map(info => {\n      const cell = dataTable.map(item => item[info.fieldName]);\n      const validCount = cell.filter(item => isValidData(item)).length;\n      maxCount = Math.max(validCount, maxCount);\n      return {\n        fieldName: info.fieldName,\n        validCount\n      };\n    });\n  const invalidFieldInfo = validCountOfFieldInfo.filter(\n    info => !info.validCount || info.validCount / maxCount <= ratio\n  );\n  return removeFieldInfoInCtx(\n    context,\n    invalidFieldInfo.map(v => v.fieldName)\n  );\n};\n\nexport const canMergeDataTable = (ctxA: DatasetFromText, ctxB: DatasetFromText) => {\n  const { fieldInfo: fieldInfoA = [], summary: summaryA } = ctxA || {};\n  const { fieldInfo: fieldInfoB = [], summary: summaryB } = ctxB || {};\n  if (fieldInfoA.length !== fieldInfoB.length || !fieldInfoA.length || !summaryA || !summaryB) {\n    return false;\n  }\n  return fieldInfoA.every(item => {\n    return fieldInfoB.find(\n      itemB =>\n        itemB.fieldName === item.fieldName &&\n        itemB.type === item.type &&\n        itemB?.unit === item?.unit &&\n        itemB?.ratioGranularity === item?.ratioGranularity &&\n        itemB?.alias === item?.alias\n    );\n  });\n};\n\n/** get main data view and cluster result */\nexport const getSplitDataViewOfDataTable = (context: DataCleanCtx, threshold = 0.4) => {\n  const { dataTable = [], fieldInfo } = context || {};\n  const measureFieldInfo = fieldInfo.filter(info => info.role === ROLE.MEASURE);\n  const dimensionFieldInfo = fieldInfo.filter(info => info.role === ROLE.DIMENSION);\n  const clusterDataItem: ClusterDataItem[] = [];\n  measureFieldInfo.forEach((item, index) => {\n    clusterDataItem.push({\n      id: item.fieldName,\n      value: dataTable.map(data => (isValidData(data[item.fieldName]) ? 1 : 0))\n    });\n  });\n  const { clusters } = agglomerativeHierarchicalClustering(clusterDataItem, threshold);\n  if (!clusters.length) {\n    return context;\n  }\n  const dataViewList: ClusterDataView[] = [];\n  clusters.forEach(cluster => {\n    const clusterIds = cluster.children.map(v => v.id);\n    const clusterFieldInfo = [\n      ...dimensionFieldInfo,\n      ...measureFieldInfo.filter(info => clusterIds.includes(info.fieldName))\n    ];\n    const clusterFieldIds = clusterFieldInfo.map(v => v.fieldName);\n    const clusterDataView = dataTable.map(v => pick(v, clusterFieldIds));\n    let newContext: DataCleanCtx = { dataTable: clusterDataView, fieldInfo: clusterFieldInfo };\n    [getCtxByFilterRowWithNonEmptyValues, getCtxByfilterSameDataItem, getCtxByfilterSameValueColumn].forEach(func => {\n      newContext = func(newContext);\n    });\n    let validCellCount = 0;\n    let validMeasureCellCount = 0;\n    newContext.dataTable.forEach(item => {\n      newContext.fieldInfo.forEach(info => {\n        const isValid = isValidData(item[info.fieldName]);\n        validCellCount += isValid ? 1 : -1;\n        validMeasureCellCount += isValid && info.role === ROLE.MEASURE ? 1 : 0;\n      });\n    });\n    const dataView = {\n      fieldInfo: newContext.fieldInfo,\n      dataTable: newContext.dataTable,\n      validColumnLength: clusterIds.length,\n      validRowLength: newContext.dataTable.length,\n      validMeasureCellCount,\n      validCellCount\n    };\n    validCellCount > 0 && dataViewList.push(dataView);\n  });\n  dataViewList.sort((a, b) =>\n    a.validCellCount < b.validCellCount ||\n    (a.validCellCount === b.validCellCount && a.validRowLength < b.validRowLength) ||\n    (a.validCellCount === b.validCellCount &&\n      a.validRowLength === b.validRowLength &&\n      a.validColumnLength < b.validColumnLength)\n      ? 1\n      : -1\n  );\n  if (dataViewList.length === 0) {\n    return context;\n  }\n  return {\n    ...context,\n    originDataTable: dataTable,\n    fieldInfo: dataViewList[0].fieldInfo,\n    dataTable: dataViewList[0].dataTable,\n    clusterResult: dataViewList\n  };\n};\n\nexport const canMergeClusterResult = (clusterResult: ClusterDataView[]) => {\n  if (!clusterResult.length) {\n    return false;\n  }\n  return clusterResult.every(dataView => {\n    const { fieldInfo, dataTable } = dataView;\n    return (\n      dataTable.length === 1 && fieldInfo.findIndex(info => [DataType.DATE, DataType.TIME].includes(info.type)) === -1\n    );\n  });\n};\n\nexport const mergeClusterDataView = (clusterResult: ClusterDataView[]) => {\n  const newFieldInfo: FieldInfo[] = [];\n  const newDataTable: DataTable = [{}];\n  clusterResult.forEach(dataView => {\n    const { fieldInfo, dataTable } = dataView;\n    const measureFields = fieldInfo.filter(info => info.role === ROLE.MEASURE);\n    newFieldInfo.push(...measureFields);\n    measureFields.forEach(field => {\n      newDataTable[0][field.fieldName] = dataTable[0][field.fieldName];\n    });\n  });\n  return {\n    fieldInfo: newFieldInfo,\n    dataTable: newDataTable\n  };\n};\n\nconst isSameFields = (a: FieldInfo[], b: FieldInfo[]) => {\n  if (a.length !== b.length) {\n    return false;\n  }\n  return a.every((info, index) => {\n    const matchInB = b.find(item => item.fieldName === info.fieldName);\n    return (\n      matchInB &&\n      matchInB.role === info.role &&\n      matchInB.type === info.type &&\n      matchInB.unit === info.unit &&\n      matchInB.dateGranularity === info.dateGranularity\n    );\n  });\n};\n\nfunction longestCommonSubstringAtEdges(a: string, b: string) {\n  // 检查开头\n  let startLen = 0;\n  while (startLen < a.length && startLen < b.length && a[startLen] === b[startLen]) {\n    startLen++;\n  }\n\n  // 检查结尾\n  let endLen = 0;\n  while (endLen < a.length && endLen < b.length && a[a.length - 1 - endLen] === b[b.length - 1 - endLen]) {\n    endLen++;\n  }\n\n  // 返回较长的公共子字符串\n  if (startLen >= endLen) {\n    return {\n      strA: a.substring(startLen, a.length),\n      strB: b.substring(startLen, b.length),\n      commonStr: a.substring(0, startLen)\n    };\n  }\n  return {\n    strA: a.substring(0, a.length - endLen),\n    strB: b.substring(0, b.length - endLen),\n    commonStr: a.substring(endLen, a.length)\n  };\n}\n\nexport const mergeDataTable = (ctxA: DatasetFromText, ctxB: DatasetFromText) => {\n  const { dataTable: tableA, summary: summaryA, textRange: rangeA } = ctxA;\n  const { dataTable: tableB, summary: summaryB, textRange: rangeB } = ctxB;\n  const { strA, strB, commonStr } = longestCommonSubstringAtEdges(summaryA, summaryB);\n  const newFieldInfo: FieldInfo = {\n    fieldName: commonStr,\n    description: `${summaryA} and ${summaryB}`,\n    role: ROLE.DIMENSION,\n    type: DataType.STRING\n  };\n  const newDataTable = [\n    ...tableA.map(v => ({ ...v, [commonStr]: strA })),\n    ...tableB.map(v => ({ ...v, [commonStr]: strB }))\n  ];\n  const textRange = rangeA && rangeB ? [rangeA[0], rangeB[1]] : null;\n  return {\n    dataTable: newDataTable,\n    fieldInfo: [newFieldInfo, ...ctxA.fieldInfo],\n    summary: `${summaryA} and ${summaryB}`,\n    textRange: textRange as any\n  };\n};\n"]}