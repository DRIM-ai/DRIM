{"version":3,"sources":["../src/atom/dataClean/dataClean.ts"],"names":[],"mappings":"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","file":"dataClean.js","sourcesContent":["import type { DataCleanCtx, DataCleanOptions } from '../../types';\nimport { AtomName } from '../../types/atom';\nimport { BaseAtom } from '../base';\nimport { merge } from '@visactor/vutils';\nimport {\n  getCtxByfilterSameValueColumn,\n  getCtxByneedNumericalFields,\n  getCtxBymeasureAutoTransfer,\n  getCtxByfilterSameDataItem,\n  getCtxByFilterRowWithNonEmptyValues,\n  getCtxByRangeValueTranser,\n  getSplitDataViewOfDataTable,\n  transferFieldInfo,\n  revisedUnMatchedFieldInfo,\n  sortDataTableByDate\n} from './utils';\nimport { Factory } from '../../core/factory';\nimport type { BaseAtomConstructor } from '../../types';\n/** The order of pipeline is meaningful   */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const pipelines: { key: string; func: (ctx: DataCleanCtx, ...args: any[]) => DataCleanCtx }[] = [\n  /** revised unmatched problem */\n  {\n    key: 'revisedUnMatchedInfo',\n    func: revisedUnMatchedFieldInfo\n  },\n  /** convert the interval data */\n  {\n    key: 'rangeValueTransfer',\n    func: getCtxByRangeValueTranser\n  },\n  /** Correct the measurement fields. */\n  {\n    key: 'measureAutoTransfer',\n    func: getCtxBymeasureAutoTransfer\n  },\n  /** Filter out the Row where all measurements are null. */\n  {\n    key: 'filterRowWithEmptyValues',\n    func: getCtxByFilterRowWithNonEmptyValues\n  },\n  /** Filter out completely identical rows. */\n  {\n    key: 'filterSameDataItem',\n    func: getCtxByfilterSameDataItem\n  },\n  /** Remove the fields where all dimension values are the same. */\n  {\n    key: 'filterSameValueColumn',\n    func: getCtxByfilterSameValueColumn\n  },\n  /** Need at least one valid measure field */\n  {\n    key: 'needNumericalFields',\n    func: getCtxByneedNumericalFields\n  },\n  {\n    key: 'sortByDate',\n    func: sortDataTableByDate\n  }\n];\n\nexport class DataCleanAtom extends BaseAtom<DataCleanCtx, DataCleanOptions> {\n  name = AtomName.DATA_CLEAN;\n\n  constructor(context: DataCleanCtx, option: DataCleanOptions) {\n    super(context, option);\n  }\n\n  buildDefaultContext(context: DataCleanCtx): DataCleanCtx {\n    return merge(\n      {},\n      {\n        dataTable: [],\n        fieldInfo: []\n      },\n      context\n    );\n  }\n\n  buildDefaultOptions(): DataCleanOptions {\n    return {\n      filterSameValueColumn: true,\n      needNumericalFields: true,\n      measureAutoTransfer: true,\n      filterSameDataItem: true,\n      filterRowWithEmptyValues: true,\n      rangeValueTransfer: 'avg',\n      hierarchicalClustering: true\n    };\n  }\n\n  updateContext(context: DataCleanCtx): DataCleanCtx {\n    this.context = transferFieldInfo(super.updateContext(context));\n    return this.context;\n  }\n\n  shouldRunByContextUpdate(context: DataCleanCtx): boolean {\n    return context.dataTable !== this.context.dataTable;\n  }\n\n  _runWithOutLLM(): DataCleanCtx {\n    let newContext = { ...this.context };\n    pipelines.forEach(({ key, func }) => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const currentOption = (this.options as any)[key];\n      if (currentOption !== false) {\n        newContext = func(newContext, currentOption);\n      }\n    });\n    this.setNewContext(newContext);\n    if (this.options.hierarchicalClustering) {\n      this.setNewContext(getSplitDataViewOfDataTable(newContext, this.options.clusterThreshold));\n    }\n    return this.context;\n  }\n}\n\nexport const registerDataCleanAtom = () => {\n  Factory.registerAtom(\n    AtomName.DATA_CLEAN,\n    DataCleanAtom as unknown as BaseAtomConstructor<DataCleanCtx, DataCleanOptions>\n  );\n};\n"]}