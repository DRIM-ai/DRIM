{"version":3,"sources":["../src/atom/chartGenerator/rule/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import type { SimpleVChartSpec } from '../../../atom/imageReader/interface';\nimport { ROLE, DataType, ChartType } from '../../../types';\nimport type { Cell, ChartGeneratorCtx } from '../../../types';\nimport type { GenerateChartCellContext, SimpleVChartSpecMockContext } from '../type';\nimport { formatTypeToVMind } from '../spec/chartTypeUtils';\nimport { unfoldTransform } from '../../../utils/unfold';\n\n/**\n * 根据规则去模拟LLM 生成结果\n * @param context\n * @returns\n */\nexport const getRuleLLMContent = (context: ChartGeneratorCtx) => {\n  const { fieldInfo } = context;\n  const measureFields = fieldInfo.filter(field => field.role === ROLE.MEASURE);\n  let chartType = null;\n  const cell: Cell = {};\n\n  if (measureFields.length === 1 && measureFields[0].type === DataType.RATIO) {\n    // waterwave spec\n    chartType = ChartType.LiquidChart;\n    cell.value = measureFields[0].fieldName;\n    return {\n      CHART_TYPE: chartType,\n      FIELD_MAP: cell\n    };\n  }\n  return null;\n};\n\nconst formatDataTable = (simpleVChartSpec: SimpleVChartSpec, data: any[]): any[] => {\n  if (simpleVChartSpec.type === 'rangeColumn') {\n    const firstDatum = data[0];\n\n    if (firstDatum && 'group' in firstDatum) {\n      const groups = data.reduce((acc: any[], cur: any) => {\n        if (!acc.includes(cur.group)) {\n          acc.push(cur.group);\n        }\n        return acc;\n      }, []);\n\n      if (groups.length === 2) {\n        const newData = unfoldTransform(\n          {\n            keyField: 'group',\n            valueField: 'value',\n            groupBy: 'name'\n          },\n          data\n        );\n\n        return newData.map(entry => {\n          return {\n            name: entry.name,\n            value: entry[groups[0]],\n            value1: entry[groups[1]]\n          };\n        });\n      }\n    }\n  }\n\n  return data;\n};\n\nexport const getCellContextBySimpleVChartSpec = (simpleVChartSpec: SimpleVChartSpec): SimpleVChartSpecMockContext => {\n  const { type, transpose, stackOrPercent, coordinate, data, series, palette } = simpleVChartSpec;\n  const cell: Cell = {};\n\n  const dataTable = formatDataTable(\n    simpleVChartSpec,\n    data ??\n      series.reduce((acc: any[], cur: any) => {\n        acc.push(...cur.data);\n        return acc;\n      }, [])\n  );\n\n  const firstDatum = dataTable?.[0];\n  const chartType =\n    type === 'common'\n      ? series && series.length >= 2 && series.some((s, index) => index > 0 && s.type !== series[0].type)\n        ? type\n        : series?.[0]?.type === 'bar' && coordinate === 'polar'\n        ? 'rose'\n        : series?.[0]?.type ?? type\n      : type;\n\n  if (firstDatum && 'group' in firstDatum) {\n    cell.color = 'group';\n  } else if (palette && palette.length === dataTable.length && palette.length > 1) {\n    cell.color = 'name';\n  }\n\n  if (coordinate === 'polar') {\n    if (type === 'pie') {\n      cell.angle = 'value';\n    } else if (type === 'rose') {\n      cell.angle = 'name';\n      cell.radius = 'value';\n    } else if (type === 'radar') {\n      cell.x = 'name';\n      cell.y = 'value';\n    }\n    cell.category = 'name';\n  } else if (coordinate === 'rect' || chartType === 'funnel') {\n    cell.x = 'name';\n    cell.y = 'value';\n  } else if (chartType === 'circlePacking') {\n    cell.size = 'value';\n  }\n\n  const fieldInfo = ['name', 'value', 'group'].reduce((res, field) => {\n    if (firstDatum && field in firstDatum) {\n      res.push({\n        fieldName: field,\n        type: field === 'value' ? DataType.FLOAT : DataType.STRING,\n        role: field === 'value' ? ROLE.MEASURE : ROLE.DIMENSION\n      });\n    }\n\n    return res;\n  }, []);\n\n  if (chartType === 'rangeColumn' && 'value1' in firstDatum) {\n    cell.y = ['value', 'value1'];\n    fieldInfo.push({\n      fieldName: 'value1',\n      type: DataType.FLOAT,\n      role: ROLE.MEASURE\n    });\n  }\n\n  return {\n    mockLLMContent: {\n      CHART_TYPE: formatTypeToVMind(chartType) as ChartType,\n      FIELD_MAP: cell,\n      stackOrPercent,\n      transpose\n    },\n    ctx: {\n      dataTable,\n      fieldInfo\n    }\n  };\n};\n"]}