{"version":3,"sources":["../src/atom/chartGenerator/llmResultRevise.ts"],"names":[],"mappings":"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","file":"llmResultRevise.js","sourcesContent":["import { FOLD_NAME, FOLD_VALUE } from '@visactor/chart-advisor';\nimport { array, isArray, isNil } from '@visactor/vutils';\nimport {\n  getDataListByField,\n  getFieldByDataType,\n  getFieldByRole,\n  getFieldsByDataType,\n  getRemainedFields\n} from '../../utils/field';\nimport { foldDataTableByYField, isValidDataTable } from '../../utils/dataTable';\nimport { replaceAll } from '../../utils/text';\nimport type { FieldInfo } from '../../types';\nimport { ChartType, DataType, ROLE } from '../../types';\nimport {\n  NEED_COLOR_FIELD_CHART_LIST,\n  NEED_SIZE_FIELD_CHART_LIST,\n  CARTESIAN_CHART_LIST,\n  NEED_COLOR_AND_SIZE_CHART_LIST\n} from './const';\nimport type { GenerateChartCellContext } from './type';\nimport { isValidData } from '../../utils/common';\n\nexport const getContextAfterRevised = (context: GenerateChartCellContext) => {\n  const revisedFuncList = [\n    patchChartType,\n    patchTransposeField,\n    patchAxisField,\n    patchColorField,\n    patchLabelField,\n    patchYField,\n    patchNeedColor,\n    patchNeedSize,\n    patchBoxPlot,\n    patchDualAxis,\n    patchPieChart,\n    patchWordCloud,\n    patchDynamicBarChart,\n    patchRangeColumnChart,\n    patchLinearProgressChart,\n    patchBasicHeatMapChart,\n    patchCartesianXField\n  ];\n  let newContext = { ...context };\n  revisedFuncList.forEach(func => {\n    newContext = {\n      ...newContext,\n      ...func(newContext)\n    };\n  });\n  return newContext;\n};\n\nexport const patchChartType = (context: GenerateChartCellContext) => {\n  const { chartType, chartTypeList } = context;\n  const chartTypeNew: ChartType = replaceAll(replaceAll(chartType, '/', ''), '-', ' ') as ChartType;\n\n  if (!chartTypeList.includes(chartTypeNew)) {\n    console.error('Unsupported Chart Type. Please Change User Input');\n    return {\n      error: 'Unsupported Chart Type. Please Change User Input'\n    };\n  }\n\n  return { chartType: chartTypeNew.toUpperCase() as ChartType };\n};\n\nexport const patchTransposeField = (context: GenerateChartCellContext) => {\n  const { cell, transpose, fieldInfo } = context;\n  if (transpose) {\n    const { x, y } = cell;\n    const arrayX = array(x);\n    const arrayY = array(y);\n    const fieldMapping: Record<string, FieldInfo> = fieldInfo.reduce(\n      (prev, curv) => ({\n        ...prev,\n        [curv.fieldName]: curv\n      }),\n      {}\n    );\n    const transpoeField =\n      arrayX.every(field => !!fieldMapping[field] && fieldMapping[field].role === ROLE.MEASURE) &&\n      arrayY.every(field => !!fieldMapping[field] && fieldMapping[field].role === ROLE.DIMENSION);\n    if (transpoeField) {\n      return {\n        ...context,\n        cell: {\n          ...cell,\n          x: y,\n          y: x\n        }\n      };\n    }\n  }\n  return context;\n};\n\nexport const patchAxisField = (context: GenerateChartCellContext) => {\n  const { cell } = context;\n\n  const cellNew: any = { ...cell };\n\n  // patch the \"axis\" field to x\n  if (cellNew.axis && (!cellNew.x || !cellNew.y)) {\n    if (!cellNew.x) {\n      cellNew.x = cellNew.axis;\n    } else if (!cellNew.y) {\n      cellNew.y = cellNew.axis;\n    }\n  }\n\n  return {\n    cell: cellNew\n  };\n};\n\nexport const patchColorField = (context: GenerateChartCellContext) => {\n  const { cell } = context;\n  const cellNew = { ...cell, color: cell.color ?? cell.category };\n\n  return {\n    cell: cellNew\n  };\n};\n\nexport const patchLabelField = (context: GenerateChartCellContext) => {\n  const { cell } = context;\n\n  const cellNew: any = { ...cell };\n  //patch the \"label\" fields to color\n  if (cellNew.label && (!cellNew.color || cellNew.color.length === 0)) {\n    cellNew.color = cellNew.label;\n  }\n\n  return {\n    cell: cellNew\n  };\n};\n\nexport const patchYField = (context: GenerateChartCellContext) => {\n  const { chartType, cell, dataTable, fieldInfo } = context;\n  let cellNew = { ...cell };\n  const { x, y } = cellNew;\n  let chartTypeNew = chartType;\n  let datasetNew = dataTable;\n\n  // When there are multiple y-axis fields, the processing methods are:\n  // 1. For box plot, the chart type is not corrected.\n  // 2. For bar chart or line chart, the chart type is corrected to double axis chart.\n  // 3. In other cases, the chart type is corrected to scatter plot.\n\n  if (y && isArray(y) && y.length > 1) {\n    if (\n      chartTypeNew === ChartType.BoxPlot.toUpperCase() ||\n      (chartTypeNew === ChartType.DualAxisChart.toUpperCase() && y.length === 2) ||\n      (chartTypeNew === ChartType.RangeColumnChart.toUpperCase() && y.length === 2)\n    ) {\n      return {\n        ...context\n      };\n    }\n\n    if (\n      (chartTypeNew === ChartType.BarChart.toUpperCase() || chartTypeNew === ChartType.LineChart.toUpperCase()) &&\n      y.length === 2\n    ) {\n      return {\n        ...context,\n        chartType: ChartType.DualAxisChart.toUpperCase()\n      };\n    }\n    if (\n      chartTypeNew === ChartType.BarChart.toUpperCase() ||\n      chartTypeNew === ChartType.LineChart.toUpperCase() ||\n      chartTypeNew === ChartType.DualAxisChart.toUpperCase() ||\n      chartTypeNew === ChartType.RadarChart.toUpperCase()\n    ) {\n      //use fold to visualize more than 2 y fields\n      // @todo @czx fieldInfo adjust sync\n      if (isValidDataTable(datasetNew)) {\n        datasetNew = foldDataTableByYField(datasetNew, y, fieldInfo);\n        cellNew.y = FOLD_VALUE.toString();\n        cellNew.color = FOLD_NAME.toString();\n      }\n    } else {\n      chartTypeNew = <ChartType>ChartType.ScatterPlot.toUpperCase();\n      cellNew = {\n        ...cell,\n        x: y[0],\n        y: y[1],\n        color: typeof x === 'string' ? x : x[0]\n      };\n    }\n  }\n\n  return {\n    chartType: chartTypeNew,\n    cell: cellNew,\n    dataTable: datasetNew\n  };\n};\n\nexport const patchBoxPlot = (context: GenerateChartCellContext) => {\n  const { chartType, cell } = context;\n  const cellNew = {\n    ...cell\n  };\n  const { y } = cellNew;\n  if (chartType === ChartType.BoxPlot.toUpperCase()) {\n    if (typeof y === 'string' && y.split(',').length > 1) {\n      cellNew.y = y.split(',').map(str => str.trim());\n    } else if (isNil(y) || y.length === 0) {\n      const {\n        lower_whisker,\n        lowerWhisker,\n        min,\n        lower,\n        lowerBox,\n        lower_box,\n        q1,\n        lower_quartile,\n        lowerQuartile,\n        midline,\n        median,\n        q3,\n        upperBox,\n        upper_box,\n        upper_quartile,\n        upperQuartile,\n        upper_whisker,\n        upperWhisker,\n        max,\n        upper\n      } = cellNew as any;\n\n      cellNew.y = [\n        lower_whisker,\n        lowerWhisker,\n        min,\n        lower,\n        lowerBox,\n        lower_box,\n        q1,\n        lower_quartile,\n        lowerQuartile,\n        midline,\n        median,\n        q3,\n        upperBox,\n        upper_box,\n        upper_quartile,\n        upperQuartile,\n        upper_whisker,\n        upperWhisker,\n        max,\n        upper\n      ].filter(Boolean);\n    }\n  }\n\n  return {\n    cell: cellNew\n  };\n};\n\nexport const patchDualAxis = (context: GenerateChartCellContext) => {\n  const { chartType, cell } = context;\n  const cellNew: any = { ...cell };\n  //Dual-axis drawing yLeft and yRight\n\n  if (chartType === ChartType.DualAxisChart.toUpperCase()) {\n    cellNew.y = [cellNew.y, cellNew.yLeft, cellNew.yRight, cellNew.y1, cellNew.y2].filter(Boolean).flat();\n  }\n\n  return {\n    cell: cellNew\n  };\n};\n\nexport const patchPieChart = (context: GenerateChartCellContext) => {\n  const { chartType, cell, fieldInfo, dataTable } = context;\n  const cellNew = { ...cell };\n\n  if (chartType === ChartType.RoseChart.toUpperCase()) {\n    cellNew.angle = cellNew.radius ?? cellNew.size ?? cellNew.angle;\n  }\n\n  //Pie chart must have color field and the angle field\n  if (chartType === ChartType.PieChart.toUpperCase() || chartType === ChartType.RoseChart.toUpperCase()) {\n    if (!cellNew.color || !cellNew.angle) {\n      const remainedFields = getRemainedFields(cellNew, fieldInfo);\n\n      if (!cellNew.color) {\n        //No color fields are assigned, select a discrete field from the remaining fields as color field\n        const colorField = getFieldByRole(remainedFields, ROLE.DIMENSION);\n        if (colorField) {\n          cellNew.color = colorField.fieldName;\n        } else if (remainedFields?.[0]) {\n          cellNew.color = remainedFields[0]?.fieldName;\n        }\n      }\n      if (!cellNew.angle) {\n        //no angle field are assigned, select a continuous field from the remaining field to assign to the angle\n        const angleField = getFieldByDataType(remainedFields, [DataType.FLOAT, DataType.INT]);\n        if (angleField) {\n          cellNew.angle = angleField.fieldName;\n        } else {\n          cellNew.angle = remainedFields?.[0].fieldName;\n        }\n      }\n    }\n    const colorField = isArray(cellNew.color) ? cellNew.color[0] : cellNew.color;\n    const angleField = isArray(cellNew.angle) ? cellNew.angle[0] : cellNew.angle;\n    const validDataItem = dataTable.filter(dataItem => {\n      return isValidData(dataItem[colorField]) && isValidData(dataItem[angleField]) && Number(dataItem[angleField]) > 0;\n    });\n    if (validDataItem.length < 2) {\n      const colorFieldInfo = fieldInfo.find(info => info.fieldName === colorField);\n      return {\n        chartType:\n          colorFieldInfo?.type === DataType.DATE ? ChartType.LineChart.toUpperCase() : ChartType.BarChart.toUpperCase(),\n        cell: {\n          x: colorField,\n          y: angleField\n        }\n      };\n    }\n  }\n  return {\n    cell: cellNew\n  };\n};\n\nexport const patchWordCloud = (context: GenerateChartCellContext) => {\n  //Word cloud must have color fields and size fields\n  const { chartType, cell, fieldInfo } = context;\n  const cellNew = { ...cell };\n\n  if (chartType === ChartType.WordCloud.toUpperCase()) {\n    if (!cellNew.size || !cellNew.color || cellNew.color === cellNew.size) {\n      const remainedFields = getRemainedFields(cellNew, fieldInfo);\n\n      if (!cellNew.size || cellNew.size === cellNew.color) {\n        const newSize = (cellNew as any).weight ?? (cellNew as any).fontSize;\n        if (newSize) {\n          cellNew.size = newSize;\n        } else {\n          const sizeField = getFieldByDataType(remainedFields, [DataType.INT, DataType.FLOAT]);\n          if (sizeField) {\n            cellNew.size = sizeField.fieldName;\n          } else {\n            cellNew.size = remainedFields?.[0].fieldName;\n          }\n        }\n      }\n      if (!cellNew.color) {\n        const newColor = (cellNew as any).text ?? (cellNew as any).word ?? (cellNew as any).label ?? cellNew.x;\n        if (newColor) {\n          cellNew.color = newColor;\n        } else {\n          const colorField = getFieldByRole(remainedFields, ROLE.DIMENSION);\n          if (colorField) {\n            cellNew.color = colorField.fieldName;\n          } else if (remainedFields?.[0]) {\n            cellNew.color = remainedFields[0]?.fieldName;\n          }\n        }\n      }\n    }\n  }\n  return {\n    cell: cellNew\n  };\n};\n\nexport const patchDynamicBarChart = (context: GenerateChartCellContext) => {\n  const { chartType, cell, fieldInfo, dataTable } = context;\n  const cellNew = { ...cell };\n  let chartTypeNew = chartType;\n\n  if (chartType === ChartType.DynamicBarChart.toUpperCase()) {\n    if (!cell.time || cell.time === '' || cell.time.length === 0) {\n      const remainedFields = getRemainedFields(cellNew, fieldInfo);\n\n      //Dynamic bar chart does not have a time field, choose a discrete field as time.\n      const timeField = getFieldByDataType(remainedFields, [DataType.DATE]);\n      if (timeField) {\n        cellNew.time = timeField.fieldName;\n      } else {\n        const stringField = getFieldByDataType(remainedFields, [DataType.STRING]);\n        if (stringField) {\n          cellNew.time = stringField.fieldName;\n        } else {\n          //no available field, set chart type to bar chart\n          chartTypeNew = <ChartType>ChartType.BarChart.toUpperCase();\n        }\n      }\n    }\n  }\n  if (cellNew.time) {\n    const timeData = getDataListByField(dataTable, cellNew.time);\n    if ((timeData.length < 7 && !cellNew.color) || cellNew.x === cellNew.time) {\n      // transfer dynamic bar chart to bar chart\n      chartTypeNew =\n        cellNew.x !== cellNew.time\n          ? <ChartType>ChartType.BarChart.toUpperCase()\n          : <ChartType>ChartType.LineChart.toUpperCase();\n      cellNew.color = cellNew.x !== cellNew.time ? cellNew.x : undefined;\n      cellNew.x = cellNew.time;\n      cellNew.time = undefined;\n    }\n  }\n\n  return {\n    cell: cellNew,\n    chartType: chartTypeNew\n  };\n};\n\nexport const patchCartesianXField = (context: GenerateChartCellContext) => {\n  const { chartType, cell, fieldInfo } = context;\n  const cellNew = { ...cell };\n\n  //Cartesian chart must have X field\n  if (CARTESIAN_CHART_LIST.map(chart => chart.toUpperCase()).includes(chartType)) {\n    if (!cellNew.x) {\n      const remainedFields = getRemainedFields(cellNew, fieldInfo);\n      //没有分配x字段，从剩下的字段里选择一个离散字段分配到x上\n      const xField = getFieldByRole(remainedFields, ROLE.DIMENSION);\n      if (xField) {\n        cellNew.x = xField.fieldName;\n      } else {\n        cellNew.x = remainedFields?.[0].fieldName;\n      }\n    }\n  }\n  return {\n    cell: cellNew\n  };\n};\n\nexport const patchNeedColor = (context: GenerateChartCellContext) => {\n  const { chartType, cell, fieldInfo } = context;\n  const cellNew: any = { ...cell };\n  if (\n    NEED_COLOR_FIELD_CHART_LIST.some(needColorFieldChartType => needColorFieldChartType.toUpperCase() === chartType) ||\n    NEED_COLOR_AND_SIZE_CHART_LIST.some(needColorFieldChartType => needColorFieldChartType.toUpperCase() === chartType)\n  ) {\n    const colorField = [cellNew.color, cellNew.x, cellNew.label, (cellNew as any).sets].filter(Boolean);\n    if (colorField.length !== 0) {\n      cellNew.color = colorField[0];\n    } else {\n      const remainedFields = getRemainedFields(cellNew, fieldInfo);\n      const colorField = getFieldByRole(remainedFields, ROLE.DIMENSION);\n      if (colorField) {\n        cellNew.color = colorField.fieldName;\n      } else if (remainedFields?.[0]) {\n        cellNew.color = remainedFields[0]?.fieldName;\n      }\n    }\n  }\n  return {\n    cell: cellNew\n  };\n};\n\nexport const patchNeedSize = (context: GenerateChartCellContext) => {\n  const { chartType, cell, fieldInfo } = context;\n  const cellNew = { ...cell };\n  if (\n    NEED_SIZE_FIELD_CHART_LIST.some(needSizeFieldChartType => needSizeFieldChartType.toUpperCase() === chartType) ||\n    NEED_COLOR_AND_SIZE_CHART_LIST.some(needSizeFieldChartType => needSizeFieldChartType.toUpperCase() === chartType)\n  ) {\n    const sizeField = [cellNew.size, cellNew.value, cellNew.y, cellNew.radius, cellNew.angle].filter(Boolean).flat();\n    if (sizeField.length !== 0) {\n      cellNew.size = sizeField[0];\n    } else {\n      const remainedFields = getRemainedFields(cellNew, fieldInfo);\n      const sizeField = getFieldByRole(remainedFields, ROLE.MEASURE);\n      if (sizeField) {\n        cellNew.size = sizeField.fieldName;\n      } else {\n        cellNew.size = remainedFields?.[0].fieldName;\n      }\n    }\n  }\n  return {\n    cell: cellNew\n  };\n};\n\nexport const patchRangeColumnChart = (context: GenerateChartCellContext) => {\n  // Range Column Chart's y field must length == 2\n  const { chartType, cell, fieldInfo } = context;\n  const cellNew = { ...cell };\n  const remainedFields = getRemainedFields(cellNew, fieldInfo);\n  const numericFields = getFieldsByDataType(remainedFields, [DataType.FLOAT, DataType.INT]);\n  if (chartType === ChartType.RangeColumnChart.toUpperCase()) {\n    if (cellNew.y && cellNew.y instanceof Array && cellNew.y.length === 2) {\n      return { cell: cellNew };\n    }\n    if (numericFields.length >= 2) {\n      cellNew.y = [numericFields[0].fieldName, numericFields[1].fieldName];\n    } else {\n      const message =\n        // eslint-disable-next-line max-len\n        'The y-axis of the range column chart requires two numeric fields, but the result of data aggregation does not have two numeric fields';\n      console.error(message);\n      return {\n        error: message\n      };\n    }\n  }\n  return {\n    cell: cellNew\n  };\n};\n\nexport const patchLinearProgressChart = (context: GenerateChartCellContext) => {\n  const { chartType, cell, fieldInfo } = context;\n  const cellNew = { ...cell };\n  if (chartType === ChartType.LinearProgress.toUpperCase()) {\n    const xField = [cellNew.x, cellNew.color].filter(Boolean).flat();\n    if (xField.length !== 0) {\n      cellNew.x = xField[0];\n    } else {\n      const remainedFields = getRemainedFields(cellNew, fieldInfo);\n      const xField = getFieldByRole(remainedFields, ROLE.DIMENSION);\n      if (xField) {\n        cellNew.x = xField.fieldName;\n      } else {\n        cellNew.x = remainedFields?.[0].fieldName;\n      }\n    }\n\n    const yField = [cellNew.y, cellNew.size, cellNew.value, cellNew.radius, cellNew.angle].filter(Boolean).flat();\n    if (yField.length !== 0) {\n      cellNew.y = yField[0];\n    } else {\n      const remainedFields = getRemainedFields(cellNew, fieldInfo);\n      const yField = getFieldByRole(remainedFields, ROLE.MEASURE);\n      if (yField) {\n        cellNew.y = yField.fieldName;\n      } else {\n        cellNew.y = remainedFields?.[0].fieldName;\n      }\n    }\n  }\n  return {\n    cell: cellNew\n  };\n};\n\nexport const patchBasicHeatMapChart = (context: GenerateChartCellContext) => {\n  const { chartType, cell, fieldInfo } = context;\n  const cellNew: any = { ...cell };\n  if (chartType === ChartType.BasicHeatMap.toUpperCase()) {\n    const colorField = [cellNew.x, cellNew.y, cellNew.label, cellNew.color].filter(Boolean).flat();\n    if (colorField.length >= 2) {\n      cellNew.x = colorField[0];\n      cellNew.y = colorField[1];\n    } else {\n      const remainedFields = getRemainedFields(cellNew, fieldInfo);\n      const colorField = getFieldsByDataType(remainedFields, [DataType.STRING]);\n      if (colorField.length >= 2) {\n        cellNew.x = colorField[0];\n        cellNew.y = colorField[1];\n      } else {\n        cellNew.x = remainedFields?.[0].fieldName;\n        cellNew.y = remainedFields[1].fieldName;\n      }\n    }\n  }\n  return {\n    cell: cellNew\n  };\n};\n"]}