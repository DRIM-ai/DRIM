{"version":3,"sources":["../src/atom/chartGenerator/spec/transformers/linearProgress.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,IAAI,EAA4B,MAAM,UAAU,CAAC;AAEjE,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,OAAiC,EAAE,EAAE;IAEvE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAE/B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;IACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;IACrB,IAAI,IAAI,CAAC,KAAK,EAAE;QACd,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC;KAC/B;IACD,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAEvB,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,OAAiC,EAAE,EAAE;IAEtE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAC/B,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC;IAExE,IAAI,CAAC,IAAI,GAAG;QACV;YACE,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;YACxB,KAAK,EAAE;gBACL,YAAY,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI;gBACtE,KAAK,EAAE;oBACL,QAAQ,EAAE,EAAE;iBACb;aACF;SACF;QACD;YACE,MAAM,EAAE,QAAQ;YAChB,IAAI,EAAE,QAAQ;YACd,OAAO,EAAE,IAAI;YACb,IAAI,EAAE;gBACJ,OAAO,EAAE,KAAK;aACf;YACD,KAAK,EAAE;gBACL,YAAY,EAAE,CAAC,GAAW,EAAE,EAAE;oBAC5B,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;gBACtD,CAAC;gBACD,KAAK,EAAE,IAAI;aACZ;SACF;KACF,CAAC;IAEF,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,OAAiC,EAAE,EAAE;IACvE,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IACzB,IAAI,CAAC,QAAQ,mCACR,IAAI,CAAC,QAAQ,KAChB,KAAK,EAAE,EAAE,GACV,CAAC;IACF,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,CAAC","file":"linearProgress.js","sourcesContent":["import type { GenerateChartCellContext } from '../../type';\nimport { color, data, revisedVChartType, theme } from './common';\n\nexport const linearProgressField = (context: GenerateChartCellContext) => {\n  //assign field in spec according to cell\n  const { cell, spec } = context;\n\n  spec.xField = cell.y;\n  spec.yField = cell.x;\n  if (cell.color) {\n    spec.seriesField = cell.color;\n  }\n  spec.cornerRadius = 20;\n\n  return { spec };\n};\n\nexport const linearProgressAxes = (context: GenerateChartCellContext) => {\n  //assign field in spec according to cell\n  const { cell, spec } = context;\n  const hasSingleData = spec.data.values && spec.data.values.length === 1;\n\n  spec.axes = [\n    {\n      orient: 'left',\n      type: 'band',\n      domainLine: { visible: false },\n      tick: { visible: false },\n      label: {\n        formatMethod: hasSingleData ? (val: any) => `${cell.x}: ${val}` : null,\n        style: {\n          fontSize: 16\n        }\n      }\n    },\n    {\n      orient: 'bottom',\n      type: 'linear',\n      visible: true,\n      grid: {\n        visible: false\n      },\n      label: {\n        formatMethod: (val: number) => {\n          return val >= 0 && val <= 1 ? `${val * 100}%` : val;\n        },\n        flush: true\n      }\n    }\n  ];\n\n  return { spec };\n};\n\nexport const linearProgressStyle = (context: GenerateChartCellContext) => {\n  const { spec } = context;\n  spec.progress = {\n    ...spec.progress,\n    style: {}\n  };\n  return { spec };\n};\n\nexport const pipelineLinearProgress = [data, color, linearProgressField, linearProgressAxes, linearProgressStyle];\n"]}