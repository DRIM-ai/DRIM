{"version":3,"sources":["../src/atom/chartGenerator/spec/transformers/dualAxis.ts"],"names":[],"mappings":"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","file":"dualAxis.js","sourcesContent":["import { isArray } from '@visactor/vutils';\nimport type { GenerateChartCellContext } from '../../type';\nimport {\n  DIMENSION_AXIS_ID,\n  MAIN_SERIES_ID,\n  MEASURE_AXIS_LEFT_ID,\n  MEASURE_AXIS_RIGHT_ID,\n  SUB_SERIES_ID\n} from '../constants';\nimport { color, data, discreteLegend } from './common';\nimport { COLOR_FIELD } from '@visactor/chart-advisor';\n\nexport const dualAxisSeries = (context: GenerateChartCellContext) => {\n  //assign series in dual-axis chart\n  const { cell, spec, simpleVChartSpec } = context;\n  const { color } = cell;\n  const dataValues = spec.data.values;\n\n  if (simpleVChartSpec && simpleVChartSpec.series) {\n    spec.series = simpleVChartSpec.series.map(s => {\n      return {\n        ...s,\n        data: {\n          id: `data_${s.type}`,\n          values: s.data\n        },\n        xField: cell.x,\n        yField: cell.y[0],\n        seriesField: color ? (isArray(color) ? color[0] : color) : null\n      };\n    });\n    return { spec };\n  }\n\n  spec.series = [\n    {\n      type: 'bar',\n      id: MAIN_SERIES_ID,\n      data: {\n        id: spec.data.id + '_bar',\n        values: color ? dataValues : dataValues.map((d: any) => ({ ...d, [COLOR_FIELD]: cell.y[0] }))\n      },\n      dataIndex: 0,\n      label: { visible: true },\n      xField: cell.x,\n      yField: cell.y[0],\n      seriesField: color ? (isArray(color) ? color[0] : color) : COLOR_FIELD,\n      bar: {\n        style: {}\n      }\n    },\n    {\n      type: 'line',\n      id: SUB_SERIES_ID,\n      dataIndex: 0,\n      data: {\n        id: spec.data.id + '_line',\n        values: color ? dataValues : dataValues.map((d: any) => ({ ...d, [COLOR_FIELD]: cell.y[1] }))\n      },\n      label: { visible: true },\n      xField: cell.x,\n      yField: cell.y[cell.y?.length - 1],\n      seriesField: color ? (isArray(color) ? color[0] : color) : COLOR_FIELD,\n\n      line: {\n        style: {}\n      },\n      point: {\n        style: {}\n      }\n    }\n  ];\n  spec.data = undefined;\n  spec.labelLayout = 'region';\n  return { spec };\n};\n\nexport const dualAxisAxes = (context: GenerateChartCellContext) => {\n  //assign axes in dual-axis chart\n  const { spec, simpleVChartSpec } = context;\n\n  if (simpleVChartSpec && simpleVChartSpec.series) {\n    return { spec };\n  }\n\n  spec.axes = [\n    {\n      id: DIMENSION_AXIS_ID,\n      type: 'band',\n      orient: 'bottom'\n    },\n    {\n      id: MEASURE_AXIS_LEFT_ID,\n      seriesId: MAIN_SERIES_ID,\n      type: 'linear',\n      orient: 'left',\n      label: {\n        style: {}\n      }\n    },\n    {\n      id: MEASURE_AXIS_RIGHT_ID,\n      seriesId: SUB_SERIES_ID,\n      type: 'linear',\n      orient: 'right',\n      tick: { visible: false },\n      grid: { visible: false },\n      label: {\n        style: {}\n      }\n    }\n  ];\n  return { spec };\n};\n\nexport const pipelineDualAxis = [data, color, dualAxisSeries, dualAxisAxes, discreteLegend];\n"]}