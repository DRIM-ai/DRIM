{"version":3,"sources":["../src/atom/chartGenerator/spec/transformers/treemap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAG3C,OAAO,EAAE,KAAK,EAAqB,sBAAsB,EAAS,MAAM,UAAU,CAAC;AAEnF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,OAAiC,EAAE,EAAE;IAC/D,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAC1C,IAAI,CAAC,IAAI,GAAG;QACV,EAAE,EAAE,MAAM;QACV,MAAM,EAAE,cAAc,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC;KACjG,CAAC;IACF,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAQ,CACjC,SAAoB,EACpB,UAA6B,EAC7B,KAAa,EACb,SAAiB,EACjB,EAAE;IACF,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,KAAK,KAAK,EAAE;QACnC,OAAO,KAAK,CAAC,IAAI,CACf,IAAI,GAAG,CACL,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACnB,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;QACnE,CAAC,CAAC,CACH,CACF,CAAC;KACH;IAED,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CACvB,IAAI,GAAG,CACL,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACnB,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC,CACH,CACF,CAAC;IACF,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QACxB,MAAM,cAAc,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YAC7C,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,IAAI,cAAc,CAAC,CAAC,CAAC,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;YACxE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC;SAC7D;QACD,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,cAAc,CAAC,cAAc,EAAE,UAAU,EAAE,KAAK,GAAG,CAAC,EAAE,SAAS,CAAC,EAAE,CAAC;IACrG,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,OAAiC,EAAE,EAAE;IACtE,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IACzB,IAAI,CAAC,KAAK,GAAG;QACX,OAAO,EAAE,IAAI;QACb,KAAK,EAAE;YACL,QAAQ,EAAE,EAAE;SACb;KACF,CAAC;IACF,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,WAAW,EAAE,KAAK,EAAE,sBAAsB,EAAE,kBAAkB,CAAC,CAAC","file":"treemap.js","sourcesContent":["import { isArray } from '@visactor/vutils';\nimport type { DataTable } from '../../../../types/base';\nimport type { GenerateChartCellContext } from '../../type';\nimport { color, revisedVChartType, sunburstOrTreemapField, theme } from './common';\n\nexport const treemapData = (context: GenerateChartCellContext) => {\n  const { dataTable, cell, spec } = context;\n  spec.data = {\n    id: 'data',\n    values: getTreemapData(dataTable, isArray(cell.color) ? cell.color : [cell.color], 0, cell.size)\n  };\n  return { spec };\n};\n\nexport const getTreemapData: any = (\n  dataTable: DataTable,\n  colorField: string[] | string,\n  index: number,\n  sizeField: string\n) => {\n  if (colorField.length - 1 === index) {\n    return Array.from(\n      new Set(\n        dataTable.map(data => {\n          return { name: data[colorField[index]], value: data[sizeField] };\n        })\n      )\n    );\n  }\n  // Get the value range of this layer\n  const values = Array.from(\n    new Set(\n      dataTable.map(data => {\n        return data[colorField[index]];\n      })\n    )\n  );\n  return values.map(value => {\n    const currentDataset = dataTable.filter(data => {\n      return data[colorField[index]] === value;\n    });\n    if (currentDataset[0] && currentDataset[0][colorField[index + 1]] === '') {\n      return { name: value, value: currentDataset[0][sizeField] };\n    }\n    return { name: value, children: getTreemapData(currentDataset, colorField, index + 1, sizeField) };\n  });\n};\n\nexport const treemapDisplayConf = (context: GenerateChartCellContext) => {\n  const { spec } = context;\n  spec.label = {\n    visible: true,\n    style: {\n      fontSize: 12\n    }\n  };\n  return { spec };\n};\n\nexport const pipelineTreemap = [treemapData, color, sunburstOrTreemapField, treemapDisplayConf];\n"]}