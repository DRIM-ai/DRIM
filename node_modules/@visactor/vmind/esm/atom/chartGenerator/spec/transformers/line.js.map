{"version":3,"sources":["../src/atom/chartGenerator/spec/transformers/line.ts"],"names":[],"mappings":"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","file":"line.js","sourcesContent":["import { getFieldByDataType } from '../../../../utils/field';\nimport type { GenerateChartCellContext } from '../../type';\nimport { LINEAR_COLOR_THEMES } from '../constants';\nimport { data, discreteLegend, revisedVChartType, theme } from './common';\nimport { DataType } from '../../../../types/base';\nimport { axis, seriesField } from './cartesian';\n\nexport const colorLine = (context: GenerateChartCellContext) => {\n  const { colors, spec, chartTheme } = context;\n  // spec.data = [dataTable]\n  if (chartTheme) {\n    return { spec };\n  }\n  if (colors && colors.length > 0) {\n    spec.color = colors;\n  } else {\n    //应用渐变色\n    spec.color = LINEAR_COLOR_THEMES.map(c => ({\n      gradient: 'linear',\n      x0: 0,\n      y0: 0.5,\n      x1: 1,\n      y1: 0.5,\n      stops: [\n        {\n          offset: 0,\n          color: c[0]\n        },\n        {\n          offset: 1,\n          color: c[1]\n        }\n      ]\n    }));\n    spec.point = {\n      style: {\n        //visible: false\n      }\n    };\n  }\n  return { spec };\n};\n\nexport const cartesianLine = (context: GenerateChartCellContext) => {\n  //assign field in spec according to cell\n  const { cell, spec, fieldInfo } = context;\n  const cellNew = { ...cell };\n  spec.xField = cell.x;\n  spec.yField = cell.y;\n  if (cell.color) {\n    spec.seriesField = cell.color;\n  } else {\n    //no color field. choose a discrete field among remaining fields\n    const remainedFields = fieldInfo.filter(\n      ({ fieldName }) => !spec.xField.includes(fieldName) && spec.yField !== fieldName\n    );\n    const colorField = getFieldByDataType(remainedFields, [DataType.STRING, DataType.DATE]);\n    if (colorField) {\n      spec.seriesField = colorField.fieldName;\n      cellNew.color = colorField.fieldName;\n    }\n  }\n  return { spec, cell: cellNew };\n};\n\nexport const displayConfLine = (context: GenerateChartCellContext) => {\n  const { spec, chartTheme } = context;\n  if (chartTheme) {\n    return { spec };\n  }\n  spec.line = {\n    style: {\n      //curveType: 'monotone',\n      //lineWidth: 6,\n      //lineCap: 'round'\n    }\n  };\n\n  return { spec };\n};\n\nexport const pipelineLine = [\n  data,\n  colorLine,\n  cartesianLine,\n  seriesField,\n  axis,\n  discreteLegend,\n  // commonLabel,\n  displayConfLine\n  //animationCartisianLine,\n];\n"]}