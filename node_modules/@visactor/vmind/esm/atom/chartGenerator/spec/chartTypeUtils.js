import { ChartType } from "../../../types";

const chartTypeMap = {
    [ChartType.BarChart.toUpperCase()]: "bar",
    [ChartType.LineChart.toUpperCase()]: "line",
    [ChartType.AreaChart.toUpperCase()]: "area",
    [ChartType.PieChart.toUpperCase()]: "pie",
    [ChartType.WordCloud.toUpperCase()]: "wordCloud",
    [ChartType.ScatterPlot.toUpperCase()]: "scatter",
    [ChartType.DynamicBarChart.toUpperCase()]: "bar",
    [ChartType.FunnelChart.toUpperCase()]: "funnel",
    [ChartType.DualAxisChart.toUpperCase()]: "common",
    [ChartType.RoseChart.toUpperCase()]: "rose",
    [ChartType.RadarChart.toUpperCase()]: "radar",
    [ChartType.SankeyChart.toUpperCase()]: "sankey",
    [ChartType.WaterFallChart.toUpperCase()]: "waterfall",
    [ChartType.BoxPlot.toUpperCase()]: "boxPlot",
    [ChartType.LiquidChart.toUpperCase()]: "liquid",
    [ChartType.LinearProgress.toUpperCase()]: "linearProgress",
    [ChartType.CircularProgress.toUpperCase()]: "circularProgress",
    [ChartType.BubbleCirclePacking.toUpperCase()]: "circlePacking",
    [ChartType.MapChart.toUpperCase()]: "map",
    [ChartType.RangeColumnChart.toUpperCase()]: "rangeColumn",
    [ChartType.SunburstChart.toUpperCase()]: "sunburst",
    [ChartType.TreemapChart.toUpperCase()]: "treemap",
    [ChartType.Gauge.toUpperCase()]: "gauge",
    [ChartType.BasicHeatMap.toUpperCase()]: "common",
    [ChartType.VennChart.toUpperCase()]: "venn"
};

export const getVChartTypeByVmind = type => chartTypeMap[type] ? chartTypeMap[type] : null;

export const formatTypeToVMind = type => {
    var _a;
    return null !== (_a = Object.values(ChartType).find((vmindType => chartTypeMap[vmindType.toUpperCase()] === type))) && void 0 !== _a ? _a : type;
};

export const llmChartTypeMap = Object.keys(ChartType).reduce(((prev, cur) => {
    const value = ChartType[cur];
    return prev[value.toUpperCase()] = value, prev;
}), {});
//# sourceMappingURL=chartTypeUtils.js.map
