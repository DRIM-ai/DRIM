{"version":3,"sources":["../src/atom/dataInsight/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import type { DataInsightCtx } from '../../types/atom';\nimport { AtomName } from '../../types/atom';\nimport { BaseAtom } from '../base';\nimport { merge } from '@visactor/vutils';\nimport { extractDataFromContext } from './dataProcess';\nimport { AlgorithmType } from './type';\nimport { getInsights } from './algorithms';\nimport type { LLMMessage } from '../../types/llm';\nimport { getPolishPrompt } from './prompt';\nimport { addPlainText } from './algorithms/template';\nimport type { DataInsightOptions } from './type';\nimport { Factory } from '../../core/factory';\nimport type { BaseAtomConstructor } from '../../types';\n\nexport class DataInsightAtom extends BaseAtom<DataInsightCtx, DataInsightOptions> {\n  name = AtomName.DATA_INSIGHT;\n\n  isLLMAtom: boolean = true;\n\n  constructor(context: DataInsightCtx, option: DataInsightOptions) {\n    super(context, option);\n  }\n\n  buildDefaultContext(context: DataInsightCtx): DataInsightCtx {\n    return merge(\n      {},\n      {\n        spec: {},\n        insights: []\n      },\n      context\n    );\n  }\n\n  buildDefaultOptions(): DataInsightOptions {\n    return {\n      ...super.buildDefaultOptions(),\n      algorithms: [\n        AlgorithmType.OverallTrending,\n        AlgorithmType.AbnormalTrend,\n        AlgorithmType.PearsonCorrelation,\n        AlgorithmType.SpearmanCorrelation,\n        AlgorithmType.StatisticsAbnormal,\n        AlgorithmType.LOFOutlier,\n        AlgorithmType.DbscanOutlier,\n        AlgorithmType.MajorityValue,\n        AlgorithmType.PageHinkley,\n        // AlgorithmType.DifferenceOutlier,\n        AlgorithmType.TurningPoint,\n        AlgorithmType.StatisticsBase,\n        AlgorithmType.Volatility\n      ],\n      isLimitedbyChartType: true,\n      language: 'chinese',\n      usePolish: true\n    };\n  }\n\n  shouldRunByContextUpdate(context: DataInsightCtx): boolean {\n    return true;\n  }\n\n  protected getLLMMessages(query?: string): LLMMessage[] {\n    const { insights } = this.context;\n    const language = this.options?.language;\n    const addtionContent = this.getHistoryLLMMessages(query);\n    return [\n      {\n        role: 'system',\n        content: getPolishPrompt(language)\n      },\n      {\n        role: 'user',\n        content: JSON.stringify({\n          insights: insights.map(insight => ({\n            type: insight.type,\n            content: insight.textContent?.content,\n            variables: insight.textContent?.variables\n              ? Object.keys(insight.textContent.variables).reduce<Record<string, any>>((acc, key) => {\n                  return {\n                    ...acc,\n                    [key]: {\n                      ...insight.textContent?.variables[key],\n                      value: null,\n                      formatValue: null\n                    }\n                  };\n                }, {})\n              : {}\n          }))\n        })\n      },\n      ...addtionContent\n    ];\n  }\n\n  protected parseLLMContent(resJson: any): DataInsightCtx {\n    const { results } = resJson;\n    if (!results) {\n      console.error('Insights polish error in LLM');\n      return {\n        ...this.context,\n        error: 'Insights polish error in LLM'\n      };\n    }\n    const newInsights = this.context.insights.map((insight, index) => ({\n      ...insight,\n      textContent: addPlainText({\n        content: results[index] || insight.textContent?.content,\n        variables: insight.textContent?.variables\n      })\n    }));\n    return {\n      ...this.context,\n      insights: newInsights\n    };\n  }\n\n  protected runBeforeLLM(): DataInsightCtx {\n    this.isLLMAtom = this.options?.usePolish !== false;\n    const dataInfo = extractDataFromContext(this.context);\n    const insights = getInsights(\n      {\n        ...dataInfo,\n        spec: this.context.spec\n      },\n      this.options\n    );\n    const newContext = {\n      ...this.context,\n      chartType: dataInfo.chartType,\n      fieldInfo: dataInfo.fieldInfo,\n      insights\n    };\n    this.updateContext(newContext);\n    if (insights.length === 0) {\n      this.isLLMAtom = false;\n    }\n    return this.context;\n  }\n}\n\nexport const registerDataInsightAtom = () => {\n  Factory.registerAtom(\n    AtomName.DATA_INSIGHT,\n    DataInsightAtom as unknown as BaseAtomConstructor<DataInsightCtx, DataInsightOptions>\n  );\n};\n"]}