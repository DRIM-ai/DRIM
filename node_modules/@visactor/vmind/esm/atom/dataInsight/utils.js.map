{"version":3,"sources":["../src/atom/dataInsight/utils.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAErD,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,MAAa,EAAE,SAAoB,EAAE,EAAE;IACxE,IAAI,SAAS,KAAK,SAAS,CAAC,aAAa,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QAC3D,OAAO,KAAK,CAAC;KACd;IACD,OAAO,MAAM,CAAC,KAAK,CACjB,CAAC,CAAM,EAAE,EAAE;;QACT,OAAA,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,IAAI,OAAK,MAAA,MAAM,CAAC,CAAC,CAAC,0CAAE,IAAI,CAAA;YAC3B,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,KAAK,IAAI,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;aACtD,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,WAAW,CAAA;YACd,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAA;KAAA,CAC3D,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,IAAS,EAAE,SAAoB,EAAE,IAAU,EAAE,EAAE;IAC1E,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;IAC7D,IAAI,IAAI,KAAK,QAAQ,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;QAC3G,OAAO,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,CAClB,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,KAAK,MAAK,KAAK,IAAI,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,KAAK,CAAA,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAChH,CAAC;KACH;IACD,OAAO,CACL,CAAC,CAAC,KAAK,KAAK,KAAK,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;QACtF,WAAW;QACX,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CACnD,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,IAAS,EAAE,SAAoB,EAAE,IAAU,EAAE,EAAE;IAC5E,MAAM,EAAE,IAAI,EAAE,MAAM,GAAG,EAAE,EAAE,WAAW,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;IACtD,IAAI,IAAI,KAAK,QAAQ,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;QAC3G,OAAO,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,OAAO,CAAA,CAAC,CAAC;KAChD;IACD,OAAO,CAAC,CAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,CAAA,IAAI,CAAC,CAAC,WAAW,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;AAC9F,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,CAAC,MAAW,EAAE,MAAc,EAAE,EAAE;IACjD,OAAO,CAAC,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAClH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,IAAS,EAAE,MAAc,EAAE,EAAE;IACzD,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACjD,IAAI,OAAO,EAAE;QACX,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC;QACrD,OAAO,CACL,CAAC,CAAC,KAAK,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;YAChD,WAAW;YACX,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CACnD,CAAC;KACH;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,IAAS,EAAE,MAAc,EAAE,EAAE;IAC1D,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACjD,IAAI,OAAO,EAAE;QACX,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;QACjD,OAAO,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;KACvF;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAChC,OAAmB,EACnB,SAA0B,EAC1B,WAAW,CAAC,CAAS,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EACrC,EAAE;IACF,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;QACvC,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;QACxC,MAAM,aAAa,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QACtF,MAAM,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrD,IAAI,aAAa,EAAE;YACjB,UAAU,EAAE,CAAC;SACd;QACD,OAAO,IAAI,GAAG,KAAK,CAAC;IACtB,CAAC,EAAE,CAAC,CAAC,CAAC;IAEN,OAAO,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;AACrC,CAAC,CAAC","file":"utils.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isArray, isNumber } from '@visactor/vutils';\nimport type { Cell, DataItem } from '../../types';\nimport { ChartType } from '../../types';\n\nexport const isStackChartInAxes = (series: any[], chartType: ChartType) => {\n  if (chartType !== ChartType.DualAxisChart || !series.length) {\n    return false;\n  }\n  return series.every(\n    (s: any) =>\n      s?.type === series[0]?.type &&\n      ((s.stack !== false && s.type === 'bar') || !!s.stack) &&\n      s?.seriesField &&\n      !(isArray(s.xField) && s.xField.includes(s.seriesField))\n  );\n};\n\nexport const isStackChart = (spec: any, chartType: ChartType, cell: Cell) => {\n  const { seriesField, type, series = [], stack } = spec || {};\n  if (type === 'common' && [ChartType.BarChart, ChartType.AreaChart, ChartType.LineChart].includes(chartType)) {\n    return series?.every(\n      (s: any) => ((s?.stack !== false && s.type === 'bar') || !!s?.stack) && !(isArray(cell.x) && cell.x.length > 1)\n    );\n  }\n  return (\n    ((stack !== false && (chartType === ChartType.BarChart || type === 'bar')) || !!stack) &&\n    seriesField &&\n    !(isArray(cell.x) && cell.x.includes(seriesField))\n  );\n};\n\nexport const isPercentChart = (spec: any, chartType: ChartType, cell: Cell) => {\n  const { type, series = [], seriesField } = spec || {};\n  if (type === 'common' && [ChartType.BarChart, ChartType.AreaChart, ChartType.LineChart].includes(chartType)) {\n    return series?.every((s: any) => !!s?.percent);\n  }\n  return !!spec?.percent && !(seriesField && isArray(cell.x) && cell.x.includes(seriesField));\n};\n\nconst getYSeries = (series: any, yField: string) => {\n  return (series ?? []).find((s: any) => s.yField === yField || (isArray(s.yField) && s.yField.includes(yField)));\n};\n\nexport const isStackSeries = (spec: any, yField: string) => {\n  const ySeries = getYSeries(spec?.series, yField);\n  if (ySeries) {\n    const { xField, seriesField, type, stack } = ySeries;\n    return (\n      ((stack !== false && type === 'bar') || !!stack) &&\n      seriesField &&\n      !(isArray(xField) && xField.includes(seriesField))\n    );\n  }\n  return false;\n};\n\nexport const isPercenSeries = (spec: any, yField: string) => {\n  const ySeries = getYSeries(spec?.series, yField);\n  if (ySeries) {\n    const { percent, seriesField, xField } = ySeries;\n    return !!percent && !(seriesField && isArray(xField) && xField.includes(seriesField));\n  }\n  return false;\n};\n\nexport const sumDimensionValues = (\n  dataset: DataItem[],\n  measureId: string | number,\n  getValue = (v: number) => Math.abs(v)\n) => {\n  let validCount = 0;\n  const sum = dataset.reduce((prev, cur) => {\n    const numValue = Number(cur[measureId]);\n    const isValidNumber = isNumber(numValue) && !isNaN(numValue) && cur[measureId] !== '';\n    const value = isValidNumber ? getValue(numValue) : 0;\n    if (isValidNumber) {\n      validCount++;\n    }\n    return prev + value;\n  }, 0);\n  // if all of value is invalid number, return null\n  return validCount > 0 ? sum : null;\n};\n"]}