{"version":3,"sources":["../src/atom/dataInsight/algorithms/correlation/pearson.ts"],"names":[],"mappings":"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","file":"pearson.js","sourcesContent":["import { isArray } from '@visactor/vutils';\n\nimport { pearsonCorrelationCoeff, studentTQuantile } from '../statistics';\nimport type { InsightAlgorithm } from '../../type';\nimport { InsightType, type DataInsightExtractContext, type Insight } from '../../type';\nimport type { DataTable } from '../../../../types';\nimport { ChartType, type DataItem } from '../../../../types';\n\nexport interface PearsonOptions {\n  threshold?: number;\n  withoutSeries?: boolean;\n}\n\nconst pearsonAlgo = (context: DataInsightExtractContext, options: PearsonOptions) => {\n  const { seriesDataMap, cell, insights } = context;\n  const { threshold: pearsonThreshold = 0.8, withoutSeries = false } = options || {};\n  const { y: celly, x: cellx, color } = cell;\n  const yField: string = isArray(celly) ? celly[0] : celly;\n  const xField: string = isArray(cellx) ? cellx[0] : cellx;\n  const seriesField: string = isArray(color) ? color[0] : color;\n\n  const result: Insight[] = [];\n\n  const alpha = 0.05;\n\n  const seriesNames = Object.keys(seriesDataMap);\n  if (withoutSeries && seriesNames.length > 1) {\n    return [];\n  }\n  seriesNames.forEach(series => {\n    let seriesDataset: DataTable = seriesDataMap[series].map((d: any) => d.dataItem);\n    const outlierData: DataItem[] = insights\n      .filter(\n        (insight: any) =>\n          insight.type === InsightType.Outlier && (!seriesField || String(insight.data[0][seriesField]) === series)\n      )\n      .map((i: any) => i.data[0]);\n    //exclude outliers\n    if (outlierData.length > 0) {\n      seriesDataset = seriesDataset.filter(\n        dataItem =>\n          !outlierData.find(\n            od =>\n              od[xField] === dataItem[xField] &&\n              od[yField] === dataItem[yField] &&\n              (!seriesField || dataItem[seriesField] === od[seriesField])\n          )\n      );\n    }\n    const xMeasureSet = seriesDataset.map(d => d[yField]) as number[];\n    const yMeasureSet = seriesDataset.map(d => d[xField]) as number[];\n\n    if (xMeasureSet.length !== yMeasureSet.length) {\n      return;\n    }\n    const pearsonCoefficient = pearsonCorrelationCoeff(xMeasureSet, yMeasureSet);\n    //t-distribution test\n    const degree = yMeasureSet.length - 2;\n    const tValue = (pearsonCoefficient * Math.sqrt(degree)) / Math.sqrt(1 - pearsonCoefficient ** 2);\n\n    const threshold = studentTQuantile(1 - alpha / 2, degree);\n\n    if (Math.abs(pearsonCoefficient) > pearsonThreshold && Math.abs(tValue) >= threshold) {\n      //Correlation is significant\n      result.push({\n        type: InsightType.Correlation,\n        fieldId: [xField, yField],\n        significant: Math.abs(pearsonCoefficient),\n        seriesName: series,\n        info: {\n          isLinearCorrelation: true\n        }\n      } as unknown as Insight);\n    }\n  });\n  return result;\n};\n\nexport const ScatterPlotCorrelation: InsightAlgorithm = {\n  name: 'pearson-coefficient',\n  chartType: [ChartType.ScatterPlot],\n  forceChartType: [ChartType.ScatterPlot],\n  insightType: InsightType.Correlation,\n  algorithmFunction: pearsonAlgo\n};\n"]}