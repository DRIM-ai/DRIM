{"version":3,"sources":["../src/atom/dataInsight/algorithms/turningPoint/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { isArray, isNumber } from '@visactor/vutils';\n\nimport BayesianChangePoint from 'bayesian-changepoint';\nimport type { InsightAlgorithm } from '../../type';\nimport { InsightType, type DataInsightExtractContext, type Insight } from '../../type';\nimport { ChartType, type DataItem } from '../../../../types';\nimport { isPercenSeries } from '../../utils';\n\nconst breakpointVerifier = (next: any, prev: any): boolean => {\n  if (Math.abs(next.data - prev.data) >= 1) {\n    return true;\n  }\n\n  return false;\n};\n\nconst bayesianDetection = (dataset: DataItem[], measureId: string | number) => {\n  const measureSet = dataset.map(d => Number(d[measureId]));\n\n  const detection = new BayesianChangePoint<number>({\n    breakpointVerifier,\n    chunkSize: measureSet.length,\n    iteratee: (d: number) => d\n  });\n\n  detection.exec(measureSet);\n  const result = detection.breakPoints();\n\n  return result;\n};\n\nconst turningPointAlgo = (context: DataInsightExtractContext): Insight[] => {\n  const result: Insight[] = [];\n  const { seriesDataMap, cell, spec } = context;\n  const { y: celly } = cell;\n\n  const yField: string[] = isArray(celly) ? celly.flat() : [celly];\n\n  Object.keys(seriesDataMap).forEach(series => {\n    const seriesDataset = seriesDataMap[series];\n    yField.forEach(measureId => {\n      if (isPercenSeries(spec, measureId)) {\n        return;\n      }\n      const bayesianResult = bayesianDetection(\n        seriesDataset.map((d: any) => d.dataItem),\n        measureId\n      );\n      bayesianResult.forEach(res => {\n        const { index } = res;\n        const d = seriesDataset[index];\n        result.push({\n          type: InsightType.TurningPoint,\n          data: [d as any],\n          fieldId: measureId,\n          seriesName: series,\n          value: d.dataItem[measureId] as unknown as number\n        } as unknown as Insight);\n      });\n    });\n  });\n  //TODO: add info for each change point.\n  return result;\n};\n\nexport const TurningPoint: InsightAlgorithm = {\n  name: 'turningPoint',\n  forceChartType: [\n    ChartType.DualAxisChart,\n    ChartType.LineChart,\n    ChartType.BarChart,\n    ChartType.AreaChart,\n    ChartType.WaterFallChart\n  ],\n  insightType: InsightType.TurningPoint,\n  algorithmFunction: turningPointAlgo,\n  supportPercent: false\n};\n"]}