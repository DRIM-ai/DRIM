{"version":3,"sources":["../src/atom/dataInsight/algorithms/base/baseStatistics.ts"],"names":[],"mappings":"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","file":"baseStatistics.js","sourcesContent":["import { isArray, isValidNumber } from '@visactor/vutils';\nimport type { AxesDataInfo, DataInsightExtractContext, Insight, InsightAlgorithm } from '../../type';\nimport { ChartType } from '../../../../types';\nimport { InsightType } from '../../type';\nimport { isStackChart, isStackChartInAxes } from '../../utils';\n\nconst getMinMaxAvg = (data: number[]) => {\n  const min = {\n    index: -1,\n    value: Infinity\n  };\n  const max = {\n    index: -1,\n    value: -Infinity\n  };\n  let sum = 0;\n  let validCount = 0;\n  data.forEach((value, index) => {\n    if (isValidNumber(value)) {\n      sum += value;\n      validCount++;\n      if (value < min.value) {\n        min.index = index;\n        min.value = value;\n      }\n      if (value > max.value) {\n        max.index = index;\n        max.value = value;\n      }\n    }\n  });\n  return {\n    min,\n    max,\n    avg: sum / validCount\n  };\n};\n\nconst getBaseInsightByDataset = (\n  context: Pick<\n    AxesDataInfo,\n    'dataset' | 'dimensionStackSumMap' | 'dimensionValues' | 'axisTitle' | 'seriesId' | 'seriesIndex'\n  > & {\n    xField: string;\n    measureId: string | string[];\n    isStack: boolean;\n    isAxesArea?: boolean;\n    axesDirection?: 'left' | 'right';\n  }\n) => {\n  const {\n    xField,\n    measureId,\n    dataset,\n    isStack,\n    dimensionValues,\n    dimensionStackSumMap,\n    axisTitle = [],\n    isAxesArea = false,\n    axesDirection,\n    seriesId,\n    seriesIndex\n  } = context;\n  const dataList = dataset.map((d, index) => ({\n    index: index,\n    dataItem: d\n  }));\n  const result: Insight[] = [];\n  const yField = isArray(measureId) ? measureId[0] : measureId;\n  const valueList = isStack ? dimensionStackSumMap[yField] : dataList.map(d => Number(d.dataItem[yField]));\n  const { min, max, avg } = getMinMaxAvg(valueList);\n  const titleName = (isArray(axisTitle) ? axisTitle?.[0] : axisTitle) || '';\n  min.index !== -1 &&\n    result.push({\n      name: 'min',\n      type: InsightType.Min,\n      fieldId: yField,\n      value: min.value,\n      significant: 1,\n      data: isStack\n        ? dataList.filter(d => d.dataItem[xField] === dimensionValues[min.index])\n        : [\n            {\n              index: min.index,\n              dataItem: dataList[min.index].dataItem\n            }\n          ],\n      info: {\n        seriesId,\n        seriesIndex,\n        isAxesArea,\n        titleName,\n        isGroup: isStack,\n        dimValue: isStack ? dimensionValues[min.index] : dataList[min.index].dataItem[xField]\n      }\n    });\n  max.index !== -1 &&\n    result.push({\n      name: 'max',\n      type: InsightType.Max,\n      fieldId: yField,\n      value: max.value,\n      significant: 1,\n      data: isStack\n        ? dataList.filter(d => d.dataItem[xField] === dimensionValues[max.index])\n        : [\n            {\n              index: max.index,\n              dataItem: dataList[max.index].dataItem\n            }\n          ],\n      info: {\n        isAxesArea,\n        titleName,\n        seriesId,\n        seriesIndex,\n        isGroup: isStack,\n        dimValue: isStack ? dimensionValues[max.index] : dataList[max.index].dataItem[xField]\n      }\n    });\n  isValidNumber(avg) &&\n    result.push({\n      name: 'avg',\n      type: InsightType.Avg,\n      fieldId: yField,\n      value: avg,\n      significant: 1,\n      data: [],\n      info: {\n        seriesId,\n        seriesIndex,\n        isAxesArea,\n        titleName,\n        axesDirection\n      }\n    });\n  return result;\n};\n\nexport interface BaseStatisticsOptions {\n  defaultLeftAxisName?: string;\n  defaultRightAxisName?: string;\n}\nconst BaseStatisticsFunction = (context: DataInsightExtractContext, options: BaseStatisticsOptions) => {\n  const result: Insight[] = [];\n  const { spec, chartType, cell, leftAxesDataList, rightAxesDataList } = context;\n  const { y: celly, x: cellx } = cell;\n  const xField: string = isArray(cellx) ? cellx[0] : cellx;\n  const yField: string = isArray(celly) ? celly[0] : celly;\n  const baseInfo = {\n    ...context,\n    xField,\n    measureId: yField\n  };\n  leftAxesDataList &&\n    result.push(\n      ...getBaseInsightByDataset({\n        ...baseInfo,\n        ...leftAxesDataList,\n        isAxesArea: true,\n        measureId: leftAxesDataList?.yField,\n        axisTitle: leftAxesDataList.axisTitle || options?.defaultLeftAxisName,\n        isStack: isStackChartInAxes(leftAxesDataList.series, chartType),\n        axesDirection: 'left'\n      })\n    );\n  rightAxesDataList &&\n    result.push(\n      ...getBaseInsightByDataset({\n        ...baseInfo,\n        ...rightAxesDataList,\n        isAxesArea: true,\n        measureId: rightAxesDataList?.yField,\n        axisTitle: rightAxesDataList.axisTitle || options?.defaultRightAxisName,\n        isStack: isStackChartInAxes(rightAxesDataList.series, chartType),\n        axesDirection: 'right'\n      })\n    );\n  !leftAxesDataList &&\n    !rightAxesDataList &&\n    result.push(\n      ...getBaseInsightByDataset({\n        ...baseInfo,\n        axisTitle: '',\n        seriesId: '',\n        seriesIndex: null,\n        isStack: isStackChart(spec, chartType, cell)\n      })\n    );\n  return result;\n};\n\nexport const BaseStatistics: InsightAlgorithm = {\n  name: 'base',\n  forceChartType: [ChartType.DualAxisChart, ChartType.LineChart, ChartType.BarChart, ChartType.AreaChart],\n  insightType: InsightType.Min,\n  supportPercent: false,\n  algorithmFunction: BaseStatisticsFunction\n};\n"]}