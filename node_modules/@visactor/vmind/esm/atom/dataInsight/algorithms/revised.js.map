{"version":3,"sources":["../src/atom/dataInsight/algorithms/revised.ts"],"names":[],"mappings":"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","file":"revised.js","sourcesContent":["/** revised Insight */\nimport { isArray } from '@visactor/vutils';\nimport type { DataInsightExtractContext } from '../type';\nimport { InsightType, type Insight } from '../type';\nimport type { DataCell } from '../../../types';\nimport { ChartType } from '../../../types';\n\nexport interface RevisedInsightParams {\n  insights: Insight[];\n  [InsightType.Min]?: Insight[];\n  [InsightType.Max]?: Insight[];\n  [InsightType.Avg]?: Insight[];\n  [InsightType.Outlier]?: Insight[];\n  [InsightType.PairOutlier]?: Insight[];\n  [InsightType.AbnormalBand]?: Insight[];\n  [InsightType.ExtremeValue]?: Insight[];\n  [InsightType.TurningPoint]?: Insight[];\n  [InsightType.MajorityValue]?: Insight[];\n  [InsightType.AbnormalTrend]?: Insight[];\n  [InsightType.OverallTrend]?: Insight[];\n  [InsightType.Correlation]?: Insight[];\n  [InsightType.Volatility]?: Insight[];\n}\n\ntype OutliearFieldMapping = Record<\n  string,\n  {\n    insight: Insight;\n    key: string;\n  }[]\n>;\n\nconst filterInsight = (insights: Insight[], type: InsightType) => insights.filter(insight => insight.type === type);\n\nconst getBandInsightByOutliear = (context: DataInsightExtractContext, outliearFieldMapping: OutliearFieldMapping) => {\n  const bandInsightKeys: string[] = [];\n  const abnormalBand: Insight[] = [];\n  const { dimensionValues, cell, chartType } = context;\n  if (\n    ![\n      ChartType.DualAxisChart,\n      ChartType.LineChart,\n      ChartType.BarChart,\n      ChartType.AreaChart,\n      ChartType.WaterFallChart\n    ].includes(chartType)\n  ) {\n    return {\n      bandInsightKeys,\n      abnormalBand\n    };\n  }\n  const { x: cellx } = cell;\n  const xField: string = isArray(cellx) ? cellx[0] : cellx;\n  Object.keys(outliearFieldMapping).forEach(fieldId => {\n    const fieldInsights = outliearFieldMapping[fieldId];\n    const indexOfInsights = fieldInsights\n      .map(content => {\n        const xValue = content.insight.data[0].dataItem[xField];\n        return {\n          xIndex: dimensionValues.indexOf(xValue),\n          content\n        };\n      })\n      .sort((a, b) => a.xIndex - b.xIndex);\n    let band = [indexOfInsights[0]];\n    for (let i = 1; i <= indexOfInsights.length; i++) {\n      const curIndex = indexOfInsights[i]?.xIndex;\n      const prevIndex = band[band.length - 1].xIndex;\n      if (i < indexOfInsights.length && curIndex - prevIndex === 1) {\n        band.push(indexOfInsights[i]);\n      } else {\n        if (band.length > 1) {\n          abnormalBand.push({\n            type: InsightType.AbnormalBand,\n            name: InsightType.AbnormalBand,\n            data: band.map(v => v.content.insight.data[0]),\n            seriesName: fieldId,\n            value: null,\n            significant: band.length,\n            info: {\n              startValue: band[0].content.insight.data[0].dataItem[xField],\n              endValue: band[band.length - 1].content.insight.data[0].dataItem[xField],\n              xField\n            }\n          });\n          bandInsightKeys.push(...band.map(v => v.content.key));\n        }\n        band = [indexOfInsights[i]];\n      }\n    }\n  });\n  return {\n    abnormalBand,\n    bandInsightKeys\n  };\n};\n\nexport const mergePointInsight = (\n  insightCtx: RevisedInsightParams,\n  type: InsightType,\n  context: DataInsightExtractContext\n) => {\n  const outliear: Record<string, Insight[]> = {};\n  const { insights } = insightCtx;\n  const outliearFieldMapping: OutliearFieldMapping = {};\n  const filterOutliearInsight = filterInsight(insights, InsightType.Outlier);\n  filterOutliearInsight.forEach(insight => {\n    const { data } = insight;\n    const seriesName = insight?.seriesName as DataCell;\n    const key = `${data[0].index}-&&&-${seriesName}`;\n    if (!outliear[key]) {\n      outliear[key] = [];\n      if (!outliearFieldMapping[seriesName]) {\n        outliearFieldMapping[seriesName] = [];\n      }\n      outliearFieldMapping[seriesName].push({\n        insight,\n        key\n      });\n    }\n    outliear[key].push(insight);\n  });\n  const majorityValueInsight = filterInsight(insights, InsightType.MajorityValue).filter(insight => {\n    const { data } = insight;\n    const seriesName = insight?.seriesName as DataCell;\n    const key = `${data[0].index}-&&&-${seriesName}`;\n    return !outliear[key];\n  });\n\n  const pairOutlier = filterPairInsight(insights, filterOutliearInsight);\n  const turnPointInsight = filterInsight(insights, InsightType.TurningPoint);\n  const { abnormalBand, bandInsightKeys } = getBandInsightByOutliear(context, outliearFieldMapping);\n  bandInsightKeys.forEach(key => {\n    delete outliear[key];\n  });\n  turnPointInsight.forEach(insight => {\n    const { data } = insight;\n    const seriesName = insight?.seriesName as DataCell;\n    const key = `${data[0].index}-&&&-${seriesName}`;\n    if (outliear[key]) {\n      delete outliear[key];\n    }\n  });\n  const outliearInsight = Object.keys(outliear).map(key => ({\n    ...outliear[key][0],\n    significant: outliear[key].reduce((prev, cur) => prev + cur.significant, 0)\n  }));\n\n  return {\n    ...insightCtx,\n    [InsightType.Outlier]: outliearInsight,\n    [InsightType.PairOutlier]: pairOutlier,\n    [InsightType.TurningPoint]: turnPointInsight,\n    [InsightType.AbnormalBand]: abnormalBand,\n    [InsightType.MajorityValue]: majorityValueInsight\n  };\n};\n\nconst filterPairInsight = (insights: Insight[], outliers: Insight[]) => {\n  const pairs = filterInsight(insights, InsightType.PairOutlier);\n  const outlierKeys = new Set();\n  outliers.forEach(insight => {\n    const { data, seriesName } = insight;\n    const key = `${data[0].index}-&&&-${seriesName}`;\n    outlierKeys.add(key);\n  });\n  return pairs.filter(v => {\n    const { data, seriesName } = v;\n    const keyList = data.map(v => `${v.index}-&&&-${seriesName}`);\n    return !keyList.find(key => outlierKeys.has(key));\n  });\n};\n\nexport const filterCorrelationInsight = (insightCtx: RevisedInsightParams) => {\n  const { insights } = insightCtx;\n  const abnormalTrend = filterInsight(insights, InsightType.AbnormalTrend);\n  const trendFields = new Set(abnormalTrend.map(insight => insight.seriesName));\n  const correlation = filterInsight(insights, InsightType.Correlation).filter(\n    insight =>\n      insight.name === 'pearson-coefficient' ||\n      (isArray(insight.seriesName) && !insight.seriesName.find(seriesName => trendFields.has(seriesName)))\n  );\n  return {\n    ...insightCtx,\n    [InsightType.Correlation]: correlation\n  };\n};\n\nexport const filterInsightByType = (insightCtx: RevisedInsightParams, type: InsightType) => {\n  return {\n    ...insightCtx,\n    [type]: insightCtx?.[type] ? insightCtx?.[type] : filterInsight(insightCtx.insights, type)\n  };\n};\n"]}