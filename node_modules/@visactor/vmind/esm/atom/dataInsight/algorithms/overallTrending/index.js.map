{"version":3,"sources":["../src/atom/dataInsight/algorithms/overallTrending/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { isArray, isValidNumber } from '@visactor/vutils';\nimport { longestTrendInterval, originalMKTest, TrendType } from '../statistics';\nimport type { InsightAlgorithm } from '../../type';\nimport { InsightType, type DataInsightExtractContext, type Insight } from '../../type';\nimport { ChartType } from '../../../../types';\nimport { isPercentChart, isStackChart } from '../../utils';\nimport { findLastIndex } from '../../../../utils/common';\n\nexport interface OverallTrendingOptions {\n  alpha?: number;\n  calcScope?: boolean;\n}\n\nexport const overallTrendingAlgo = (context: DataInsightExtractContext, options: OverallTrendingOptions) => {\n  const { cell, dimensionSumMap, dimensionValues } = context;\n  const { alpha = 0.05, calcScope = false } = options || {};\n  const result: Insight[] = [];\n  const { y: celly, x: cellx } = cell;\n  const yField: string[] = isArray(celly) ? celly.flat() : [celly];\n  const xField = isArray(cellx) ? cellx[0] : cellx;\n  yField.forEach(measureId => {\n    const overallDataset = dimensionSumMap[measureId];\n    const { trend, pValue, zScore, slope, intercept } = originalMKTest(overallDataset, alpha, calcScope);\n    if (trend !== TrendType.NO_TREND) {\n      const { length, start, end, maxTrend } = longestTrendInterval(overallDataset, trend);\n      const overallEndIndex = findLastIndex(overallDataset, v => isValidNumber(v));\n      const onverallStartIndex = overallDataset.findIndex(v => isValidNumber(v));\n      const overallChange =\n        overallDataset[onverallStartIndex] === 0\n          ? -overallDataset[overallEndIndex]\n          : overallDataset[overallEndIndex] / overallDataset[onverallStartIndex] - 1;\n      if (\n        (trend === TrendType.INCREASING && overallChange > 0) ||\n        (trend === TrendType.DECREASING && overallChange < 0)\n      ) {\n        result.push({\n          type: InsightType.OverallTrend,\n          fieldId: measureId,\n          value: trend,\n          significant: 1 - pValue,\n          info: {\n            slope,\n            intercept,\n            length,\n            overall: {\n              coordinates: [\n                { [xField]: dimensionValues[onverallStartIndex], [measureId]: overallDataset[onverallStartIndex] },\n                { [xField]: dimensionValues[overallEndIndex], [measureId]: overallDataset[overallEndIndex] }\n              ],\n              start: onverallStartIndex,\n              end: overallEndIndex,\n              change: overallChange,\n              startValue: overallDataset[onverallStartIndex],\n              endValue: overallDataset[overallEndIndex],\n              startDimValue: dimensionValues[onverallStartIndex],\n              endDimValue: dimensionValues[overallEndIndex]\n            },\n            start,\n            end,\n            maxTrend,\n            change:\n              overallDataset[start] === 0 ? -overallDataset[end] : overallDataset[end] / overallDataset[start] - 1,\n            startDimValue: dimensionValues[start],\n            endDimValue: dimensionValues[end],\n            startValue: overallDataset[start],\n            endValue: overallDataset[end]\n          }\n        } as unknown as Insight);\n      }\n    }\n  });\n\n  return result;\n};\n\nconst canRun = (context: DataInsightExtractContext) => {\n  const { seriesDataMap, chartType, cell, spec } = context;\n  return (\n    (isStackChart(spec, chartType, cell) && !isPercentChart(spec, chartType, cell)) ||\n    Object.keys(seriesDataMap).length === 1\n  );\n};\n\nexport const OverallTrending: InsightAlgorithm = {\n  name: 'overallTrending',\n  forceChartType: [ChartType.LineChart, ChartType.BarChart, ChartType.AreaChart],\n  insightType: InsightType.OverallTrend,\n  canRun,\n  algorithmFunction: overallTrendingAlgo\n};\n"]}