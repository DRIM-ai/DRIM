{"version":3,"sources":["../src/atom/dataInsight/algorithms/volatility/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAE3C,OAAO,EAAE,oBAAoB,EAAE,MAAM,eAAe,CAAC;AAErD,OAAO,EAAE,WAAW,EAAuC,MAAM,YAAY,CAAC;AAE9E,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAC9C,OAAO,EAAE,cAAc,EAAE,MAAM,aAAa,CAAC;AAM7C,MAAM,cAAc,GAAG,CAAC,OAAkC,EAAE,QAA2B,EAAE,EAAE;IACzF,MAAM,EAAE,aAAa,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IAC9C,MAAM,EAAE,SAAS,GAAG,GAAG,EAAE,GAAG,QAAQ,IAAI,EAAE,CAAC;IAC3C,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;IAC1B,MAAM,MAAM,GAAa,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IAEjE,MAAM,MAAM,GAAc,EAAE,CAAC;IAE7B,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC/C,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QAC3B,MAAM,aAAa,GAAc,aAAa,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QACnF,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YACzB,IAAI,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE;gBACnC,OAAO;aACR;YACD,MAAM,UAAU,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAEhE,MAAM,EAAE,GAAG,oBAAoB,CAAC,UAAU,CAAC,CAAC;YAC5C,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE;gBAC5B,MAAM,CAAC,IAAI,CAAC;oBACV,IAAI,EAAE,WAAW,CAAC,UAAU;oBAC5B,OAAO,EAAE,SAAS;oBAClB,KAAK,EAAE,EAAuB;oBAC9B,WAAW,EAAE,EAAE;oBACf,UAAU,EAAE,MAAM;oBAClB,IAAI,EAAE;wBACJ,EAAE;qBACH;iBACoB,CAAC,CAAC;aAC1B;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAGF,MAAM,CAAC,MAAM,UAAU,GAAqB;IAC1C,IAAI,EAAE,YAAY;IAClB,SAAS,EAAE,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,aAAa,EAAE,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,SAAS,CAAC;IAClG,WAAW,EAAE,WAAW,CAAC,UAAU;IACnC,iBAAiB,EAAE,cAAc;IACjC,YAAY,EAAE,IAAI;IAClB,cAAc,EAAE,KAAK;CACtB,CAAC","file":"index.js","sourcesContent":["import { isArray } from '@visactor/vutils';\n\nimport { coefficientVariation } from '../statistics';\nimport type { DataInsightExtractContext } from '../../type';\nimport { InsightType, type Insight, type InsightAlgorithm } from '../../type';\nimport type { DataTable } from '../../../../types';\nimport { ChartType } from '../../../../types';\nimport { isPercenSeries } from '../../utils';\n\nexport interface VolatilityOptions {\n  threshold?: number;\n}\n\nconst volatilityAlgo = (context: DataInsightExtractContext, optioins: VolatilityOptions) => {\n  const { seriesDataMap, cell, spec } = context;\n  const { threshold = 0.8 } = optioins || {};\n  const { y: celly } = cell;\n  const yField: string[] = isArray(celly) ? celly.flat() : [celly];\n\n  const result: Insight[] = [];\n\n  const seriesNames = Object.keys(seriesDataMap);\n  seriesNames.forEach(series => {\n    const seriesDataset: DataTable = seriesDataMap[series].map((d: any) => d.dataItem);\n    yField.forEach(measureId => {\n      if (isPercenSeries(spec, measureId)) {\n        return;\n      }\n      const measureSet = seriesDataset.map(d => Number(d[measureId]));\n\n      const cv = coefficientVariation(measureSet);\n      if (Math.abs(cv) > threshold) {\n        result.push({\n          type: InsightType.Volatility,\n          fieldId: measureId,\n          value: cv as unknown as number,\n          significant: cv,\n          seriesName: series,\n          info: {\n            cv\n          }\n        } as unknown as Insight);\n      }\n    });\n  });\n  return result;\n};\n\n/** @todo @czx add fluctuation period */\nexport const Volatility: InsightAlgorithm = {\n  name: 'volatility',\n  chartType: [ChartType.LineChart, ChartType.DualAxisChart, ChartType.BarChart, ChartType.AreaChart],\n  insightType: InsightType.Volatility,\n  algorithmFunction: volatilityAlgo,\n  supportStack: true,\n  supportPercent: false\n};\n"]}