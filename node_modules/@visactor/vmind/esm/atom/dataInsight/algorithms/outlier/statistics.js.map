{"version":3,"sources":["../src/atom/dataInsight/algorithms/outlier/statistics.ts"],"names":[],"mappings":"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","file":"statistics.js","sourcesContent":["/**\n * Using Z-score and IQR to detect abnormal value.\n */\nimport { isArray } from '@visactor/vutils';\nimport type { InsightAlgorithm } from '../../type';\nimport { InsightType, type DataInsightExtractContext, type Insight } from '../../type';\nimport { ChartType, type DataItem } from '../../../../types';\nimport { getIntersection, isValidData } from '../../../../utils/common';\nimport { getMeanAndstdDev } from '../statistics';\nimport { isPercenSeries } from '../../utils';\n\nexport interface DataPoint {\n  index: number;\n  indexPair?: number[];\n  value: number;\n}\n\nexport function getAbnormalByZScores(data: DataPoint[], threshold = 3) {\n  const { mean, stdDev } = getMeanAndstdDev(data.map(v => v.value));\n  return data.filter(v => Math.abs((v.value - mean) / stdDev) >= threshold).map(v => v.index);\n}\n\nfunction calculateQuantile(sortedData: number[], quantile: number) {\n  const pos = (sortedData.length - 1) * quantile;\n  const base = Math.floor(pos);\n  const rest = pos - base;\n\n  if (sortedData[base + 1] !== undefined) {\n    return sortedData[base] + rest * (sortedData[base + 1] - sortedData[base]);\n  }\n  return sortedData[base];\n}\n\nexport function getAbnormalByIQR(data: DataPoint[]) {\n  // 先对数据进行排序\n  const sortedData = data.slice().sort((a, b) => a.value - b.value);\n  const dataList = sortedData.map(v => v.value);\n\n  // 计算四分位数\n  const q1 = calculateQuantile(dataList, 0.25);\n  const q3 = calculateQuantile(dataList, 0.75);\n  const iqr = q3 - q1;\n\n  // 识别异常值\n  const lowerBound = q1 - 1.5 * iqr;\n  const upperBound = q3 + 1.5 * iqr;\n  const outliers = sortedData.filter(dataPoint => dataPoint.value < lowerBound || dataPoint.value > upperBound);\n\n  return outliers.map(v => v.index);\n}\n\nexport interface StatisticsOptions {\n  threshold?: number;\n}\n\nconst zscoreIQRAlgoFunc = (context: DataInsightExtractContext, options: StatisticsOptions) => {\n  const result: Insight[] = [];\n  const { threshold = 3 } = options || {};\n  const { seriesDataMap, cell, spec } = context;\n  const { y: celly } = cell;\n  const yField: string[] = isArray(celly) ? celly.flat() : [celly];\n\n  Object.keys(seriesDataMap).forEach(group => {\n    const dataset: { index: number; dataItem: DataItem }[] = seriesDataMap[group];\n    yField.forEach(field => {\n      if (isPercenSeries(spec, field)) {\n        return;\n      }\n      const dataList = dataset\n        .map((d, index) => ({\n          index: index,\n          value: Number(d.dataItem[field])\n        }))\n        .filter(v => isValidData(v.value) && !isNaN(v.value));\n      const zScoreResult = dataList.length >= 30 ? getAbnormalByZScores(dataList, threshold) : null;\n      const iqrResult = dataList.length >= 10 ? getAbnormalByIQR(dataList) : null;\n      const finalResult = zScoreResult ? (getIntersection(zScoreResult, iqrResult) as number[]) : iqrResult;\n      (finalResult || []).forEach(index => {\n        const insightDataItem = dataset[index];\n        const lofInsight: Insight = {\n          type: InsightType.Outlier,\n          data: [insightDataItem],\n          fieldId: field,\n          value: insightDataItem.dataItem[field],\n          significant: 1,\n          seriesName: group\n        } as unknown as Insight;\n        result.push(lofInsight);\n      });\n    });\n  });\n  return result;\n};\n\nexport const StatisticsAlo: InsightAlgorithm = {\n  name: 'statistics',\n  forceChartType: [\n    ChartType.DualAxisChart,\n    ChartType.LineChart,\n    ChartType.BarChart,\n    ChartType.AreaChart,\n    ChartType.RadarChart,\n    ChartType.PieChart,\n    ChartType.RoseChart,\n    ChartType.WaterFallChart\n  ],\n  insightType: InsightType.Outlier,\n  algorithmFunction: zscoreIQRAlgoFunc,\n  supportPercent: false\n};\n"]}