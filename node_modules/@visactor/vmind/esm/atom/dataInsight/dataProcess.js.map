{"version":3,"sources":["../src/atom/dataInsight/dataProcess.ts"],"names":[],"mappings":"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","file":"dataProcess.js","sourcesContent":["import { sumDimensionValues } from './utils';\nimport type { DataCell, DataTable } from '../../types';\nimport { ChartType, type DataInsightCtx } from '../../types';\nimport { isArray, isValidNumber } from '@visactor/vutils';\nimport { DEFAULT_SERIES_NAME } from './const';\nimport { getFieldInfoFromDataset } from '../../utils/field';\nimport {\n  getCellFromSpec,\n  getChartTypeFromSpec,\n  getDatasetFromSpec,\n  getFieldMappingFromSpec,\n  revisedCell\n} from '../../utils/spec';\nimport type { DimValueDataMap } from './type';\nimport { transferFieldInfo } from '../dataClean/utils';\nimport { transferMeasureInTable } from '../../utils/dataTable';\n\ninterface AxesDataInfoCtx {\n  spec: any;\n  chartType: ChartType;\n  seriesField: string;\n  yField: string[];\n  xField: string;\n}\n\nconst getDimensionDataInfo = (context: {\n  onlyOneSeries: boolean;\n  xField: string;\n  yField: string[];\n  dataset: DataTable;\n}) => {\n  const { xField, yField, onlyOneSeries, dataset } = context;\n  //group the data by xField\n  const dimensionDataMap: DimValueDataMap = {};\n  const dimensionValues: DataCell[] = [];\n  dataset.forEach((dataItem, index) => {\n    const groupBy = dataItem[xField];\n    if (!groupBy) {\n      return;\n    }\n    if (!dimensionDataMap[groupBy]) {\n      dimensionDataMap[groupBy] = [];\n      dimensionValues.push(groupBy);\n    }\n    dimensionDataMap[groupBy].push({ index, dataItem });\n  });\n\n  const dimensionStackSumMap: Record<string, number[]> = {};\n  const dimensionSumMap: Record<string, number[]> = {};\n  yField.forEach(measureId => {\n    dimensionStackSumMap[measureId] = [];\n    dimensionSumMap[measureId] = dimensionValues.map(dimension => {\n      const dimensionDataset = dimensionDataMap[dimension].map(d => d.dataItem);\n      dimensionStackSumMap[measureId].push(sumDimensionValues(dimensionDataset, measureId, v => v));\n      return sumDimensionValues(dimensionDataset, measureId, onlyOneSeries ? v => v : undefined);\n    });\n  });\n  return {\n    dimensionDataMap,\n    dimensionValues,\n    dimensionSumMap,\n    dimensionStackSumMap\n  };\n};\n\nconst getDataBySeries = (context: AxesDataInfoCtx & { position: string[] }) => {\n  const { spec, xField, seriesField, position, yField } = context;\n  const { series = [], _vmindAxesDiffKey = '_editor_axis_orient', data, axes = [] } = spec;\n  const currentAxis = axes.find((v: any) => position.includes(v.orient));\n  const axisTitle = currentAxis?.title?.text;\n  let currentSeries = [];\n  let seriesIndex = null;\n  let seriesId = '';\n  if (currentAxis?.seriesId) {\n    seriesId = currentAxis?.seriesId;\n    currentSeries = series.filter((s: any) => currentAxis.seriesId.includes(s.id));\n  } else if (currentAxis?.seriesIndex) {\n    seriesIndex = currentAxis?.seriesIndex;\n    currentSeries = currentAxis.seriesIndex.map((v: any) => series[v]).filter((s: any) => !!s);\n  } else {\n    series.filter((s: any) => position.includes(s[_vmindAxesDiffKey]));\n    seriesId = (series || []).map((v: any) => v.id).filter((v: any) => !!v);\n  }\n  const dataList: DataTable = [];\n  currentSeries.forEach((s: any) => {\n    if (s?.data?.values) {\n      dataList.push(...s.data.values);\n    } else if (s?.dataId) {\n      dataList.push(...(data.find((subData: any) => subData.id === s.dataId)?.values || []));\n    } else if (isValidNumber(s?.dataIndex)) {\n      dataList.push(...(data?.[s.dataIndex]?.values || []));\n    }\n  });\n  const seriesNames = seriesField ? [...new Set(dataList.map(d => d[seriesField] as string))] : [];\n  return {\n    dataset: dataList,\n    series: currentSeries,\n    seriesNames,\n    axisTitle,\n    seriesIndex: isArray(seriesIndex) ? seriesIndex[0] : seriesIndex,\n    seriesId: isArray(seriesId) ? seriesId?.[0] : seriesId,\n    yField: currentSeries?.[0]?.yField,\n    ...getDimensionDataInfo({ xField, yField, onlyOneSeries: seriesNames.length === 1, dataset: dataList })\n  };\n};\n\nexport const extractAxesData = (context: AxesDataInfoCtx) => {\n  const { chartType } = context;\n  if (chartType !== ChartType.DualAxisChart) {\n    return {};\n  }\n  return {\n    leftAxesDataList: getDataBySeries({ ...context, position: ['left'] }),\n    rightAxesDataList: getDataBySeries({ ...context, position: ['right'] })\n  };\n};\n\nexport const extractDataFromContext = (context: DataInsightCtx) => {\n  const { spec, fieldInfo: inputFieldInfo, dataTable, vChartType } = context;\n\n  const chartType = getChartTypeFromSpec(spec, vChartType);\n  if (!chartType) {\n    console.error('unsupported spec type');\n    return null;\n  }\n\n  let dataset = dataTable;\n  if (!dataset || dataset?.length === 0) {\n    //no dataset in the input, extract from spec\n    dataset = getDatasetFromSpec(spec);\n  }\n  const specFieldMapping = getFieldMappingFromSpec(spec);\n\n  let fieldInfo = inputFieldInfo;\n  if (!fieldInfo || fieldInfo?.length === 0) {\n    fieldInfo = getFieldInfoFromDataset(dataset);\n  }\n  fieldInfo = transferFieldInfo(\n    {\n      fieldInfo\n    },\n    specFieldMapping\n  )?.fieldInfo;\n  const originDataset = dataset;\n  dataset = transferMeasureInTable(dataset, fieldInfo);\n\n  const cell = revisedCell(getCellFromSpec(spec, chartType), dataset);\n\n  /** @todo dataset sort maybe difference in some special case */\n  const { color, x: cellx, y: celly } = cell;\n  const seriesField: string = isArray(color) ? color[0] : color;\n  const seriesDataMap: DimValueDataMap = {};\n  if (seriesField && ![ChartType.PieChart, ChartType.RoseChart].includes(chartType)) {\n    dataset.forEach((dataItem, index) => {\n      const groupBy = dataItem[seriesField];\n      if (!groupBy || (chartType === ChartType.WaterFallChart && groupBy === 'total')) {\n        return;\n      }\n      if (!seriesDataMap[groupBy]) {\n        seriesDataMap[groupBy] = [];\n      }\n      seriesDataMap[groupBy].push({ index, dataItem });\n    });\n  } else {\n    seriesDataMap[DEFAULT_SERIES_NAME] = dataset.map((dataItem, index) => ({ index, dataItem }));\n  }\n\n  const xField: string = isArray(cellx) ? cellx[0] : cellx;\n\n  const yField: string[] = isArray(celly) ? celly.flat() : [celly];\n  const onlyOneSeries = Object.keys(seriesDataMap).length === 1;\n  return {\n    dataset,\n    originDataset,\n    fieldInfo,\n    chartType,\n    seriesDataMap,\n    cell,\n    ...getDimensionDataInfo({ xField, yField, onlyOneSeries, dataset }),\n    ...extractAxesData({ spec, chartType, seriesField, yField, xField })\n  };\n};\n"]}