{"version":3,"sources":["../src/atom/chartCommand/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * 根据数据等，生成图表指令\n */\nimport { merge } from '@visactor/vutils';\nimport type { ChartCommandCtx, LLMMessage, ChartCommandOptions, BaseOptions, BaseAtomConstructor } from '../../types';\nimport { AtomName } from '../../types';\nimport { BaseAtom } from '../base';\nimport { getLanguageOfText } from '../../utils/text';\nimport { getChartCommandPrompt } from './prompt';\nimport { getRoleByFieldType } from '../../utils/field';\nimport { isValidData } from '../../utils/common';\nimport { Factory } from '../../core/factory';\n\nexport class ChartCommandAtom extends BaseAtom<ChartCommandCtx, ChartCommandOptions> {\n  name = AtomName.CHART_COMMAND;\n\n  isLLMAtom = true;\n\n  constructor(context: ChartCommandCtx, option: BaseOptions) {\n    super(context, option);\n  }\n\n  buildDefaultOptions(): ChartCommandOptions {\n    return {\n      ...super.buildDefaultOptions(),\n      useDataTable: false\n    };\n  }\n\n  buildDefaultContext(context: ChartCommandCtx): ChartCommandCtx {\n    return merge(\n      {},\n      {\n        command: ''\n      },\n      context\n    );\n  }\n\n  shouldRunByContextUpdate(context: ChartCommandCtx): boolean {\n    return context.text !== this.context.text || context.fieldInfo !== this.context.fieldInfo;\n  }\n\n  protected getLLMMessages(query?: string): LLMMessage[] {\n    const { fieldInfo, text, dataTable, summary } = this.context;\n    const language = this.options?.language ?? getLanguageOfText(text || summary);\n    const addtionContent = this.getHistoryLLMMessages(query);\n    return [\n      {\n        role: 'system',\n        content: getChartCommandPrompt(language)\n      },\n      {\n        role: 'user',\n        content: JSON.stringify({\n          userInput: [\n            {\n              text,\n              summary,\n              fieldInfo: fieldInfo.map(info => ({\n                fieldName: info.fieldName,\n                type: info.role || getRoleByFieldType(info.type),\n                dataLength: dataTable?.filter(v => isValidData(v[info.fieldName]))?.length || undefined\n              })),\n              dataTable: this.options?.useDataTable ? JSON.stringify(dataTable) : undefined\n            }\n          ]\n        })\n      },\n      ...addtionContent\n    ];\n  }\n\n  protected parseLLMContent(resJson: any): ChartCommandCtx {\n    const { commands = [] } = resJson;\n    const command = commands?.[0] || '';\n    if (command === false || command === 'false' || !command) {\n      console.error(\"Can't generate chart command in this case\");\n      return {\n        ...this.context,\n        command: '',\n        error: `Can't generate chart command in this case`\n      };\n    }\n    return {\n      ...this.context,\n      command\n    };\n  }\n}\n\nexport const registerChartCommandAtom = () => {\n  Factory.registerAtom(\n    AtomName.CHART_COMMAND,\n    ChartCommandAtom as unknown as BaseAtomConstructor<ChartCommandCtx, ChartCommandOptions>\n  );\n};\n"]}