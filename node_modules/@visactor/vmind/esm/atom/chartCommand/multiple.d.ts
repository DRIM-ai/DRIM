import type { MultipleChartCommandsCtx, LLMMessage, ChartCommandOptions, BaseOptions } from '../../types';
import { AtomName } from '../../types';
import { BaseAtom } from '../base';
export declare class MultipleChartCommandAtom extends BaseAtom<MultipleChartCommandsCtx, ChartCommandOptions> {
    name: AtomName;
    isLLMAtom: boolean;
    ruleList: boolean[];
    constructor(context: MultipleChartCommandsCtx, option: BaseOptions);
    buildDefaultOptions(): ChartCommandOptions;
    buildDefaultContext(context: MultipleChartCommandsCtx): MultipleChartCommandsCtx;
    shouldRunByContextUpdate(context: MultipleChartCommandsCtx): boolean;
    protected runBeforeLLM(): MultipleChartCommandsCtx;
    protected getLLMMessages(query?: string): LLMMessage[];
    protected parseLLMContent(resJson: any): MultipleChartCommandsCtx;
}
export declare const registerMultipleChartCommandAtom: () => void;
