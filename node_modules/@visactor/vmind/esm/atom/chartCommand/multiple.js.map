{"version":3,"sources":["../src/atom/chartCommand/multiple.ts"],"names":[],"mappings":"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","file":"multiple.js","sourcesContent":["import { isArray, merge } from '@visactor/vutils';\nimport type { MultipleChartCommandsCtx, LLMMessage, ChartCommandOptions, BaseOptions } from '../../types';\nimport { AtomName } from '../../types';\nimport { BaseAtom } from '../base';\nimport { getLanguageOfText } from '../../utils/text';\nimport { getChartCommandPrompt } from './prompt';\nimport { getRoleByFieldType } from '../../utils/field';\nimport { isValidData } from '../../utils/common';\nimport { Factory } from '../../core/factory';\nimport type { BaseAtomConstructor } from '../../types';\n\nexport class MultipleChartCommandAtom extends BaseAtom<MultipleChartCommandsCtx, ChartCommandOptions> {\n  name = AtomName.MULTIPLE_CHART_COMMAND;\n\n  isLLMAtom = true;\n\n  ruleList: boolean[];\n\n  constructor(context: MultipleChartCommandsCtx, option: BaseOptions) {\n    super(context, option);\n  }\n\n  buildDefaultOptions(): ChartCommandOptions {\n    return {\n      ...super.buildDefaultOptions(),\n      useDataTable: false,\n      filterByRule: true\n    };\n  }\n\n  buildDefaultContext(context: MultipleChartCommandsCtx): MultipleChartCommandsCtx {\n    return merge(\n      {},\n      {\n        commands: []\n      },\n      context\n    );\n  }\n\n  shouldRunByContextUpdate(context: MultipleChartCommandsCtx): boolean {\n    return context.datasets !== this.context.datasets;\n  }\n\n  protected runBeforeLLM(): MultipleChartCommandsCtx {\n    this.ruleList = this.context.datasets.map(dataset => {\n      return this.options?.filterByRule ? dataset?.dataTable?.length < 2 : false;\n    });\n    return this.context;\n  }\n\n  protected getLLMMessages(query?: string): LLMMessage[] {\n    const { datasets } = this.context;\n    const language = this.options?.language ?? getLanguageOfText(datasets?.[0]?.text || datasets?.[0]?.summary);\n    const addtionContent = this.getHistoryLLMMessages(query);\n    return [\n      {\n        role: 'system',\n        content: getChartCommandPrompt(language)\n      },\n      {\n        role: 'user',\n        content: JSON.stringify({\n          userInput: datasets\n            .filter((datasets, i) => !this.ruleList[i])\n            .map(dataset => {\n              const { text, summary, fieldInfo, dataTable } = dataset;\n              return {\n                text,\n                summary,\n                fieldInfo: fieldInfo.map(info => ({\n                  fieldName: info.fieldName,\n                  type: info.role || getRoleByFieldType(info.type),\n                  dataLength: dataTable?.filter(v => isValidData(v[info.fieldName]))?.length || undefined\n                })),\n                dataTable: this.options?.useDataTable ? JSON.stringify(dataTable) : undefined\n              };\n            })\n        })\n      },\n      ...addtionContent\n    ];\n  }\n\n  protected parseLLMContent(resJson: any): MultipleChartCommandsCtx {\n    const { commands = [] } = resJson;\n    if (!isArray(commands) || commands.length === 0) {\n      console.error(\"Can't generate chart command in this case\");\n      return {\n        ...this.context,\n        commands: this.context.datasets.map(v => '')\n      };\n    }\n    const res = [];\n    let commandIndex = 0;\n    for (let i = 0; i < this.context.datasets.length; i++) {\n      const isRule = this.ruleList[i];\n      if (isRule) {\n        res.push('');\n      } else {\n        res.push(commands[commandIndex++]);\n      }\n    }\n    return {\n      ...this.context,\n      commands: res\n    };\n  }\n}\n\nexport const registerMultipleChartCommandAtom = () => {\n  Factory.registerAtom(\n    AtomName.MULTIPLE_CHART_COMMAND,\n    MultipleChartCommandAtom as unknown as BaseAtomConstructor<MultipleChartCommandsCtx, ChartCommandOptions>\n  );\n};\n"]}