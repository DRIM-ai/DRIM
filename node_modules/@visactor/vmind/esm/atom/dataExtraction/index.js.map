{"version":3,"sources":["../src/atom/dataExtraction/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { AtomName, type DataExtractionCtx, type DataExtractionOptions, type BaseOptions } from '../../types/atom';\nimport { BaseAtom } from '../base';\nimport { merge, pick } from '@visactor/vutils';\nimport type { LLMMessage } from '../../types/llm';\nimport { getBasePrompt, getFieldInfoPrompt, getUserQuery } from './prompt/prompt';\nimport { getLanguageOfText } from '../../utils/text';\nimport { formatFieldInfo, getFieldInfoFromDataset, getRoleByFieldType, hasMeasureField } from '../../utils/field';\nimport { getCtxBymeasureAutoTransfer } from '../dataClean/utils';\nimport type { DatasetFromText, DataTable, FieldInfo } from '../../types';\nimport { DataType } from '../../types';\nimport { Factory } from '../../core/factory';\nimport type { BaseAtomConstructor } from '../../types';\n\nexport class DataExtractionAtom extends BaseAtom<DataExtractionCtx, DataExtractionOptions> {\n  name = AtomName.DATA_EXTRACT;\n\n  isLLMAtom = true;\n\n  replaceData: {\n    template: string;\n    replace: string;\n  }[];\n\n  isTextReplaceStatus: boolean[];\n\n  constructor(context: DataExtractionCtx, option: BaseOptions) {\n    super(context, option);\n    const currentYear = new Date().getFullYear();\n    this.replaceData = [\n      {\n        template: '今年',\n        replace: `${currentYear}年`\n      },\n      {\n        template: '去年',\n        replace: `${currentYear - 1}年`\n      },\n      {\n        template: '前年',\n        replace: `${currentYear - 2}年`\n      }\n    ];\n  }\n\n  buildDefaultContext(context: DataExtractionCtx): DataExtractionCtx {\n    return merge(\n      {},\n      {\n        dataTable: [],\n        fieldInfo: []\n      },\n      context\n    );\n  }\n\n  buildDefaultOptions(): DataExtractionOptions {\n    return {\n      ...super.buildDefaultOptions(),\n      reGenerateFieldInfo: true,\n      isMultiple: false\n    };\n  }\n\n  shouldRunByContextUpdate(context: DataExtractionCtx): boolean {\n    return context.text !== this.context.text || context.fieldInfo !== this.context.fieldInfo;\n  }\n\n  revisedText(text: string) {\n    let newText = text;\n    this.isTextReplaceStatus = [];\n    this.replaceData.forEach(v => {\n      newText = newText.replaceAll(v.template, v.replace);\n      this.isTextReplaceStatus.push(text.includes(v.template));\n    });\n    return `text: ${newText}`;\n  }\n\n  getLLMMessages(query?: string): LLMMessage[] {\n    const { fieldInfo, text } = this.context;\n    const { showThoughts, reGenerateFieldInfo, llm, isMultiple } = this.options;\n    const addtionContent = this.getHistoryLLMMessages(query);\n    const language = this.options?.language ?? getLanguageOfText(text);\n    if (!fieldInfo || !fieldInfo?.length) {\n      return [\n        {\n          role: 'system',\n          content: getBasePrompt(llm.options.model, language, isMultiple, showThoughts)\n        },\n        {\n          role: 'user',\n          content: this.revisedText(text)\n        },\n        ...getUserQuery(llm.options.model, language, isMultiple),\n        ...addtionContent\n      ];\n    }\n    const fieldInfoContent = fieldInfo.map(info => pick(info, ['fieldName', 'dataExample', 'type', 'description']));\n    const fieldInfoString = JSON.stringify(fieldInfoContent);\n    const userContent = `User's fieldInfo is bellow:\n\\`\\`\\` TypeScript\n${fieldInfoString}\n\\`\\`\\`\n${language === 'english' ? 'Extracted text is bellow:' : '提取文本如下：'}${text}\n`;\n    return [\n      {\n        role: 'system',\n        content: getFieldInfoPrompt(language, showThoughts, reGenerateFieldInfo)\n      },\n      {\n        role: 'user',\n        content: userContent\n      },\n      ...addtionContent\n    ];\n  }\n\n  revisedFieldInfo(dataTable: DataTable, fieldInfo: any[]): FieldInfo[] {\n    const fieldInfoByData = getFieldInfoFromDataset(dataTable);\n    const fieldMapping: Record<string, FieldInfo> = fieldInfoByData.reduce(\n      (prev, curV) => ({\n        ...prev,\n        [curV.fieldName]: curV\n      }),\n      {}\n    );\n    return fieldInfo.map(info => {\n      const { fieldName, type, isRatio, unit } = info;\n      const mapInfo = fieldMapping?.[fieldName];\n      let finalType = type === 'dimension' ? DataType.STRING : DataType.NUMERICAL;\n      if (isRatio) {\n        finalType = DataType.RATIO;\n      } else {\n        finalType = mapInfo?.type ?? finalType;\n      }\n      return {\n        fieldName,\n        unit,\n        ratioGranularity: isRatio ? unit : null,\n        type: finalType,\n        role: getRoleByFieldType(finalType)\n      };\n    });\n  }\n\n  parseSubText(text: string, textRange: [string, string]) {\n    const [start, end] = textRange ?? [];\n    if (!start || !end || !text) {\n      return text;\n    }\n    const pattern = new RegExp(start + '(.*?)' + end, 'gs');\n    let match;\n\n    // 使用正则表达式搜索匹配\n    if ((match = pattern.exec(text)) !== null) {\n      return `${start}${match[1]}${end}`;\n    }\n    return text;\n  }\n\n  private parseMultipleResult(dataset: DatasetFromText[]) {\n    return dataset\n      .map(result => {\n        return {\n          ...result,\n          text: this.parseSubText(this.context.text, result.textRange),\n          fieldInfo: formatFieldInfo(this.revisedFieldInfo(result.dataTable, result.fieldInfo))\n        };\n      })\n      .filter(result => hasMeasureField(result.fieldInfo));\n  }\n\n  parseLLMContent(resJson: any) {\n    const { isMultiple } = this.options;\n    const { dataTable, fieldInfo, isDataExtraction, dataset, thoughts } = resJson;\n    if (isDataExtraction === false || (isMultiple && !dataset)) {\n      console.error(\"It's not a data extraction task\");\n      return this.context;\n    }\n    if (isMultiple) {\n      return {\n        ...this.context,\n        thoughts,\n        datasets: this.parseMultipleResult(dataset)\n      };\n    }\n    const llmFieldInfo = this.revisedFieldInfo(dataTable, fieldInfo);\n    return {\n      ...this.context,\n      thoughts,\n      fieldInfo: formatFieldInfo(\n        (this.options?.reGenerateFieldInfo ? llmFieldInfo : null) ?? this.context?.fieldInfo ?? []\n      ),\n      dataTable\n    } as DataExtractionCtx;\n  }\n\n  protected _runWithOutLLM(): DataExtractionCtx {\n    return getCtxBymeasureAutoTransfer(this.context, this.context.text) as DataExtractionCtx;\n  }\n}\n\nexport const registerDataExtractionAtom = () => {\n  Factory.registerAtom(\n    AtomName.DATA_EXTRACT,\n    DataExtractionAtom as unknown as BaseAtomConstructor<DataExtractionCtx, DataExtractionOptions>\n  );\n};\n"]}