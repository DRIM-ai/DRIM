{"version":3,"sources":["../src/atom/chartQAExtraction/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAE5C,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAGnC,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAC3C,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAG7C,MAAM,OAAO,iBAAkB,SAAQ,QAA2C;IAKhF,YAAY,OAA6B,EAAE,MAAmB;QAC5D,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QALzB,SAAI,GAAG,QAAQ,CAAC,mBAAmB,CAAC;QAEpC,cAAS,GAAG,IAAI,CAAC;IAIjB,CAAC;IAED,cAAc,CAAC,KAAc;QAC3B,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QAC9B,OAAO;YACL;gBACE,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;aAChD;YACD;gBACE,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,IAAI;aACd;SACF,CAAC;IACJ,CAAC;IAED,eAAe,CAAC,OAAY;QAC1B,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC;QACpD,IAAI,CAAC,SAAS,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;YACjC,uCACK,IAAI,CAAC,OAAO,KACf,KAAK,EAAE,iBAAiB,IACxB;SACH;QACD,MAAM,OAAO,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;QACxC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;YAClB,uCACK,IAAI,CAAC,OAAO,KACf,OAAO;gBACP,WAAW,EACX,MAAM,EAAE,OAAO,IACf;SACH;QACD,uCACK,IAAI,CAAC,OAAO,KACf,OAAO;YACP,WAAW,EACX,MAAM,EAAE,SAAS,IACjB;IACJ,CAAC;CACF;AAED,MAAM,CAAC,MAAM,6BAA6B,GAAG,GAAG,EAAE;IAChD,OAAO,CAAC,YAAY,CAClB,QAAQ,CAAC,mBAAmB,EAC5B,iBAAsF,CACvF,CAAC;AACJ,CAAC,CAAC","file":"index.js","sourcesContent":["import { AtomName } from '../../types/atom';\nimport type { BaseOptions } from '../../types';\nimport { BaseAtom } from '../base';\nimport type { LLMMessage } from '../../types/llm';\nimport type { ChartQAExtractionCtx } from '../../types';\nimport { getSystemPrompt } from './prompt';\nimport { parseLLMJson } from '../../utils/json';\nimport { Factory } from '../../core/factory';\nimport type { BaseAtomConstructor } from '../../types';\n\nexport class ChartQAExtraction extends BaseAtom<ChartQAExtractionCtx, BaseOptions> {\n  name = AtomName.CHART_QA_EXTRACTION;\n\n  isLLMAtom = true;\n\n  constructor(context: ChartQAExtractionCtx, option: BaseOptions) {\n    super(context, option);\n  }\n\n  getLLMMessages(query?: string): LLMMessage[] {\n    const { text } = this.context;\n    return [\n      {\n        role: 'system',\n        content: getSystemPrompt(this.options.language)\n      },\n      {\n        role: 'user',\n        content: text\n      }\n    ];\n  }\n\n  parseLLMContent(resJson: any): ChartQAExtractionCtx {\n    const { answerDSL, keyList, explanation } = resJson;\n    if (!answerDSL) {\n      console.error('Answer is Empty');\n      return {\n        ...this.context,\n        error: 'Answer is Empty'\n      };\n    }\n    const jsonRes = parseLLMJson(answerDSL);\n    if (!jsonRes.error) {\n      return {\n        ...this.context,\n        keyList,\n        explanation,\n        answer: jsonRes\n      };\n    }\n    return {\n      ...this.context,\n      keyList,\n      explanation,\n      answer: answerDSL\n    };\n  }\n}\n\nexport const registerChartQAExtractionAtom = () => {\n  Factory.registerAtom(\n    AtomName.CHART_QA_EXTRACTION,\n    ChartQAExtraction as unknown as BaseAtomConstructor<ChartQAExtractionCtx, BaseOptions>\n  );\n};\n"]}