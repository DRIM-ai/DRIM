{"version":3,"sources":["../src/atom/VChartSpec/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAC5C,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAEnC,OAAO,EAAE,oBAAoB,EAAE,MAAM,SAAS,CAAC;AAC/C,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAG7C,MAAM,OAAO,UAAW,SAAQ,QAAoC;IAKlE,YAAY,OAAsB,EAAE,MAAmB;QACrD,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QALzB,SAAI,GAAG,QAAQ,CAAC,WAAW,CAAC;QAE5B,cAAS,GAAG,KAAK,CAAC;IAIlB,CAAC;IAED,mBAAmB,CAAC,OAAsB;QACxC,uCACK,OAAO,KACV,IAAI,EAAE,EAAE,IACR;IACJ,CAAC;IAED,cAAc;QACZ,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5D,MAAM,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,YAAY,CAAC;QAE1C,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;YACrC,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC;YAE7B,OAAO,IAAI,CAAC,OAAO,CAAC;SACrB;QACD,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,oBAAoB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAErE,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACjC,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC;QAE5B,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;CACF;AAED,MAAM,CAAC,MAAM,sBAAsB,GAAG,GAAG,EAAE;IACzC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,WAAW,EAAE,UAAwE,CAAC,CAAC;AACvH,CAAC,CAAC","file":"index.js","sourcesContent":["import { AtomName } from '../../types/atom';\nimport { BaseAtom } from '../base';\nimport type { BaseOptions, VChartSpecCtx } from '../../types';\nimport { runOperactionsOfSpec } from './utils';\nimport { Factory } from '../../core/factory';\nimport type { BaseAtomConstructor } from '../../types';\n\nexport class VChartSpec extends BaseAtom<VChartSpecCtx, BaseOptions> {\n  name = AtomName.VCHART_SPEC;\n\n  isLLMAtom = false;\n\n  constructor(context: VChartSpecCtx, option: BaseOptions) {\n    super(context, option);\n  }\n\n  buildDefaultContext(context: VChartSpecCtx): VChartSpecCtx {\n    return {\n      ...context,\n      spec: {}\n    };\n  }\n\n  _runWithOutLLM(): VChartSpecCtx {\n    const { prevSpec, originalSpec, operations } = this.context;\n    const baseSpec = prevSpec ?? originalSpec;\n\n    if (!operations || !operations.length) {\n      this.context.spec = baseSpec;\n\n      return this.context;\n    }\n    const { spec: newSpec } = runOperactionsOfSpec(baseSpec, operations);\n\n    this.context.prevSpec = baseSpec;\n    this.context.spec = newSpec;\n\n    return this.context;\n  }\n}\n\nexport const registerVChartSpecAtom = () => {\n  Factory.registerAtom(AtomName.VCHART_SPEC, VChartSpec as unknown as BaseAtomConstructor<VChartSpecCtx, BaseOptions>);\n};\n"]}