import type { IVChartOperationItem } from '../../types/atom';
export declare const validSeriesForChart: Record<string, {
    series: string[];
}>;
export declare const getChartAxisType: (chartSpec: any) => "none" | "polar" | "cartesian";
export declare const aliasByComponentType: Record<string, {
    isArray?: boolean;
    aliasMap?: Record<string, {
        appendSpec?: any;
        filter?: (entry: any) => boolean;
    }>;
}>;
export declare const removeUnneedArrayInSpec: (leafSpec: any, compKey: string, parentKeyPath: string) => any;
export declare const findComponentNameByAlias: (alias: string) => string;
export declare const parseAliasOfPath: (parentKeyPath: string, compKey: string, chartSpec: any, leafSpec: any, op: 'add' | 'update' | 'delete' | 'deleteAll') => {
    parentKeyPath: string;
    leafSpec?: undefined;
    aliasName?: undefined;
    appendContent?: undefined;
} | {
    parentKeyPath: string;
    leafSpec: any;
    aliasName?: undefined;
    appendContent?: undefined;
} | {
    aliasName: string;
    appendContent: {
        appendPath: string;
        appendSpec: any;
        parentKeyPath: string;
    }[];
    parentKeyPath: string;
    leafSpec?: undefined;
};
export declare const checkDuplicatedKey: (parentPath: string, key: string) => {
    remainKeyPath: string;
};
export declare const reduceDuplicatedPath: (parentPath: string, spec: any) => any;
export declare const convertFunctionString: (spec: any) => any;
export declare const updateSpecByOperation: (prevSpec: any, op: IVChartOperationItem) => {
    newSpec: any;
    code: number;
};
export declare const runOperactionsOfSpec: (prevSpec: any, ops: IVChartOperationItem[]) => {
    spec: any;
    codes: number[];
};
