{"version":3,"sources":["../src/utils/common.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { isFunction, isValidNumber } from '@visactor/vutils';\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\nimport type { DataCell } from '../types';\n\ndayjs.extend(customParseFormat);\n\nexport const sampleSize = (array: any, n: number) => {\n  const length = array === null ? 0 : array.length;\n  if (!length || n < 1) {\n    return [];\n  }\n  n = n > length ? length : n;\n  const randIndexs = [];\n  while (randIndexs.length < n) {\n    const rand = Math.floor(Math.random() * length);\n    if (randIndexs.indexOf(rand) === -1) {\n      randIndexs.push(rand);\n    }\n  }\n  return randIndexs.map(i => array[i]);\n};\n\nexport const uniqBy = (array: any, key: string | ((item: any) => string)) => {\n  const seen = new Set();\n  return array.filter((item: any) => {\n    const k = isFunction(key) ? key(item) : item[key];\n    if (k === undefined) {\n      return false;\n    }\n    if (!seen.has(k)) {\n      seen.add(k);\n      return true;\n    }\n    return false;\n  });\n};\n\nexport const isValidData = (data: DataCell) => {\n  return data !== null && data !== undefined && data !== 'null' && data !== '';\n};\n\nconst dateFormats = [\n  {\n    key: 'YYYY年MM月DD日',\n    regex: /^(\\d{4})年(\\d{1,2})月(\\d{1,2})日$/,\n    format: (match: string, year: string, month: string, day: string) =>\n      `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`\n  },\n\n  {\n    key: 'MM月DD日YYYY年',\n    regex: /^(\\d{1,2})月(\\d{1,2})日(\\d{4})年$/,\n    format: (match: string, month: string, day: string, year: string) =>\n      `${year}-${month.padStart(2, '0')}-${year.padStart(2, '0')}`\n  },\n\n  {\n    key: 'YYYY年MM月',\n    regex: /^(\\d{4})年(\\d{1,2})月$/,\n    format: (match: string, year: string, month: string) => `${year}-${month.padStart(2, '0')}`\n  },\n\n  { key: 'YYYY年', regex: /^(\\d{4})年$/, format: (match: string, year: string) => `${year}` },\n\n  { key: 'MM月', regex: /^(\\d{1,2})月$/, format: (match: string, month: string) => `${month.padStart(2, '0')}` },\n  {\n    key: 'MM月DD日',\n    regex: /^(\\d{1,2})月(\\d{1,2})日$/,\n    format: (match: string, month: string, day: string) => `${month.padStart(2, '0')}-${day.padStart(2, '0')}`\n  }\n];\nfunction isQuarterDate(date: string) {\n  const patterns = [/^\\d{4}-Q[1-4]$/, /^\\d{4}年第[一二三四]季度$/, /^Q[1-4]$/, /^\\d{4}年-Q[1-4]$/];\n  return patterns.some(pattern => pattern.test(date));\n}\nexport function validateDate(date: any) {\n  const formaterDate = `${date}`.trim();\n  //check if the string is a data string\n  return (\n    dayjs(formaterDate).isValid() ||\n    dateFormats.find(v => new Date(formaterDate.replace(v.regex, v.format)).toString() !== 'Invalid Date') ||\n    isQuarterDate(formaterDate)\n  );\n}\n\nfunction convertQuarterToMonth(quarter: string) {\n  switch (quarter) {\n    case 'Q1':\n    case '第一季度':\n      return '01-01';\n    case 'Q2':\n    case '第二季度':\n      return '04-01';\n    case 'Q3':\n    case '第三季度':\n      return '07-01';\n    case 'Q4':\n    case '第四季度':\n      return '10-01';\n    default:\n      throw new Error('Invalid quarter');\n  }\n}\n\nexport function convertStringToDateValue(stringDate: string) {\n  const date = `${stringDate}`.trim();\n  if (dayjs(date).isValid()) {\n    return date;\n  }\n  const validFormat = dateFormats.find(v => new Date(date.replace(v.regex, v.format)).toString() !== 'Invalid Date');\n  if (validFormat && validFormat.regex.test(date)) {\n    return date.replace(validFormat.regex, validFormat.format);\n  }\n  const patterns = [\n    {\n      regex: /^(\\d{4})-Q([1-4])$/,\n      format: (match: RegExpMatchArray) => `${match[1]}-${convertQuarterToMonth('Q' + match[2])}`\n    },\n    {\n      regex: /^(\\d{4})年第([一二三四])季度$/,\n      format: (match: RegExpMatchArray) => `${match[1]}-${convertQuarterToMonth(match[2] + '季度')}`\n    },\n    { regex: /^Q([1-4])$/, format: (match: RegExpMatchArray) => `${convertQuarterToMonth('Q' + match[1])}` },\n    {\n      regex: /^(\\d{4})年-Q([1-4])$/,\n      format: (match: RegExpMatchArray) => `${match[1]}-${convertQuarterToMonth('Q' + match[2])}`\n    }\n  ];\n\n  for (const pattern of patterns) {\n    const match = date.match(pattern.regex);\n    if (match) {\n      return typeof pattern.format === 'function' ? pattern.format(match) : date.replace(pattern.regex, pattern.format);\n    }\n  }\n  return date;\n}\n\nexport function average(data: any[], field?: string): number {\n  let sum = 0;\n  let count = 0;\n  data.forEach((x: any) => {\n    const v = field ? +x[field] : +x;\n    if (isValidNumber(v)) {\n      sum += v;\n      count++;\n    }\n  });\n\n  const average = sum / count;\n  return average;\n}\n\nexport function getIntersection(array1: DataCell[], array2: DataCell[]) {\n  return array1.filter(value => array2.includes(value));\n}\n\nconst KNOWLEDGE_START_INDEX = 1;\nexport const getStrFromArray = (array: string[]) =>\n  array.map((item, index) => `${index + KNOWLEDGE_START_INDEX}. ${item}`).join('\\n');\n\n// Function to find the last index based on a condition\nexport function findLastIndex(arr: any[], predicate: (value: any, index: number, array: any[]) => boolean) {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (predicate(arr[i], i, arr)) {\n      return i;\n    }\n  }\n  return -1;\n}\n"]}