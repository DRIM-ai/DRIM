{"version":3,"sources":["../src/utils/set.ts"],"names":[],"mappings":"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","file":"set.js","sourcesContent":["import { isArray, isObject, isValid, merge } from '@visactor/vutils';\n\nexport function set(object: any, path: string, value: any) {\n  return object == null ? object : baseSet(object, path, value);\n}\n\nexport function deleteByPath(object: any, path: string) {\n  return object == null ? object : baseDelete(object, path);\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(path: string, object: any) {\n  if (object[path]) {\n    return [path];\n  }\n  const arr: string[] = [];\n\n  path.split('.').forEach(entry => {\n    const res = /\\[(\\d)\\]/g.exec(entry);\n\n    if (res) {\n      arr.push(entry.replace(res[0], ''));\n      arr.push(res[1]);\n    } else {\n      arr.push(entry);\n    }\n  });\n\n  return arr;\n}\n\nfunction isIndex(key: string) {\n  return /\\d/.exec(key);\n}\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} pathString The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object: any, pathString: string, value: any) {\n  if (!isObject(object)) {\n    return object;\n  }\n  const path = castPath(pathString, object);\n\n  let index = -1;\n  const length = path.length;\n  const lastIndex = length - 1;\n  let nested: any = object;\n\n  while (nested != null && ++index < length) {\n    const key = path[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = (nested as any)[key];\n\n      newValue = isValid(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};\n    }\n\n    if (isValid(nested[key])) {\n      merge(nested, { [key]: newValue });\n    } else {\n      nested[key] = newValue;\n    }\n    nested = nested[key];\n  }\n  return object;\n}\n\n/**\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} pathString The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseDelete(object: any, pathString: string) {\n  if (!isObject(object)) {\n    return object;\n  }\n  const path = castPath(pathString, object);\n\n  let index = -1;\n  const length = path.length;\n  const lastIndex = length - 1;\n  let nested: any = object;\n\n  while (nested != null && ++index < length) {\n    const key = path[index];\n\n    if (key in nested) {\n      if (index === lastIndex) {\n        if (isArray(nested)) {\n          nested.splice(Number(key), 1);\n        } else {\n          delete nested[key];\n        }\n      } else {\n        nested = nested[key];\n      }\n    }\n  }\n  return object;\n}\n"]}