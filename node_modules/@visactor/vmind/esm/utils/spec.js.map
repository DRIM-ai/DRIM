{"version":3,"sources":["../src/utils/spec.ts"],"names":[],"mappings":"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","file":"spec.js","sourcesContent":["import { array, isArray, isString, merge, uniqArray } from '@visactor/vutils';\nimport { ChartType } from '../types';\nimport type { DataItem, DataTable, DataCell, Cell, FieldInfo } from '../types';\nimport { getFieldInfoFromDataset } from './field';\nimport {\n  COLOR_FIELD,\n  FOLD_NAME,\n  FOLD_VALUE,\n  FOLD_VALUE_MAIN,\n  FOLD_VALUE_SUB,\n  GROUP_FIELD\n} from '@visactor/chart-advisor';\nimport { data, discreteLegend as legend } from '../atom/chartGenerator/spec/transformers/common';\nimport { funnelData } from '../atom/chartGenerator/spec/transformers/funnel';\nimport { sankeyData } from '../atom/chartGenerator/spec/transformers/sankey';\nimport { sequenceData } from '../atom/chartGenerator/spec/transformers/rankingBar';\nimport { wordCloudData } from '../atom/chartGenerator/spec/transformers/wordcloud';\nimport { foldDataTableByYField, foldDatasetByYField } from './dataTable';\n\n/**\n * extract vmind chart type from spec\n * @param spec\n * @returns\n */\nexport const getChartTypeFromSpec = (spec: any, vchartType?: string): ChartType => {\n  if (!spec) {\n    return undefined;\n  }\n  const type = vchartType ?? spec?.type;\n  if (type === 'bar') {\n    return ChartType.BarChart;\n  }\n  if (type === 'line') {\n    return ChartType.LineChart;\n  }\n  if (type === 'area') {\n    return ChartType.AreaChart;\n  }\n  if (type === 'pie') {\n    return ChartType.PieChart;\n  }\n  if (type === 'wordCloud') {\n    return ChartType.WordCloud;\n  }\n  if (type === 'scatter') {\n    return ChartType.ScatterPlot;\n  }\n  if (type === 'funnel') {\n    return ChartType.FunnelChart;\n  }\n  if (type === 'rose') {\n    return ChartType.RoseChart;\n  }\n  if (type === 'radar') {\n    return ChartType.RadarChart;\n  }\n  if (type === 'sankey') {\n    return ChartType.SankeyChart;\n  }\n  if (type === 'waterfall') {\n    return ChartType.WaterFallChart;\n  }\n  if (type === 'boxPlot') {\n    return ChartType.BoxPlot;\n  }\n  if (type === 'common') {\n    const { series } = spec;\n    const typeList = uniqArray(series.map((s: any) => s.type));\n    if (typeList.length === 1) {\n      return getChartTypeFromSpec(series[0], vchartType);\n    }\n    if (series.length > 1 && series.every((s: any) => s.type === 'bar' || s.type === 'line' || s.type === 'area')) {\n      //check if the common chart is dual-axis chart\n      return ChartType.DualAxisChart;\n    }\n  }\n  //unsupported spec\n  return undefined;\n};\n\nexport const getDatasetFromSpec = (spec: any) => {\n  if (!spec) {\n    return [];\n  }\n  const originSpecData = array(spec.data);\n  return originSpecData.map((d: any) => d.values).flat(2);\n};\n\nexport const getFieldMappingFromSpec = (spec: any) => {\n  if (!spec) {\n    return {};\n  }\n  let res = {};\n  array(spec.data).forEach((d: any) => {\n    if (d?.fields) {\n      res = merge(res, d.fields);\n    }\n  });\n  return res;\n};\n\n/**\n * Auto generate cell from a spec template\n * @param spec\n * @returns\n */\nexport const getCellFromSpec = (spec: any, vmindChartType?: ChartType): Cell => {\n  if (!spec) {\n    return {};\n  }\n  const { type, direction } = spec;\n  const isTransposed = direction === 'horizontal';\n  if (type === 'bar' && spec.player) {\n    //dynamic bar chart\n    const time = spec.timeField;\n    const x = spec.yField;\n    const y = spec.xField;\n    const color = spec.seriesField;\n    return { time, x, y, color, isTransposed };\n  }\n  if (['bar', 'line', 'area'].includes(type)) {\n    const x = spec.xField;\n    const y = spec.yField;\n    const color = spec.seriesField;\n    return { x, y, color, isTransposed };\n  }\n  if ('radar' === type) {\n    return {\n      x: spec.categoryField,\n      y: spec.valueField,\n      color: spec.seriesField\n    };\n  }\n  if (['pie', 'rose'].includes(type)) {\n    return {\n      x: spec.categoryField,\n      y: spec.valueField,\n      color: spec.categoryField,\n      angle: spec.valueField\n    };\n  }\n  if ('scatter' === type) {\n    return {\n      color: spec.seriesField,\n      size: spec.sizeField,\n      x: spec.xField,\n      y: spec.yField\n    };\n  }\n  if ('boxPlot' === type) {\n    return {\n      x: spec.xField,\n      y: [spec.minField, spec.q1Field, spec.medianField, spec.q3Field, spec.maxField].filter(Boolean)\n    };\n  }\n  if ('common' === type) {\n    if ([ChartType.BarChart, ChartType.AreaChart, ChartType.LineChart].includes(vmindChartType)) {\n      // single-chart parsed by common type\n      return {\n        x: uniqArray(\n          spec.series\n            .map((s: any) => s.xField)\n            .filter((xField: string) => !!xField)\n            .flat()\n        ),\n        y: uniqArray(\n          spec.series\n            .map((s: any) => s.yField)\n            .filter((yField: string) => !!yField)\n            .flat()\n        ),\n        color: spec.series[0].seriesField,\n        isTransposed: isTransposed || spec.series.every((s: any) => s.direction === 'horizontal')\n      };\n    }\n    //dual-axis chart\n    const series = spec.series ?? [];\n    if (vmindChartType === ChartType.DualAxisChart) {\n      const seriesField = uniqArray(series.map((s: any) => s?.seriesField).filter((v: string) => !!v));\n      return {\n        x: series[0]?.xField,\n        y: uniqArray([series[0]?.yField, series[1]?.yField].filter(Boolean)),\n        color: seriesField?.length === 1 ? seriesField[0] : undefined,\n        isTransposed\n      };\n    }\n    return getCellFromSpec(series[0], vmindChartType);\n  }\n  if (type === 'wordCloud') {\n    return {\n      color: spec.nameField,\n      size: spec.valueField\n    };\n  }\n  if (type === 'funnel') {\n    return {\n      x: spec.categoryField,\n      y: spec.valueField\n    };\n  }\n  if ('waterfall' === type) {\n    return {\n      x: spec.xField,\n      y: spec.yField,\n      color: spec?.seriesField\n    };\n  }\n  if (type === 'sankey') {\n    return {\n      source: spec.sourceField,\n      target: spec.targetField,\n      value: spec.valueField\n    };\n  }\n  return {};\n};\n\nexport const revisedCell = (cell: Cell, dataset: DataTable) => {\n  const { color } = cell;\n  const colorField = isArray(color) ? color[0] : color;\n  if (colorField) {\n    const colorList = uniqArray(dataset.map(d => d[colorField])) as DataCell[];\n    if (colorList.length <= 1) {\n      cell.color = undefined;\n    }\n  }\n  if (cell.isTransposed) {\n    const temp = cell.x;\n    cell.x = cell.y;\n    cell.y = temp;\n  }\n  return cell;\n};\n\n/**\n * remove the fields that is not exist in the fieldInfo from cell\n * @param cell\n * @param fieldInfo\n * @returns\n */\nconst removeInvalidFieldFromCell = (cell: Cell, fieldInfo: FieldInfo[]) => {\n  const fieldList = fieldInfo\n    .map(f => f.fieldName)\n    .concat([\n      FOLD_NAME.toString(),\n      FOLD_VALUE.toString(),\n      FOLD_VALUE_MAIN.toString(),\n      FOLD_VALUE_SUB.toString(),\n      COLOR_FIELD.toString(),\n      GROUP_FIELD.toString()\n    ]);\n  const cellNew: any = {\n    ...cell\n  };\n  Object.keys(cellNew).forEach(key => {\n    const fields = cellNew[key];\n    if (isArray(fields)) {\n      const filteredFields = fields.filter(field => fieldList.includes(field));\n      cellNew[key] = filteredFields.length === 0 ? undefined : filteredFields;\n    } else if (isString(fields)) {\n      cellNew[key] = fieldList.includes(fields) ? fields : undefined;\n    }\n  });\n  return cellNew;\n};\n\n/**\n * fill the spec template with dataset\n * @param template\n * @param dataset\n * @param totalTime\n * @returns\n */\nexport const fillSpecTemplateWithData = (template: any, dataset: DataTable, propsCell?: any, totalTime?: number) => {\n  const { type } = template;\n  const fieldInfo = getFieldInfoFromDataset(dataset);\n  const tempCell = propsCell ?? getCellFromSpec(template);\n\n  let cellNew = { ...tempCell };\n  let datasetNew = dataset;\n\n  //check if the spec is generated using fold dataset\n  const hasFold = isArray(cellNew.y)\n    ? cellNew.y[0] === FOLD_VALUE.toString() ||\n      (cellNew.y[0] === FOLD_VALUE_MAIN.toString() && cellNew.y[1] === FOLD_VALUE_SUB.toString())\n    : cellNew.y === FOLD_VALUE.toString();\n\n  cellNew = removeInvalidFieldFromCell(cellNew, fieldInfo);\n\n  const context: any = {\n    spec: template,\n    dataset: datasetNew,\n    cells: [cellNew],\n    totalTime\n  };\n\n  if (type === 'bar' && template.player) {\n    //dynamic bar chart\n    const { spec } = sequenceData(context);\n    return spec;\n  }\n  if (['bar', 'line'].includes(type)) {\n    if (hasFold) {\n      //bar chart and line chart can visualize multiple y fields\n      const { foldInfo } = cellNew;\n      const { foldMap } = foldInfo;\n      datasetNew = foldDataTableByYField(datasetNew, Object.keys(foldMap), fieldInfo);\n    }\n\n    if (cellNew.color === COLOR_FIELD.toString()) {\n      const { cartesianInfo } = cellNew;\n      const colorFields = cartesianInfo.fieldList;\n      datasetNew = datasetNew.map((data: DataItem) => {\n        const colorItem = colorFields.map((field: string) => data[field]).join('-');\n        return {\n          ...data,\n          [COLOR_FIELD]: colorItem\n        };\n      });\n    }\n\n    const contextNew: any = {\n      spec: template,\n      dataset: datasetNew,\n      cells: [cellNew],\n      totalTime\n    };\n    const { spec: spec1 } = data(contextNew);\n    const { spec } = legend({ ...contextNew, spec: spec1 });\n    return spec;\n  }\n  if (['pie', 'scatter', 'rose', 'radar', 'waterfall', 'boxPlot'].includes(type)) {\n    if (hasFold) {\n      const { foldInfo } = cellNew;\n      const { foldMap } = foldInfo;\n      datasetNew = foldDatasetByYField(datasetNew, Object.keys(foldMap), fieldInfo);\n    }\n    if (cellNew.color === COLOR_FIELD.toString()) {\n      const { cartesianInfo } = cellNew;\n      const colorFields = cartesianInfo.fieldList;\n      datasetNew = datasetNew.map((data: DataItem) => {\n        const colorItem = colorFields.map((field: string) => data[field]).join('-');\n        return {\n          ...data,\n          [COLOR_FIELD]: colorItem\n        };\n      });\n    }\n\n    const contextNew: any = {\n      spec: template,\n      dataset: datasetNew,\n      cells: [cellNew],\n      totalTime\n    };\n    const { spec } = data(contextNew);\n    return spec;\n  }\n  if ('common' === type) {\n    //dual-axis chart\n    let mainSeriesData = datasetNew;\n    let subSeriesData = datasetNew;\n\n    if (hasFold) {\n      //bar chart and line chart can visualize multiple y fields\n      const { foldInfo } = cellNew;\n      const { foldMap } = foldInfo;\n      mainSeriesData = foldDatasetByYField(\n        datasetNew,\n        [Object.keys(foldMap)[0]],\n        fieldInfo,\n        FOLD_NAME,\n        FOLD_VALUE_MAIN\n      );\n      subSeriesData = foldDatasetByYField(datasetNew, [Object.keys(foldMap)[1]], fieldInfo, FOLD_NAME, FOLD_VALUE_SUB);\n    }\n\n    const { spec: spec1 } = data(context);\n    const { spec: finalSpec } = legend({ ...context, spec: spec1 });\n\n    //const { spec } = dualAxisSeries({ ...context, spec: spec2 });\n    const { cartesianInfo, y } = cellNew;\n    if (finalSpec.series && finalSpec.series[0]) {\n      finalSpec.series[0].seriesField = COLOR_FIELD;\n\n      const colorFields = cartesianInfo ? cartesianInfo.fieldList : undefined;\n      finalSpec.series[0].data = {\n        id: finalSpec.data.id + '_bar',\n        values: mainSeriesData.map((d: any) => {\n          const colorItem = isArray(colorFields) ? colorFields.map((field: string) => d[field]).join('-') : y[0];\n          return { ...d, [COLOR_FIELD]: colorItem };\n        })\n      };\n    }\n    if (finalSpec.series && finalSpec.series[1]) {\n      finalSpec.series[1].seriesField = COLOR_FIELD;\n\n      const colorFields = cartesianInfo ? cartesianInfo.fieldList : undefined;\n      finalSpec.series[1].data = {\n        id: finalSpec.data.id + '_line',\n        values: subSeriesData.map((d: any) => {\n          const colorItem = isArray(colorFields) ? colorFields.map((field: string) => d[field]).join('-') : y[1];\n          return { ...d, [COLOR_FIELD]: colorItem };\n        })\n      };\n    }\n    return finalSpec;\n  }\n  if (type === 'wordCloud') {\n    const { spec } = wordCloudData(context);\n    return spec;\n  }\n  if (type === 'funnel') {\n    const { spec } = funnelData(context);\n    return spec;\n  }\n  if (type === 'sankey') {\n    const { spec } = sankeyData(context);\n    return spec;\n  }\n  const { spec } = data(context);\n  return spec;\n};\n"]}