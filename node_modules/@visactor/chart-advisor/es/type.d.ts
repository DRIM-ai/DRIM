export declare enum ScreenSize {
    LARGE = 0,
    MEDIUM = 1,
    SMALL = 2
}
export declare enum UserPurpose {
    NONE = 0,
    COMPARISON = 1,
    TREND = 2,
    DISTRIBUTION = 3,
    RANK = 4,
    PROPORTION = 5,
    COMPOSITION = 6,
    STORYTELLING = 7
}
export interface DimensionField {
    uniqueId: number;
    type: DataTypeName;
    isGeoField?: boolean;
}
export interface MeasureField {
    uniqueId: number;
}
export interface MeasureDataset {
    uniqueID?: number;
    data: number[];
    min?: number;
    max?: number;
    mean?: number;
    standardDev?: number;
    coefficient?: number;
    Q1?: number;
}
export interface DimensionDataset {
    uniqueID?: number;
    data: string[];
    dataType?: DataTypeName;
    dimensionName?: string;
    cardinal?: number;
    ratio?: number;
    isGeoField?: boolean;
}
export interface AutoChartCell {
    x: UniqueId[];
    y: UniqueId[];
    row: UniqueId[];
    column: UniqueId[];
    color?: UniqueId[];
    size?: UniqueId[];
    angle?: UniqueId[];
    value?: UniqueId[];
    text?: UniqueId[];
    group?: UniqueId[];
    error?: boolean;
    errMsg?: string;
    cartesianInfo?: CartesianInfo;
    foldInfo?: FoldInfo;
}
export interface CartesianInfo {
    key: UniqueId;
    fieldList: UniqueId[];
}
export interface FoldInfo {
    key: UniqueId;
    value: UniqueId;
    foldMap: {
        [key: number]: string;
    };
}
export interface FieldTypeMap {
    [key: number]: DataTypeName;
}
export type DataItem = {
    [key: number]: string;
};
export type Dataset = DataItem[];
export type Datasets = DataItem[][][][] | Dataset;
export type UniqueId = number | string;
export type DataTypeName = 'number' | 'string' | 'date';
export type AliasMap = {
    [key: number]: string;
};
export declare enum ChartType {
    TABLE = "table",
    RAW_TABLE = "raw_table",
    PIVOT_TABLE = "pivot_table",
    COLUMN = "column",
    COLUMN_PERCENT = "column_percent",
    COLUMN_PARALLEL = "column_parallel",
    BAR = "bar",
    BAR_PERCENT = "bar_percent",
    BAR_PARALLEL = "bar_parallel",
    LINE = "line",
    AREA = "area",
    AREA_PERCENT = "area_percent",
    PIE = "pie",
    ANNULAR = "annular",
    ROSE = "rose",
    SCATTER = "scatter",
    CIRCLE_VIEWS = "circle_views",
    DUAL_AXIS = "double_axis",
    BILATERAL = "bilateral",
    COMBINATION = "combination",
    MAP = "map",
    SCATTER_MAP = "scatter_map",
    MEASURE_CARD = "measure_card",
    COMPARATIVE_MEASURE_CARD = "comparative_measure_card",
    WORD_CLOUD = "word_cloud",
    HISTOGRAM = "histogram",
    FUNNEL = "funnel",
    RADAR = "radar",
    SANKEY = "sankey",
    EXTEND = "extend",
    PROGRESS = "progress"
}
export interface ScoreResult {
    chartType: ChartType;
    originScore: number;
    fullMark: number;
    score: number;
    scoreDetails: Array<{
        name: string;
        score: number;
    }>;
    cell?: AutoChartCell | AutoChartCell[];
    dataset?: Datasets;
    error?: any;
}
export interface PivotTree {
    field: UniqueId;
    values: {
        value: string;
        child: PivotTree | null;
    }[];
}
export interface AdviseResult {
    chartType: ChartType;
    scores: ScoreResult[];
    error?: any;
}
interface ScorerParams {
    inputDataSet: Dataset;
    dimList: DimensionDataset[];
    measureList: MeasureDataset[];
    aliasMap?: AliasMap;
    maxRowNum?: number;
    maxColNum?: number;
    purpose?: UserPurpose;
    screen?: ScreenSize;
}
export type Scorer = (params: ScorerParams) => Array<() => ScoreResult>;
export interface AdviserParams {
    originDataset: Dataset;
    dimensionList: DimensionField[];
    measureList: MeasureField[];
    aliasMap?: AliasMap;
    maxPivotRow?: number;
    maxPivotColumn?: number;
    purpose?: UserPurpose;
    screen?: ScreenSize;
    scorer?: Scorer;
}
export {};
