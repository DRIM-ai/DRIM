import { cloneDeep, isNil, isNumber, uniqArray } from '@visactor/vutils';
export function isNaN(value) {
    return isNumber(value) && value != +value;
}
const restoreDataItem = item => {
    if (!Array.isArray(item)) {
        return item;
    }
    return item.reduce((prev, cur) => prev.concat(restoreDataItem(cur)), []);
};
export const restoreDatasets = dataset => restoreDataItem(dataset);
export const calMean = dataset => {
    const { data } = dataset;
    const dataNotNull = data.filter(each => !isNil(each) && !isNaN(each));
    const sum = dataNotNull.reduce((prev, cur) => prev + cur, 0);
    const { length } = data;
    return sum / length;
};
export const calStandardDeviation = dataset => {
    const { data } = dataset;
    if (data.length === 1)
        return 0;
    const dataNotNull = data.filter(each => !isNil(each) && !isNaN(each));
    const mean = dataset.mean ? dataset.mean : calMean(dataset);
    const sumpow = dataNotNull.reduce((prev, cur) => prev + (cur - mean) ** 2, 0);
    const { length } = data;
    return Math.sqrt(sumpow / (length - 1));
};
export const calCoefficient = dataset => {
    const mean = dataset.mean ? dataset.mean : calMean(dataset);
    const standardDev = dataset.standardDev ? dataset.standardDev : calStandardDeviation(dataset);
    if (mean !== 0) {
        return standardDev / mean;
    }
    else {
        return undefined;
    }
};
const asc = arr => arr.sort((a, b) => a - b);
export const calQuantile = (dataset, q) => {
    const { data = [] } = dataset;
    const sorted = asc(cloneDeep(data.map(Math.abs))).filter(each => each && each > 0);
    const pos = (sorted.length - 1) * q;
    const base = Math.floor(pos);
    const rest = pos - base;
    if (sorted[base + 1] !== undefined) {
        return sorted[base] + rest * (sorted[base + 1] - sorted[base]);
    }
    else {
        return sorted[base];
    }
};
export const unique = arr => uniqArray(arr);
export const isTemporal = (type) => type === 'date';
