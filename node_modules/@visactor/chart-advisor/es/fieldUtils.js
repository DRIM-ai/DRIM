import { uniqArray, pick, isNil } from '@visactor/vutils';
export function omit(obj, arr) {
    if (isNil(obj) || isNil(arr)) {
        return obj;
    }
    return Object.keys(obj)
        .filter(k => !arr.includes(k))
        .reduce((res, key) => ((res[key] = obj[key]), res), {});
}
export const productLength = (list) => list.length === 0 ? 0 : list.map(d => d.length).reduce((pre, cur) => pre * cur, 1);
export const legendProduct = (list, hasMeasureName = false) => {
    if (hasMeasureName && list.length > 1) {
        const _list = [...list];
        const measureNames = _list.pop();
        const productResult = product(_list);
        return measureNames
            .map((measureName) => productResult.map((d) => d.concat(measureName)))
            .reduce((pre, cur) => pre.concat(cur), []);
    }
    return product(list);
};
const product = (list) => list.length === 0
    ? []
    : list.reduce(function (a, b) {
        return a
            .map(function (x) {
            return b.map(function (y) {
                return x.concat(y);
            });
        })
            .reduce(function (a, b) {
            return a.concat(b);
        }, []);
    }, [[]]);
export const getDomainFromDataset = (dataset, dim) => {
    const values = dataset.map((d) => String(d[dim]));
    return uniqArray(values);
};
export const retainDatasetField = (dataset, fields) => dataset.map((data) => pick(data, fields));
export const removeDatasetField = (dataset, fields) => dataset.map((data) => omit(data, fields));
export const getCartesianInfo = (fieldList, key) => ({
    key,
    fieldList
});
export const getFoldInfo = (measuresId, foldName, foldValue, aliasMap) => ({
    key: foldName,
    value: foldValue,
    foldMap: strMap2Obj(new Map(measuresId.map(id => [id, aliasMap[id]])))
});
const strMap2Obj = strMap => {
    const obj = Object.create(null);
    for (const [k, v] of strMap) {
        obj[k] = v;
    }
    return obj;
};
export const fold = (dataset, fields, foldName, foldValue, aliasMap, retains = true) => {
    const _dataset = [];
    dataset.forEach((data) => {
        fields.forEach((field) => {
            const _data = retains ? data : omit(data, fields);
            _dataset.push({
                ..._data,
                [foldName]: aliasMap ? aliasMap[field] : field,
                [foldValue]: data[field]
            });
        });
    });
    return _dataset;
};
